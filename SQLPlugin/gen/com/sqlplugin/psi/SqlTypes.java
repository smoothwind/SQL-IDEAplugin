// This is a generated file. Not intended for manual editing.
package com.sqlplugin.psi;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.PsiElement;
import com.intellij.lang.ASTNode;
import com.sqlplugin.SqlTokenType;
import com.sqlplugin.psi.impl.*;

public interface SqlTypes {

  IElementType ABSOLUTE_VALUE_EXPRESSION = new SqlElementType("ABSOLUTE_VALUE_EXPRESSION");
  IElementType ACTION = new SqlElementType("ACTION");
  IElementType ACTUAL_IDENTIFIER = new SqlElementType("ACTUAL_IDENTIFIER");
  IElementType ADD_ATTRIBUTE_DEFINITION = new SqlElementType("ADD_ATTRIBUTE_DEFINITION");
  IElementType ADD_COLUMN_DEFINITION = new SqlElementType("ADD_COLUMN_DEFINITION");
  IElementType ADD_COLUMN_SCOPE_CLAUSE = new SqlElementType("ADD_COLUMN_SCOPE_CLAUSE");
  IElementType ADD_DOMAIN_CONSTRAINT_DEFINITION = new SqlElementType("ADD_DOMAIN_CONSTRAINT_DEFINITION");
  IElementType ADD_ORIGINAL_METHOD_SPECIFICATION = new SqlElementType("ADD_ORIGINAL_METHOD_SPECIFICATION");
  IElementType ADD_OVERRIDING_METHOD_SPECIFICATION = new SqlElementType("ADD_OVERRIDING_METHOD_SPECIFICATION");
  IElementType ADD_TABLE_CONSTRAINT_DEFINITION = new SqlElementType("ADD_TABLE_CONSTRAINT_DEFINITION");
  IElementType ADD_TRANSFORM_ELEMENT_LIST = new SqlElementType("ADD_TRANSFORM_ELEMENT_LIST");
  IElementType AGGREGATE_FUNCTION = new SqlElementType("AGGREGATE_FUNCTION");
  IElementType ALL = new SqlElementType("ALL");
  IElementType ALLOCATE_CURSOR_STATEMENT = new SqlElementType("ALLOCATE_CURSOR_STATEMENT");
  IElementType ALLOCATE_DESCRIPTOR_STATEMENT = new SqlElementType("ALLOCATE_DESCRIPTOR_STATEMENT");
  IElementType ALL_FIELDS_COLUMN_NAME_LIST = new SqlElementType("ALL_FIELDS_COLUMN_NAME_LIST");
  IElementType ALL_FIELDS_REFERENCE = new SqlElementType("ALL_FIELDS_REFERENCE");
  IElementType ALTER_COLUMN_ACTION = new SqlElementType("ALTER_COLUMN_ACTION");
  IElementType ALTER_COLUMN_DEFINITION = new SqlElementType("ALTER_COLUMN_DEFINITION");
  IElementType ALTER_DOMAIN_ACTION = new SqlElementType("ALTER_DOMAIN_ACTION");
  IElementType ALTER_DOMAIN_STATEMENT = new SqlElementType("ALTER_DOMAIN_STATEMENT");
  IElementType ALTER_GROUP = new SqlElementType("ALTER_GROUP");
  IElementType ALTER_IDENTITY_COLUMN_OPTION = new SqlElementType("ALTER_IDENTITY_COLUMN_OPTION");
  IElementType ALTER_IDENTITY_COLUMN_SPECIFICATION = new SqlElementType("ALTER_IDENTITY_COLUMN_SPECIFICATION");
  IElementType ALTER_ROUTINE_BEHAVIOR = new SqlElementType("ALTER_ROUTINE_BEHAVIOR");
  IElementType ALTER_ROUTINE_CHARACTERISTIC = new SqlElementType("ALTER_ROUTINE_CHARACTERISTIC");
  IElementType ALTER_ROUTINE_CHARACTERISTICS = new SqlElementType("ALTER_ROUTINE_CHARACTERISTICS");
  IElementType ALTER_ROUTINE_STATEMENT = new SqlElementType("ALTER_ROUTINE_STATEMENT");
  IElementType ALTER_SEQUENCE_GENERATOR_OPTION = new SqlElementType("ALTER_SEQUENCE_GENERATOR_OPTION");
  IElementType ALTER_SEQUENCE_GENERATOR_OPTIONS = new SqlElementType("ALTER_SEQUENCE_GENERATOR_OPTIONS");
  IElementType ALTER_SEQUENCE_GENERATOR_RESTART_OPTION = new SqlElementType("ALTER_SEQUENCE_GENERATOR_RESTART_OPTION");
  IElementType ALTER_SEQUENCE_GENERATOR_STATEMENT = new SqlElementType("ALTER_SEQUENCE_GENERATOR_STATEMENT");
  IElementType ALTER_TABLE_ACTION = new SqlElementType("ALTER_TABLE_ACTION");
  IElementType ALTER_TABLE_STATEMENT = new SqlElementType("ALTER_TABLE_STATEMENT");
  IElementType ALTER_TRANSFORM_ACTION = new SqlElementType("ALTER_TRANSFORM_ACTION");
  IElementType ALTER_TRANSFORM_ACTION_LIST = new SqlElementType("ALTER_TRANSFORM_ACTION_LIST");
  IElementType ALTER_TRANSFORM_STATEMENT = new SqlElementType("ALTER_TRANSFORM_STATEMENT");
  IElementType ALTER_TRANSFORMACTIONLIST =  new SqlElementType("ALTER_TRANSFORMACTIONLIST");
  IElementType ALTER_TYPE_ACTION = new SqlElementType("ALTER_TYPE_ACTION");
  IElementType ALTER_TYPE_STATEMENT = new SqlElementType("ALTER_TYPE_STATEMENT");
  IElementType AMPERSAND = new SqlElementType("AMPERSAND");
  IElementType APPROXIMATE_NUMERIC_LITERAL = new SqlElementType("APPROXIMATE_NUMERIC_LITERAL");
  IElementType APPROXIMATE_NUMERIC_TYPE = new SqlElementType("APPROXIMATE_NUMERIC_TYPE");
  IElementType ARRAY_CONCATENATION = new SqlElementType("ARRAY_CONCATENATION");
  IElementType ARRAY_ELEMENT = new SqlElementType("ARRAY_ELEMENT");
  IElementType ARRAY_ELEMENT_LIST = new SqlElementType("ARRAY_ELEMENT_LIST");
  IElementType ARRAY_ELEMENT_REFERENCE = new SqlElementType("ARRAY_ELEMENT_REFERENCE");
  IElementType ARRAY_FACTOR = new SqlElementType("ARRAY_FACTOR");
  IElementType ARRAY_TYPE = new SqlElementType("ARRAY_TYPE");
  IElementType ARRAY_VALUE_CONSTRUCTOR = new SqlElementType("ARRAY_VALUE_CONSTRUCTOR");
  IElementType ARRAY_VALUE_CONSTRUCTOR_BY_ENUMERATION = new SqlElementType("ARRAY_VALUE_CONSTRUCTOR_BY_ENUMERATION");
  IElementType ARRAY_VALUE_CONSTRUCTOR_BY_QUERY = new SqlElementType("ARRAY_VALUE_CONSTRUCTOR_BY_QUERY");
  IElementType ARRAY_VALUE_EXPRESSION = new SqlElementType("ARRAY_VALUE_EXPRESSION");
  IElementType ARRAY_VALUE_EXPRESSION_1 = new SqlElementType("ARRAY_VALUE_EXPRESSION_1");
  IElementType ASSERTION_DEFINITION = new SqlElementType("ASSERTION_DEFINITION");
  IElementType ASSIGNED_ROW = new SqlElementType("ASSIGNED_ROW");
  IElementType ASTERISK = new SqlElementType("ASTERISK");
  IElementType ASTERISKED_IDENTIFIER = new SqlElementType("ASTERISKED_IDENTIFIER");
  IElementType ASTERISKED_IDENTIFIER_CHAIN = new SqlElementType("ASTERISKED_IDENTIFIER_CHAIN");
  IElementType AS_CLAUSE = new SqlElementType("AS_CLAUSE");
  IElementType AS_SUBQUERY_CLAUSE = new SqlElementType("AS_SUBQUERY_CLAUSE");
  IElementType ATTRIBUTES_SPECIFICATION = new SqlElementType("ATTRIBUTES_SPECIFICATION");
  IElementType ATTRIBUTES_VARIABLE = new SqlElementType("ATTRIBUTES_VARIABLE");
  IElementType ATTRIBUTE_DEFAULT = new SqlElementType("ATTRIBUTE_DEFAULT");
  IElementType ATTRIBUTE_DEFINITION = new SqlElementType("ATTRIBUTE_DEFINITION");
  IElementType ATTRIBUTE_NAME = new SqlElementType("ATTRIBUTE_NAME");
  IElementType ATTRIBUTE_OR_METHOD_REFERENCE = new SqlElementType("ATTRIBUTE_OR_METHOD_REFERENCE");
  IElementType AUTHORIZATION_IDENTIFIER = new SqlElementType("AUTHORIZATION_IDENTIFIER");
  IElementType BASIC_IDENTIFIER_CHAIN = new SqlElementType("BASIC_IDENTIFIER_CHAIN");
  IElementType BASIC_SEQUENCE_GENERATOR_OPTION = new SqlElementType("BASIC_SEQUENCE_GENERATOR_OPTION");
  IElementType BETWEEN_PREDICATE = new SqlElementType("BETWEEN_PREDICATE");
  IElementType BETWEEN_PREDICATE_PART_2 = new SqlElementType("BETWEEN_PREDICATE_PART_2");
  IElementType BINARY_LARGE_OBJECT_STRING_TYPE = new SqlElementType("BINARY_LARGE_OBJECT_STRING_TYPE");
  IElementType BINARY_SET_FUNCTION = new SqlElementType("BINARY_SET_FUNCTION");
  IElementType BINARY_SET_FUNCTION_TYPE = new SqlElementType("BINARY_SET_FUNCTION_TYPE");
  IElementType BINARY_STRING_LITERAL = new SqlElementType("BINARY_STRING_LITERAL");
  IElementType BLOB_CONCATENATION = new SqlElementType("BLOB_CONCATENATION");
  IElementType BLOB_FACTOR = new SqlElementType("BLOB_FACTOR");
  IElementType BLOB_OVERLAY_FUNCTION = new SqlElementType("BLOB_OVERLAY_FUNCTION");
  IElementType BLOB_POSITION_EXPRESSION = new SqlElementType("BLOB_POSITION_EXPRESSION");
  IElementType BLOB_PRIMARY = new SqlElementType("BLOB_PRIMARY");
  IElementType BLOB_SUBSTRING_FUNCTION = new SqlElementType("BLOB_SUBSTRING_FUNCTION");
  IElementType BLOB_TRIM_FUNCTION = new SqlElementType("BLOB_TRIM_FUNCTION");
  IElementType BLOB_TRIM_OPERANDS = new SqlElementType("BLOB_TRIM_OPERANDS");
  IElementType BLOB_TRIM_SOURCE = new SqlElementType("BLOB_TRIM_SOURCE");
  IElementType BLOB_VALUE_EXPRESSION = new SqlElementType("BLOB_VALUE_EXPRESSION");
  IElementType BLOB_VALUE_FUNCTION = new SqlElementType("BLOB_VALUE_FUNCTION");
  IElementType BOOLEAN_FACTOR = new SqlElementType("BOOLEAN_FACTOR");
  IElementType BOOLEAN_LITERAL = new SqlElementType("BOOLEAN_LITERAL");
  IElementType BOOLEAN_PREDICAND = new SqlElementType("BOOLEAN_PREDICAND");
  IElementType BOOLEAN_PRIMARY = new SqlElementType("BOOLEAN_PRIMARY");
  IElementType BOOLEAN_TERM = new SqlElementType("BOOLEAN_TERM");
  IElementType BOOLEAN_TEST = new SqlElementType("BOOLEAN_TEST");
  IElementType BOOLEAN_TYPE = new SqlElementType("BOOLEAN_TYPE");
  IElementType BOOLEAN_VALUE_EXPRESSION = new SqlElementType("BOOLEAN_VALUE_EXPRESSION");
  IElementType BRACKETED_COMMENT = new SqlElementType("BRACKETED_COMMENT");
  IElementType BRACKETED_COMMENT_CONTENTS = new SqlElementType("BRACKETED_COMMENT_CONTENTS");
  IElementType BRACKETED_COMMENT_INTRODUCER = new SqlElementType("BRACKETED_COMMENT_INTRODUCER");
  IElementType BRACKETED_COMMENT_TERMINATOR = new SqlElementType("BRACKETED_COMMENT_TERMINATOR");
  IElementType CALL_STATEMENT = new SqlElementType("CALL_STATEMENT");
  IElementType CARDINALITY_EXPRESSION = new SqlElementType("CARDINALITY_EXPRESSION");
  IElementType CASE_ABBREVIATION = new SqlElementType("CASE_ABBREVIATION");
  IElementType CASE_EXPRESSION = new SqlElementType("CASE_EXPRESSION");
  IElementType CASE_OPERAND = new SqlElementType("CASE_OPERAND");
  IElementType CASE_SPECIFICATION = new SqlElementType("CASE_SPECIFICATION");
  IElementType CAST_FUNCTION = new SqlElementType("CAST_FUNCTION");
  IElementType CAST_OPERAND = new SqlElementType("CAST_OPERAND");
  IElementType CAST_OPTION = new SqlElementType("CAST_OPTION");
  IElementType CAST_SPECIFICATION = new SqlElementType("CAST_SPECIFICATION");
  IElementType CAST_TARGET = new SqlElementType("CAST_TARGET");
  IElementType CAST_TO_DISTINCT = new SqlElementType("CAST_TO_DISTINCT");
  IElementType CAST_TO_DISTINCT_IDENTIFIER = new SqlElementType("CAST_TO_DISTINCT_IDENTIFIER");
  IElementType CAST_TO_REF = new SqlElementType("CAST_TO_REF");
  IElementType CAST_TO_REF_IDENTIFIER = new SqlElementType("CAST_TO_REF_IDENTIFIER");
  IElementType CAST_TO_SOURCE = new SqlElementType("CAST_TO_SOURCE");
  IElementType CAST_TO_SOURCE_IDENTIFIER = new SqlElementType("CAST_TO_SOURCE_IDENTIFIER");
  IElementType CAST_TO_TYPE = new SqlElementType("CAST_TO_TYPE");
  IElementType CAST_TO_TYPE_IDENTIFIER = new SqlElementType("CAST_TO_TYPE_IDENTIFIER");
  IElementType CATALOG_NAME = new SqlElementType("CATALOG_NAME");
  IElementType CATALOG_NAME_CHARACTERISTIC = new SqlElementType("CATALOG_NAME_CHARACTERISTIC");
  IElementType CEILING_FUNCTION = new SqlElementType("CEILING_FUNCTION");
  IElementType CHARACTER_ENUMERATION = new SqlElementType("CHARACTER_ENUMERATION");
  IElementType CHARACTER_ENUMERATION_EXCLUDE = new SqlElementType("CHARACTER_ENUMERATION_EXCLUDE");
  IElementType CHARACTER_ENUMERATION_INCLUDE = new SqlElementType("CHARACTER_ENUMERATION_INCLUDE");
  IElementType CHARACTER_FACTOR = new SqlElementType("CHARACTER_FACTOR");
  IElementType CHARACTER_LIKE_PREDICATE = new SqlElementType("CHARACTER_LIKE_PREDICATE");
  IElementType CHARACTER_LIKE_PREDICATE_PART_2 = new SqlElementType("CHARACTER_LIKE_PREDICATE_PART_2");
  IElementType CHARACTER_OVERLAY_FUNCTION = new SqlElementType("CHARACTER_OVERLAY_FUNCTION");
  IElementType CHARACTER_PATTERN = new SqlElementType("CHARACTER_PATTERN");
  IElementType CHARACTER_PRIMARY = new SqlElementType("CHARACTER_PRIMARY");
  IElementType CHARACTER_REPRESENTATION = new SqlElementType("CHARACTER_REPRESENTATION");
  IElementType CHARACTER_SET_DEFINITION = new SqlElementType("CHARACTER_SET_DEFINITION");
  IElementType CHARACTER_SET_NAME = new SqlElementType("CHARACTER_SET_NAME");
  IElementType CHARACTER_SET_NAME_CHARACTERISTIC = new SqlElementType("CHARACTER_SET_NAME_CHARACTERISTIC");
  IElementType CHARACTER_SET_SOURCE = new SqlElementType("CHARACTER_SET_SOURCE");
  IElementType CHARACTER_SET_SPECIFICATION = new SqlElementType("CHARACTER_SET_SPECIFICATION");
  IElementType CHARACTER_SET_SPECIFICATION_LIST = new SqlElementType("CHARACTER_SET_SPECIFICATION_LIST");
  IElementType CHARACTER_SPECIFIER = new SqlElementType("CHARACTER_SPECIFIER");
  IElementType CHARACTER_STRING_LITERAL = new SqlElementType("CHARACTER_STRING_LITERAL");
  IElementType CHARACTER_STRING_TYPE = new SqlElementType("CHARACTER_STRING_TYPE");
  IElementType CHARACTER_SUBSTRING_FUNCTION = new SqlElementType("CHARACTER_SUBSTRING_FUNCTION");
  IElementType CHARACTER_TRANSLITERATION = new SqlElementType("CHARACTER_TRANSLITERATION");
  IElementType CHARACTER_VALUE_EXPRESSION = new SqlElementType("CHARACTER_VALUE_EXPRESSION");
  IElementType CHARACTER_VALUE_FUNCTION = new SqlElementType("CHARACTER_VALUE_FUNCTION");
  IElementType CHAR_LENGTH_EXPRESSION = new SqlElementType("CHAR_LENGTH_EXPRESSION");
  IElementType CHAR_LENGTH_UNITS = new SqlElementType("CHAR_LENGTH_UNITS");
  IElementType CHECK_CONSTRAINT_DEFINITION = new SqlElementType("CHECK_CONSTRAINT_DEFINITION");
  IElementType CIRCUMFLEX = new SqlElementType("CIRCUMFLEX");
  IElementType CLOSE_STATEMENT = new SqlElementType("CLOSE_STATEMENT");
  IElementType COLLATE_CLAUSE = new SqlElementType("COLLATE_CLAUSE");
  IElementType COLLATION_DEFINITION = new SqlElementType("COLLATION_DEFINITION");
  IElementType COLLATION_NAME = new SqlElementType("COLLATION_NAME");
  IElementType COLLATION_SPECIFICATION = new SqlElementType("COLLATION_SPECIFICATION");
  IElementType COLLECTION_DERIVED_TABLE = new SqlElementType("COLLECTION_DERIVED_TABLE");
  IElementType COLLECTION_TYPE = new SqlElementType("COLLECTION_TYPE");
  IElementType COLLECTION_VALUE_CONSTRUCTOR = new SqlElementType("COLLECTION_VALUE_CONSTRUCTOR");
  IElementType COLLECTION_VALUE_EXPRESSION = new SqlElementType("COLLECTION_VALUE_EXPRESSION");
  IElementType COLON = new SqlElementType("COLON");
  IElementType COLUMN_CONSTRAINT = new SqlElementType("COLUMN_CONSTRAINT");
  IElementType COLUMN_CONSTRAINT_DEFINITION = new SqlElementType("COLUMN_CONSTRAINT_DEFINITION");
  IElementType COLUMN_DEFAULT_OPTION = new SqlElementType("COLUMN_DEFAULT_OPTION");
  IElementType COLUMN_DEFINITION = new SqlElementType("COLUMN_DEFINITION");
  IElementType COLUMN_NAME = new SqlElementType("COLUMN_NAME");
  IElementType COLUMN_NAME_LIST = new SqlElementType("COLUMN_NAME_LIST");
  IElementType COLUMN_OPTIONS = new SqlElementType("COLUMN_OPTIONS");
  IElementType COLUMN_OPTION_LIST = new SqlElementType("COLUMN_OPTION_LIST");
  IElementType COLUMN_REFERENCE = new SqlElementType("COLUMN_REFERENCE");
  IElementType COMMA = new SqlElementType("COMMA");
  IElementType COMMENT = new SqlElementType("COMMENT");
  IElementType COMMENT_CHARACTER = new SqlElementType("COMMENT_CHARACTER");
  IElementType COMMIT_STATEMENT = new SqlElementType("COMMIT_STATEMENT");
  IElementType COMMON_SEQUENCE_GENERATOR_OPTION = new SqlElementType("COMMON_SEQUENCE_GENERATOR_OPTION");
  IElementType COMMON_SEQUENCE_GENERATOR_OPTIONS = new SqlElementType("COMMON_SEQUENCE_GENERATOR_OPTIONS");
  IElementType COMMON_VALUE_EXPRESSION = new SqlElementType("COMMON_VALUE_EXPRESSION");
  IElementType COMPARISON_PREDICATE = new SqlElementType("COMPARISON_PREDICATE");
  IElementType COMPARISON_PREDICATE_PART_2 = new SqlElementType("COMPARISON_PREDICATE_PART_2");
  IElementType COMPUTATIONAL_OPERATION = new SqlElementType("COMPUTATIONAL_OPERATION");
  IElementType COMP_OP = new SqlElementType("COMP_OP");
  IElementType CONCATENATION = new SqlElementType("CONCATENATION");
  IElementType CONCATENATION_OPERATOR = new SqlElementType("CONCATENATION_OPERATOR");
  IElementType CONDITION = new SqlElementType("CONDITION");
  IElementType CONDITION_ACTION = new SqlElementType("CONDITION_ACTION");
  IElementType CONDITION_INFORMATION = new SqlElementType("CONDITION_INFORMATION");
  IElementType CONDITION_INFORMATION_ITEM = new SqlElementType("CONDITION_INFORMATION_ITEM");
  IElementType CONDITION_INFORMATION_ITEM_NAME = new SqlElementType("CONDITION_INFORMATION_ITEM_NAME");
  IElementType CONDITION_NUMBER = new SqlElementType("CONDITION_NUMBER");
  IElementType CONNECTION_NAME = new SqlElementType("CONNECTION_NAME");
  IElementType CONNECTION_OBJECT = new SqlElementType("CONNECTION_OBJECT");
  IElementType CONNECTION_TARGET = new SqlElementType("CONNECTION_TARGET");
  IElementType CONNECTION_USER_NAME = new SqlElementType("CONNECTION_USER_NAME");
  IElementType CONNECT_STATEMENT = new SqlElementType("CONNECT_STATEMENT");
  IElementType CONSTRAINT_CHARACTERISTICS = new SqlElementType("CONSTRAINT_CHARACTERISTICS");
  IElementType CONSTRAINT_CHECK_TIME = new SqlElementType("CONSTRAINT_CHECK_TIME");
  IElementType CONSTRAINT_NAME = new SqlElementType("CONSTRAINT_NAME");
  IElementType CONSTRAINT_NAME_DEFINITION = new SqlElementType("CONSTRAINT_NAME_DEFINITION");
  IElementType CONSTRAINT_NAME_LIST = new SqlElementType("CONSTRAINT_NAME_LIST");
  IElementType CONSTRUCTOR_METHOD_SELECTION = new SqlElementType("CONSTRUCTOR_METHOD_SELECTION");
  IElementType CONTEXTUALLY_TYPED_ROW_VALUE_CONSTRUCTOR = new SqlElementType("CONTEXTUALLY_TYPED_ROW_VALUE_CONSTRUCTOR");
  IElementType CONTEXTUALLY_TYPED_ROW_VALUE_CONSTRUCTOR_ELEMENT = new SqlElementType("CONTEXTUALLY_TYPED_ROW_VALUE_CONSTRUCTOR_ELEMENT");
  IElementType CONTEXTUALLY_TYPED_ROW_VALUE_CONSTRUCTOR_ELEMENT_LIST = new SqlElementType("CONTEXTUALLY_TYPED_ROW_VALUE_CONSTRUCTOR_ELEMENT_LIST");
  IElementType CONTEXTUALLY_TYPED_ROW_VALUE_EXPRESSION = new SqlElementType("CONTEXTUALLY_TYPED_ROW_VALUE_EXPRESSION");
  IElementType CONTEXTUALLY_TYPED_ROW_VALUE_EXPRESSION_LIST = new SqlElementType("CONTEXTUALLY_TYPED_ROW_VALUE_EXPRESSION_LIST");
  IElementType CONTEXTUALLY_TYPED_TABLE_VALUE_CONSTRUCTOR = new SqlElementType("CONTEXTUALLY_TYPED_TABLE_VALUE_CONSTRUCTOR");
  IElementType CONTEXTUALLY_TYPED_VALUE_SPECIFICATION = new SqlElementType("CONTEXTUALLY_TYPED_VALUE_SPECIFICATION");
  IElementType CORRELATION_NAME = new SqlElementType("CORRELATION_NAME");
  IElementType CORRESPONDING_COLUMN_LIST = new SqlElementType("CORRESPONDING_COLUMN_LIST");
  IElementType CORRESPONDING_SPEC = new SqlElementType("CORRESPONDING_SPEC");
  IElementType CROSS_JOIN = new SqlElementType("CROSS_JOIN");
  IElementType CUBE_LIST = new SqlElementType("CUBE_LIST");
  IElementType CURRENT_COLLATION_SPECIFICATION = new SqlElementType("CURRENT_COLLATION_SPECIFICATION");
  IElementType CURRENT_DATE_VALUE_FUNCTION = new SqlElementType("CURRENT_DATE_VALUE_FUNCTION");
  IElementType CURRENT_LOCAL_TIMESTAMP_VALUE_FUNCTION = new SqlElementType("CURRENT_LOCAL_TIMESTAMP_VALUE_FUNCTION");
  IElementType CURRENT_LOCAL_TIME_VALUE_FUNCTION = new SqlElementType("CURRENT_LOCAL_TIME_VALUE_FUNCTION");
  IElementType CURRENT_TIMESTAMP_VALUE_FUNCTION = new SqlElementType("CURRENT_TIMESTAMP_VALUE_FUNCTION");
  IElementType CURRENT_TIME_VALUE_FUNCTION = new SqlElementType("CURRENT_TIME_VALUE_FUNCTION");
  IElementType CURSOR_ATTRIBUTE = new SqlElementType("CURSOR_ATTRIBUTE");
  IElementType CURSOR_ATTRIBUTES = new SqlElementType("CURSOR_ATTRIBUTES");
  IElementType CURSOR_HOLDABILITY = new SqlElementType("CURSOR_HOLDABILITY");
  IElementType CURSOR_INTENT = new SqlElementType("CURSOR_INTENT");
  IElementType CURSOR_NAME = new SqlElementType("CURSOR_NAME");
  IElementType CURSOR_RETURNABILITY = new SqlElementType("CURSOR_RETURNABILITY");
  IElementType CURSOR_SCROLLABILITY = new SqlElementType("CURSOR_SCROLLABILITY");
  IElementType CURSOR_SENSITIVITY = new SqlElementType("CURSOR_SENSITIVITY");
  IElementType CURSOR_SPECIFICATION = new SqlElementType("CURSOR_SPECIFICATION");
  IElementType CYCLE_CLAUSE = new SqlElementType("CYCLE_CLAUSE");
  IElementType CYCLE_COLUMN = new SqlElementType("CYCLE_COLUMN");
  IElementType CYCLE_COLUMN_LIST = new SqlElementType("CYCLE_COLUMN_LIST");
  IElementType CYCLE_MARK_COLUMN = new SqlElementType("CYCLE_MARK_COLUMN");
  IElementType CYCLE_MARK_VALUE = new SqlElementType("CYCLE_MARK_VALUE");
  IElementType C_ARRAY_LOCATOR_VARIABLE = new SqlElementType("C_ARRAY_LOCATOR_VARIABLE");
  IElementType C_ARRAY_SPECIFICATION = new SqlElementType("C_ARRAY_SPECIFICATION");
  IElementType C_BLOB_LOCATOR_VARIABLE = new SqlElementType("C_BLOB_LOCATOR_VARIABLE");
  IElementType C_BLOB_VARIABLE = new SqlElementType("C_BLOB_VARIABLE");
  IElementType C_CHARACTER_TYPE = new SqlElementType("C_CHARACTER_TYPE");
  IElementType C_CHARACTER_VARIABLE = new SqlElementType("C_CHARACTER_VARIABLE");
  IElementType C_CLASS_MODIFIER = new SqlElementType("C_CLASS_MODIFIER");
  IElementType C_CLOB_LOCATOR_VARIABLE = new SqlElementType("C_CLOB_LOCATOR_VARIABLE");
  IElementType C_CLOB_VARIABLE = new SqlElementType("C_CLOB_VARIABLE");
  IElementType C_DERIVED_VARIABLE = new SqlElementType("C_DERIVED_VARIABLE");
  IElementType C_HOST_IDENTIFIER = new SqlElementType("C_HOST_IDENTIFIER");
  IElementType C_INITIAL_VALUE = new SqlElementType("C_INITIAL_VALUE");
  IElementType C_MULTISET_LOCATOR_VARIABLE = new SqlElementType("C_MULTISET_LOCATOR_VARIABLE");
  IElementType C_NCHAR_VARIABLE = new SqlElementType("C_NCHAR_VARIABLE");
  IElementType C_NCHAR_VARYING_VARIABLE = new SqlElementType("C_NCHAR_VARYING_VARIABLE");
  IElementType C_NCLOB_VARIABLE = new SqlElementType("C_NCLOB_VARIABLE");
  IElementType C_NUMERIC_VARIABLE = new SqlElementType("C_NUMERIC_VARIABLE");
  IElementType C_REF_VARIABLE = new SqlElementType("C_REF_VARIABLE");
  IElementType C_STORAGE_CLASS = new SqlElementType("C_STORAGE_CLASS");
  IElementType C_USER_DEFINED_TYPE_LOCATOR_VARIABLE = new SqlElementType("C_USER_DEFINED_TYPE_LOCATOR_VARIABLE");
  IElementType C_USER_DEFINED_TYPE_VARIABLE = new SqlElementType("C_USER_DEFINED_TYPE_VARIABLE");
  IElementType C_VARCHAR_VARIABLE = new SqlElementType("C_VARCHAR_VARIABLE");
  IElementType C_VARIABLE_DEFINITION = new SqlElementType("C_VARIABLE_DEFINITION");
  IElementType C_VARIABLE_SPECIFICATION = new SqlElementType("C_VARIABLE_SPECIFICATION");
  IElementType DATA_TYPE = new SqlElementType("DATA_TYPE");
  IElementType DATA_TYPE_LIST = new SqlElementType("DATA_TYPE_LIST");
  IElementType DATETIME_FACTOR = new SqlElementType("DATETIME_FACTOR");
  IElementType DATETIME_LITERAL = new SqlElementType("DATETIME_LITERAL");
  IElementType DATETIME_PRIMARY = new SqlElementType("DATETIME_PRIMARY");
  IElementType DATETIME_TERM = new SqlElementType("DATETIME_TERM");
  IElementType DATETIME_TYPE = new SqlElementType("DATETIME_TYPE");
  IElementType DATETIME_VALUE = new SqlElementType("DATETIME_VALUE");
  IElementType DATETIME_VALUE_EXPRESSION = new SqlElementType("DATETIME_VALUE_EXPRESSION");
  IElementType DATETIME_VALUE_FUNCTION = new SqlElementType("DATETIME_VALUE_FUNCTION");
  IElementType DATE_LITERAL = new SqlElementType("DATE_LITERAL");
  IElementType DATE_STRING = new SqlElementType("DATE_STRING");
  IElementType DATE_VALUE = new SqlElementType("DATE_VALUE");
  IElementType DAYS_VALUE = new SqlElementType("DAYS_VALUE");
  IElementType DAY_TIME_INTERVAL = new SqlElementType("DAY_TIME_INTERVAL");
  IElementType DAY_TIME_LITERAL = new SqlElementType("DAY_TIME_LITERAL");
  IElementType DEALLOCATE_DESCRIPTOR_STATEMENT = new SqlElementType("DEALLOCATE_DESCRIPTOR_STATEMENT");
  IElementType DEALLOCATE_PREPARED_STATEMENT = new SqlElementType("DEALLOCATE_PREPARED_STATEMENT");
  IElementType DECLARE_CURSOR = new SqlElementType("DECLARE_CURSOR");
  IElementType DEFAULT_CLAUSE = new SqlElementType("DEFAULT_CLAUSE");
  IElementType DEFAULT_OPTION = new SqlElementType("DEFAULT_OPTION");
  IElementType DEFAULT_SPECIFICATION = new SqlElementType("DEFAULT_SPECIFICATION");
  IElementType DELETE_RULE = new SqlElementType("DELETE_RULE");
  IElementType DELETE_STATEMENT_POSITIONED = new SqlElementType("DELETE_STATEMENT_POSITIONED");
  IElementType DELETE_STATEMENT_SEARCHED = new SqlElementType("DELETE_STATEMENT_SEARCHED");
  IElementType DELIMITED_IDENTIFIER = new SqlElementType("DELIMITED_IDENTIFIER");
  IElementType DELIMITED_IDENTIFIER_BODY = new SqlElementType("DELIMITED_IDENTIFIER_BODY");
  IElementType DELIMITED_IDENTIFIER_PART = new SqlElementType("DELIMITED_IDENTIFIER_PART");
  IElementType DEPENDENT_VARIABLE_EXPRESSION = new SqlElementType("DEPENDENT_VARIABLE_EXPRESSION");
  IElementType DEREFERENCE_OPERATION = new SqlElementType("DEREFERENCE_OPERATION");
  IElementType DEREFERENCE_OPERATOR = new SqlElementType("DEREFERENCE_OPERATOR");
  IElementType DERIVED_COLUMN = new SqlElementType("DERIVED_COLUMN");
  IElementType DERIVED_COLUMN_LIST = new SqlElementType("DERIVED_COLUMN_LIST");
  IElementType DERIVED_REPRESENTATION = new SqlElementType("DERIVED_REPRESENTATION");
  IElementType DERIVED_TABLE = new SqlElementType("DERIVED_TABLE");
  IElementType DESCRIBED_OBJECT = new SqlElementType("DESCRIBED_OBJECT");
  IElementType DESCRIBE_INPUT_STATEMENT = new SqlElementType("DESCRIBE_INPUT_STATEMENT");
  IElementType DESCRIBE_OUTPUT_STATEMENT = new SqlElementType("DESCRIBE_OUTPUT_STATEMENT");
  IElementType DESCRIBE_STATEMENT = new SqlElementType("DESCRIBE_STATEMENT");
  IElementType DESCRIPTOR_ITEM_NAME = new SqlElementType("DESCRIPTOR_ITEM_NAME");
  IElementType DESCRIPTOR_NAME = new SqlElementType("DESCRIPTOR_NAME");
  IElementType DETERMINISTIC_CHARACTERISTIC = new SqlElementType("DETERMINISTIC_CHARACTERISTIC");
  IElementType DIAGNOSTICS_SIZE = new SqlElementType("DIAGNOSTICS_SIZE");
  IElementType DIGIT = new SqlElementType("DIGIT");
  IElementType DIRECTLY_EXECUTABLE_STATEMENT = new SqlElementType("DIRECTLY_EXECUTABLE_STATEMENT");
  IElementType DIRECT_IMPLEMENTATION_DEFINED_STATEMENT = new SqlElementType("DIRECT_IMPLEMENTATION_DEFINED_STATEMENT");
  IElementType DIRECT_INVOCATION = new SqlElementType("DIRECT_INVOCATION");
  IElementType DIRECT_SELECT_STATEMENT_MULTIPLE_ROWS = new SqlElementType("DIRECT_SELECT_STATEMENT_MULTIPLE_ROWS");
  IElementType DIRECT_SQL_DATA_STATEMENT = new SqlElementType("DIRECT_SQL_DATA_STATEMENT");
  IElementType DIRECT_SQL_STATEMENT = new SqlElementType("DIRECT_SQL_STATEMENT");
  IElementType DISCONNECT_OBJECT = new SqlElementType("DISCONNECT_OBJECT");
  IElementType DISCONNECT_STATEMENT = new SqlElementType("DISCONNECT_STATEMENT");
  IElementType DISPATCH_CLAUSE = new SqlElementType("DISPATCH_CLAUSE");
  IElementType DISTINCT_PREDICATE = new SqlElementType("DISTINCT_PREDICATE");
  IElementType DISTINCT_PREDICATE_PART_2 = new SqlElementType("DISTINCT_PREDICATE_PART_2");
  IElementType DOMAIN_CONSTRAINT = new SqlElementType("DOMAIN_CONSTRAINT");
  IElementType DOMAIN_DEFINITION = new SqlElementType("DOMAIN_DEFINITION");
  IElementType DOMAIN_NAME = new SqlElementType("DOMAIN_NAME");
  IElementType DOUBLEQUOTE_SYMBOL = new SqlElementType("DOUBLEQUOTE_SYMBOL");
  IElementType DOUBLE_COLON = new SqlElementType("DOUBLE_COLON");
  IElementType DOUBLE_PERIOD = new SqlElementType("DOUBLE_PERIOD");
  IElementType DOUBLE_QUOTE = new SqlElementType("DOUBLE_QUOTE");
  IElementType DROP_ASSERTION_STATEMENT = new SqlElementType("DROP_ASSERTION_STATEMENT");
  IElementType DROP_ATTRIBUTE_DEFINITION = new SqlElementType("DROP_ATTRIBUTE_DEFINITION");
  IElementType DROP_BEHAVIOR = new SqlElementType("DROP_BEHAVIOR");
  IElementType DROP_CHARACTER_SET_STATEMENT = new SqlElementType("DROP_CHARACTER_SET_STATEMENT");
  IElementType DROP_COLLATION_STATEMENT = new SqlElementType("DROP_COLLATION_STATEMENT");
  IElementType DROP_COLUMN_DEFAULT_CLAUSE = new SqlElementType("DROP_COLUMN_DEFAULT_CLAUSE");
  IElementType DROP_COLUMN_DEFINITION = new SqlElementType("DROP_COLUMN_DEFINITION");
  IElementType DROP_COLUMN_SCOPE_CLAUSE = new SqlElementType("DROP_COLUMN_SCOPE_CLAUSE");
  IElementType DROP_DATA_TYPE_STATEMENT = new SqlElementType("DROP_DATA_TYPE_STATEMENT");
  IElementType DROP_DOMAIN_CONSTRAINT_DEFINITION = new SqlElementType("DROP_DOMAIN_CONSTRAINT_DEFINITION");
  IElementType DROP_DOMAIN_DEFAULT_CLAUSE = new SqlElementType("DROP_DOMAIN_DEFAULT_CLAUSE");
  IElementType DROP_DOMAIN_STATEMENT = new SqlElementType("DROP_DOMAIN_STATEMENT");
  IElementType DROP_METHOD_SPECIFICATION = new SqlElementType("DROP_METHOD_SPECIFICATION");
  IElementType DROP_ROLE_STATEMENT = new SqlElementType("DROP_ROLE_STATEMENT");
  IElementType DROP_ROUTINE_STATEMENT = new SqlElementType("DROP_ROUTINE_STATEMENT");
  IElementType DROP_SCHEMA_STATEMENT = new SqlElementType("DROP_SCHEMA_STATEMENT");
  IElementType DROP_SEQUENCE_GENERATOR_STATEMENT = new SqlElementType("DROP_SEQUENCE_GENERATOR_STATEMENT");
  IElementType DROP_TABLE_CONSTRAINT_DEFINITION = new SqlElementType("DROP_TABLE_CONSTRAINT_DEFINITION");
  IElementType DROP_TABLE_STATEMENT = new SqlElementType("DROP_TABLE_STATEMENT");
  IElementType DROP_TRANSFORM_ELEMENT_LIST = new SqlElementType("DROP_TRANSFORM_ELEMENT_LIST");
  IElementType DROP_TRANSFORM_STATEMENT = new SqlElementType("DROP_TRANSFORM_STATEMENT");
  IElementType DROP_TRANSLITERATION_STATEMENT = new SqlElementType("DROP_TRANSLITERATION_STATEMENT");
  IElementType DROP_TRIGGER_STATEMENT = new SqlElementType("DROP_TRIGGER_STATEMENT");
  IElementType DROP_USER_DEFINED_CAST_STATEMENT = new SqlElementType("DROP_USER_DEFINED_CAST_STATEMENT");
  IElementType DROP_USER_DEFINED_ORDERING_STATEMENT = new SqlElementType("DROP_USER_DEFINED_ORDERING_STATEMENT");
  IElementType DROP_VIEW_STATEMENT = new SqlElementType("DROP_VIEW_STATEMENT");
  IElementType DYNAMIC_CLOSE_STATEMENT = new SqlElementType("DYNAMIC_CLOSE_STATEMENT");
  IElementType DYNAMIC_CURSOR_NAME = new SqlElementType("DYNAMIC_CURSOR_NAME");
  IElementType DYNAMIC_DECLARE_CURSOR = new SqlElementType("DYNAMIC_DECLARE_CURSOR");
  IElementType DYNAMIC_DELETE_STATEMENT_POSITIONED = new SqlElementType("DYNAMIC_DELETE_STATEMENT_POSITIONED");
  IElementType DYNAMIC_FETCH_STATEMENT = new SqlElementType("DYNAMIC_FETCH_STATEMENT");
  IElementType DYNAMIC_OPEN_STATEMENT = new SqlElementType("DYNAMIC_OPEN_STATEMENT");
  IElementType DYNAMIC_PARAMETER_SPECIFICATION = new SqlElementType("DYNAMIC_PARAMETER_SPECIFICATION");
  IElementType DYNAMIC_RESULT_SETS_CHARACTERISTIC = new SqlElementType("DYNAMIC_RESULT_SETS_CHARACTERISTIC");
  IElementType DYNAMIC_SELECT_STATEMENT = new SqlElementType("DYNAMIC_SELECT_STATEMENT");
  IElementType DYNAMIC_SINGLE_ROW_SELECT_STATEMENT = new SqlElementType("DYNAMIC_SINGLE_ROW_SELECT_STATEMENT");
  IElementType DYNAMIC_UPDATE_STATEMENT_POSITIONED = new SqlElementType("DYNAMIC_UPDATE_STATEMENT_POSITIONED");
  IElementType ELSE_CLAUSE = new SqlElementType("ELSE_CLAUSE");
  IElementType EMBEDDED_AUTHORIZATION_CLAUSE = new SqlElementType("EMBEDDED_AUTHORIZATION_CLAUSE");
  IElementType EMBEDDED_AUTHORIZATION_DECLARATION = new SqlElementType("EMBEDDED_AUTHORIZATION_DECLARATION");
  IElementType EMBEDDED_AUTHORIZATION_IDENTIFIER = new SqlElementType("EMBEDDED_AUTHORIZATION_IDENTIFIER");
  IElementType EMBEDDED_CHARACTER_SET_DECLARATION = new SqlElementType("EMBEDDED_CHARACTER_SET_DECLARATION");
  IElementType EMBEDDED_COLLATION_SPECIFICATION = new SqlElementType("EMBEDDED_COLLATION_SPECIFICATION");
  IElementType EMBEDDED_EXCEPTION_DECLARATION = new SqlElementType("EMBEDDED_EXCEPTION_DECLARATION");
  IElementType EMBEDDED_PATH_SPECIFICATION = new SqlElementType("EMBEDDED_PATH_SPECIFICATION");
  IElementType EMBEDDED_SQL_BEGIN_DECLARE = new SqlElementType("EMBEDDED_SQL_BEGIN_DECLARE");
  IElementType EMBEDDED_SQL_C_PROGRAM = new SqlElementType("EMBEDDED_SQL_C_PROGRAM");
  IElementType EMBEDDED_SQL_DECLARE_SECTION = new SqlElementType("EMBEDDED_SQL_DECLARE_SECTION");
  IElementType EMBEDDED_SQL_END_DECLARE = new SqlElementType("EMBEDDED_SQL_END_DECLARE");
  IElementType EMBEDDED_SQL_HOST_PROGRAM = new SqlElementType("EMBEDDED_SQL_HOST_PROGRAM");
  IElementType EMBEDDED_SQL_STATEMENT = new SqlElementType("EMBEDDED_SQL_STATEMENT");
  IElementType EMBEDDED_TRANSFORM_GROUP_SPECIFICATION = new SqlElementType("EMBEDDED_TRANSFORM_GROUP_SPECIFICATION");
  IElementType EMBEDDED_VARIABLE_NAME = new SqlElementType("EMBEDDED_VARIABLE_NAME");
  IElementType EMBEDDED_VARIABLE_SPECIFICATION = new SqlElementType("EMBEDDED_VARIABLE_SPECIFICATION");
  IElementType EMPTY_GROUPING_SET = new SqlElementType("EMPTY_GROUPING_SET");
  IElementType EMPTY_SPECIFICATION = new SqlElementType("EMPTY_SPECIFICATION");
  IElementType END_FIELD = new SqlElementType("END_FIELD");
  IElementType EQUALS_OPERATOR = new SqlElementType("EQUALS_OPERATOR");
  IElementType EQUALS_ORDERING_FORM = new SqlElementType("EQUALS_ORDERING_FORM");
  IElementType ESCAPED_CHARACTER = new SqlElementType("ESCAPED_CHARACTER");
  IElementType ESCAPE_CHARACTER = new SqlElementType("ESCAPE_CHARACTER");
  IElementType ESCAPE_OCTET = new SqlElementType("ESCAPE_OCTET");
  IElementType EXACT_NUMERIC_LITERAL = new SqlElementType("EXACT_NUMERIC_LITERAL");
  IElementType EXACT_NUMERIC_TYPE = new SqlElementType("EXACT_NUMERIC_TYPE");
  IElementType EXCLUSIVE_USER_DEFINED_TYPE_SPECIFICATION = new SqlElementType("EXCLUSIVE_USER_DEFINED_TYPE_SPECIFICATION");
  IElementType EXECUTE_IMMEDIATE_STATEMENT = new SqlElementType("EXECUTE_IMMEDIATE_STATEMENT");
  IElementType EXECUTE_STATEMENT = new SqlElementType("EXECUTE_STATEMENT");
  IElementType EXISTING_COLLATION_NAME = new SqlElementType("EXISTING_COLLATION_NAME");
  IElementType EXISTING_TRANSLITERATION_NAME = new SqlElementType("EXISTING_TRANSLITERATION_NAME");
  IElementType EXISTING_WINDOW_NAME = new SqlElementType("EXISTING_WINDOW_NAME");
  IElementType EXISTS_PREDICATE = new SqlElementType("EXISTS_PREDICATE");
  IElementType EXPLICIT_ROW_VALUE_CONSTRUCTOR = new SqlElementType("EXPLICIT_ROW_VALUE_CONSTRUCTOR");
  IElementType EXPLICIT_TABLE = new SqlElementType("EXPLICIT_TABLE");
  IElementType EXPONENT = new SqlElementType("EXPONENT");
  IElementType EXPONENTIAL_FUNCTION = new SqlElementType("EXPONENTIAL_FUNCTION");
  IElementType EXTENDED_CURSOR_NAME = new SqlElementType("EXTENDED_CURSOR_NAME");
  IElementType EXTENDED_STATEMENT_NAME = new SqlElementType("EXTENDED_STATEMENT_NAME");
  IElementType EXTERNALLY_INVOKED_PROCEDURE = new SqlElementType("EXTERNALLY_INVOKED_PROCEDURE");
  IElementType EXTERNAL_BODY_REFERENCE = new SqlElementType("EXTERNAL_BODY_REFERENCE");
  IElementType EXTERNAL_ROUTINE_NAME = new SqlElementType("EXTERNAL_ROUTINE_NAME");
  IElementType EXTERNAL_SECURITY_CLAUSE = new SqlElementType("EXTERNAL_SECURITY_CLAUSE");
  IElementType EXTRACT_EXPRESSION = new SqlElementType("EXTRACT_EXPRESSION");
  IElementType EXTRACT_FIELD = new SqlElementType("EXTRACT_FIELD");
  IElementType EXTRACT_SOURCE = new SqlElementType("EXTRACT_SOURCE");
  IElementType TRIGGERACTIONTIME = new SqlElementType("TRIGGERACTIONTIME");
  IElementType FACTOR = new SqlElementType("FACTOR");
  IElementType FETCH_ORIENTATION = new SqlElementType("FETCH_ORIENTATION");
  IElementType FETCH_STATEMENT = new SqlElementType("FETCH_STATEMENT");
  IElementType FETCH_TARGET_LIST = new SqlElementType("FETCH_TARGET_LIST");
  IElementType FIELD_DEFINITION = new SqlElementType("FIELD_DEFINITION");
  IElementType FIELD_NAME = new SqlElementType("FIELD_NAME");
  IElementType FIELD_REFERENCE = new SqlElementType("FIELD_REFERENCE");
  IElementType FILTER_CLAUSE = new SqlElementType("FILTER_CLAUSE");
  IElementType FINALITY = new SqlElementType("FINALITY");
  IElementType FLOOR_FUNCTION = new SqlElementType("FLOOR_FUNCTION");
  IElementType FOLD = new SqlElementType("FOLD");
  IElementType FREE_LOCATOR_STATEMENT = new SqlElementType("FREE_LOCATOR_STATEMENT");
  IElementType FROM_CLAUSE = new SqlElementType("FROM_CLAUSE");
  IElementType FROM_CONSTRUCTOR = new SqlElementType("FROM_CONSTRUCTOR");
  IElementType FROM_DEFAULT = new SqlElementType("FROM_DEFAULT");
  IElementType FROM_SQL = new SqlElementType("FROM_SQL");
  IElementType FROM_SQL_FUNCTION = new SqlElementType("FROM_SQL_FUNCTION");
  IElementType FROM_SUBQUERY = new SqlElementType("FROM_SUBQUERY");
  IElementType FULL_ORDERING_FORM = new SqlElementType("FULL_ORDERING_FORM");
  IElementType FUNCTION_SPECIFICATION = new SqlElementType("FUNCTION_SPECIFICATION");
  IElementType GENERALIZED_EXPRESSION = new SqlElementType("GENERALIZED_EXPRESSION");
  IElementType GENERALIZED_INVOCATION = new SqlElementType("GENERALIZED_INVOCATION");
  IElementType GENERAL_LITERAL = new SqlElementType("GENERAL_LITERAL");
  IElementType GENERAL_SET_FUNCTION = new SqlElementType("GENERAL_SET_FUNCTION");
  IElementType GENERAL_VALUE_SPECIFICATION = new SqlElementType("GENERAL_VALUE_SPECIFICATION");
  IElementType GENERATION_CLAUSE = new SqlElementType("GENERATION_CLAUSE");
  IElementType GENERATION_EXPRESSION = new SqlElementType("GENERATION_EXPRESSION");
  IElementType GENERATION_RULE = new SqlElementType("GENERATION_RULE");
  IElementType GET_DESCRIPTOR_INFORMATION = new SqlElementType("GET_DESCRIPTOR_INFORMATION");
  IElementType GET_DIAGNOSTICS_STATEMENT = new SqlElementType("GET_DIAGNOSTICS_STATEMENT");
  IElementType GET_HEADER_INFORMATION = new SqlElementType("GET_HEADER_INFORMATION");
  IElementType GET_ITEM_INFORMATION = new SqlElementType("GET_ITEM_INFORMATION");
  IElementType GLOBAL_OR_LOCAL = new SqlElementType("GLOBAL_OR_LOCAL");
  IElementType GOTO_TARGET = new SqlElementType("GOTO_TARGET");
  IElementType GO_TO = new SqlElementType("GO_TO");
  IElementType GRANTEE = new SqlElementType("GRANTEE");
  IElementType GRANTOR = new SqlElementType("GRANTOR");
  IElementType GRANT_PRIVILEGE_STATEMENT = new SqlElementType("GRANT_PRIVILEGE_STATEMENT");
  IElementType GRANT_ROLE_STATEMENT = new SqlElementType("GRANT_ROLE_STATEMENT");
  IElementType GRANT_STATEMENT = new SqlElementType("GRANT_STATEMENT");
  IElementType GREATER_THAN_OPERATOR = new SqlElementType("GREATER_THAN_OPERATOR");
  IElementType GREATER_THAN_OR_EQUALS_OPERATOR = new SqlElementType("GREATER_THAN_OR_EQUALS_OPERATOR");
  IElementType GROUPING_COLUMN_REFERENCE = new SqlElementType("GROUPING_COLUMN_REFERENCE");
  IElementType GROUPING_COLUMN_REFERENCE_LIST = new SqlElementType("GROUPING_COLUMN_REFERENCE_LIST");
  IElementType GROUPING_ELEMENT = new SqlElementType("GROUPING_ELEMENT");
  IElementType GROUPING_ELEMENT_LIST = new SqlElementType("GROUPING_ELEMENT_LIST");
  IElementType GROUPING_OPERATION = new SqlElementType("GROUPING_OPERATION");
  IElementType GROUPING_SET = new SqlElementType("GROUPING_SET");
  IElementType GROUPING_SETS_SPECIFICATION = new SqlElementType("GROUPING_SETS_SPECIFICATION");
  IElementType GROUPING_SET_LIST = new SqlElementType("GROUPING_SET_LIST");
  IElementType GROUP_BY_CLAUSE = new SqlElementType("GROUP_BY_CLAUSE");
  IElementType GROUP_NAME = new SqlElementType("GROUP_NAME");
  IElementType GROUP_SPECIFICATION = new SqlElementType("GROUP_SPECIFICATION");
  IElementType HAVING_CLAUSE = new SqlElementType("HAVING_CLAUSE");
  IElementType HEADER_ITEM_NAME = new SqlElementType("HEADER_ITEM_NAME");
  IElementType HEXIT = new SqlElementType("HEXIT");
  IElementType HIGH_VALUE = new SqlElementType("HIGH_VALUE");
  IElementType HOLD_LOCATOR_STATEMENT = new SqlElementType("HOLD_LOCATOR_STATEMENT");
  IElementType HOST_IDENTIFIER = new SqlElementType("HOST_IDENTIFIER");
  IElementType HOST_PARAMETER_DATA_TYPE = new SqlElementType("HOST_PARAMETER_DATA_TYPE");
  IElementType HOST_PARAMETER_DECLARATION = new SqlElementType("HOST_PARAMETER_DECLARATION");
  IElementType HOST_PARAMETER_DECLARATION_LIST = new SqlElementType("HOST_PARAMETER_DECLARATION_LIST");
  IElementType HOST_PARAMETER_NAME = new SqlElementType("HOST_PARAMETER_NAME");
  IElementType HOST_PARAMETER_SPECIFICATION = new SqlElementType("HOST_PARAMETER_SPECIFICATION");
  IElementType HOST_VARIABLE_DEFINITION = new SqlElementType("HOST_VARIABLE_DEFINITION");
  IElementType HOURS_VALUE = new SqlElementType("HOURS_VALUE");
  IElementType HYPOTHETICAL_SET_FUNCTION = new SqlElementType("HYPOTHETICAL_SET_FUNCTION");
  IElementType HYPOTHETICAL_SET_FUNCTION_VALUE_EXPRESSION_LIST = new SqlElementType("HYPOTHETICAL_SET_FUNCTION_VALUE_EXPRESSION_LIST");
  IElementType IDENTIFIER = new SqlElementType("IDENTIFIER");
  IElementType IDENTIFIER_BODY = new SqlElementType("IDENTIFIER_BODY");
  IElementType IDENTIFIER_CHAIN = new SqlElementType("IDENTIFIER_CHAIN");
  IElementType IDENTIFIER_PART = new SqlElementType("IDENTIFIER_PART");
  IElementType IDENTIFIER_START = new SqlElementType("IDENTIFIER_START");
  IElementType IDENTITY_COLUMN_SPECIFICATION = new SqlElementType("IDENTITY_COLUMN_SPECIFICATION");
  IElementType IDENTITY_OPTION = new SqlElementType("IDENTITY_OPTION");
  IElementType IMPLEMENTATION_DEFINED_CHARACTER_SET_NAME = new SqlElementType("IMPLEMENTATION_DEFINED_CHARACTER_SET_NAME");
  IElementType IMPLICITLY_TYPED_VALUE_SPECIFICATION = new SqlElementType("IMPLICITLY_TYPED_VALUE_SPECIFICATION");
  IElementType INCLUSIVE_USER_DEFINED_TYPE_SPECIFICATION = new SqlElementType("INCLUSIVE_USER_DEFINED_TYPE_SPECIFICATION");
  IElementType INDEPENDENT_VARIABLE_EXPRESSION = new SqlElementType("INDEPENDENT_VARIABLE_EXPRESSION");
  IElementType INDICATOR_PARAMETER = new SqlElementType("INDICATOR_PARAMETER");
  IElementType INDICATOR_VARIABLE = new SqlElementType("INDICATOR_VARIABLE");
  IElementType INPUT_USING_CLAUSE = new SqlElementType("INPUT_USING_CLAUSE");
  IElementType INSERTION_TARGET = new SqlElementType("INSERTION_TARGET");
  IElementType INSERT_COLUMNS_AND_SOURCE = new SqlElementType("INSERT_COLUMNS_AND_SOURCE");
  IElementType INSERT_COLUMN_LIST = new SqlElementType("INSERT_COLUMN_LIST");
  IElementType INSERT_STATEMENT = new SqlElementType("INSERT_STATEMENT");
  IElementType INSTANTIABLE_CLAUSE = new SqlElementType("INSTANTIABLE_CLAUSE");
  IElementType INTERVAL_ABSOLUTE_VALUE_FUNCTION = new SqlElementType("INTERVAL_ABSOLUTE_VALUE_FUNCTION");
  IElementType INTERVAL_FACTOR = new SqlElementType("INTERVAL_FACTOR");
  IElementType INTERVAL_FRACTIONAL_SECONDS_PRECISION = new SqlElementType("INTERVAL_FRACTIONAL_SECONDS_PRECISION");
  IElementType INTERVAL_LEADING_FIELD_PRECISION = new SqlElementType("INTERVAL_LEADING_FIELD_PRECISION");
  IElementType INTERVAL_LITERAL = new SqlElementType("INTERVAL_LITERAL");
  IElementType INTERVAL_PRIMARY = new SqlElementType("INTERVAL_PRIMARY");
  IElementType INTERVAL_QUALIFIER = new SqlElementType("INTERVAL_QUALIFIER");
  IElementType INTERVAL_STRING = new SqlElementType("INTERVAL_STRING");
  IElementType INTERVAL_TERM = new SqlElementType("INTERVAL_TERM");
  IElementType INTERVAL_TERM_1 = new SqlElementType("INTERVAL_TERM_1");
  IElementType INTERVAL_TERM_2 = new SqlElementType("INTERVAL_TERM_2");
  IElementType INTERVAL_TYPE = new SqlElementType("INTERVAL_TYPE");
  IElementType INTERVAL_VALUE_EXPRESSION = new SqlElementType("INTERVAL_VALUE_EXPRESSION");
  IElementType INTERVAL_VALUE_EXPRESSION_1 = new SqlElementType("INTERVAL_VALUE_EXPRESSION_1");
  IElementType INTERVAL_VALUE_FUNCTION = new SqlElementType("INTERVAL_VALUE_FUNCTION");
  IElementType INTO_ARGUMENT = new SqlElementType("INTO_ARGUMENT");
  IElementType INTO_ARGUMENTS = new SqlElementType("INTO_ARGUMENTS");
  IElementType INTO_DESCRIPTOR = new SqlElementType("INTO_DESCRIPTOR");
  IElementType INTRODUCER = new SqlElementType("INTRODUCER");
  IElementType INVERSE_DISTRIBUTION_FUNCTION = new SqlElementType("INVERSE_DISTRIBUTION_FUNCTION");
  IElementType INVERSE_DISTRIBUTION_FUNCTION_ARGUMENT = new SqlElementType("INVERSE_DISTRIBUTION_FUNCTION_ARGUMENT");
  IElementType INVERSE_DISTRIBUTION_FUNCTION_TYPE = new SqlElementType("INVERSE_DISTRIBUTION_FUNCTION_TYPE");
  IElementType IN_LINE_WINDOW_SPECIFICATION = new SqlElementType("IN_LINE_WINDOW_SPECIFICATION");
  IElementType IN_PREDICATE = new SqlElementType("IN_PREDICATE");
  IElementType IN_PREDICATE_PART_2 = new SqlElementType("IN_PREDICATE_PART_2");
  IElementType IN_PREDICATE_VALUE = new SqlElementType("IN_PREDICATE_VALUE");
  IElementType IN_VALUE_LIST = new SqlElementType("IN_VALUE_LIST");
  IElementType ISOLATION_LEVEL = new SqlElementType("ISOLATION_LEVEL");
  IElementType ITEM_NUMBER = new SqlElementType("ITEM_NUMBER");
  IElementType JOINED_TABLE = new SqlElementType("JOINED_TABLE");
  IElementType JOIN_COLUMN_LIST = new SqlElementType("JOIN_COLUMN_LIST");
  IElementType JOIN_CONDITION = new SqlElementType("JOIN_CONDITION");
  IElementType JOIN_SPECIFICATION = new SqlElementType("JOIN_SPECIFICATION");
  IElementType JOIN_TYPE = new SqlElementType("JOIN_TYPE");
  IElementType KEY_WORD = new SqlElementType("KEY_WORD");
  IElementType LANGUAGE_CLAUSE = new SqlElementType("LANGUAGE_CLAUSE");
  IElementType LANGUAGE_NAME = new SqlElementType("LANGUAGE_NAME");
  IElementType LARGE_OBJECT_LENGTH = new SqlElementType("LARGE_OBJECT_LENGTH");
  IElementType LARGE_OBJECT_LENGTH_TOKEN = new SqlElementType("LARGE_OBJECT_LENGTH_TOKEN");
  IElementType LATERAL_DERIVED_TABLE = new SqlElementType("LATERAL_DERIVED_TABLE");
  IElementType LEFT_BRACE = new SqlElementType("LEFT_BRACE");
  IElementType LEFT_BRACKET = new SqlElementType("LEFT_BRACKET");
  IElementType LEFT_BRACKET_OR_TRIGRAPH = new SqlElementType("LEFT_BRACKET_OR_TRIGRAPH");
  IElementType LEFT_BRACKET_TRIGRAPH = new SqlElementType("LEFT_BRACKET_TRIGRAPH");
  IElementType LEFT_PAREN = new SqlElementType("LEFT_PAREN");
  IElementType LENGTH = new SqlElementType("LENGTH");
  IElementType LENGTH_EXPRESSION = new SqlElementType("LENGTH_EXPRESSION");
  IElementType LESS_THAN_OPERATOR = new SqlElementType("LESS_THAN_OPERATOR");
  IElementType LESS_THAN_OR_EQUALS_OPERATOR = new SqlElementType("LESS_THAN_OR_EQUALS_OPERATOR");
  IElementType LEVELS_CLAUSE = new SqlElementType("LEVELS_CLAUSE");
  IElementType LEVEL_OF_ISOLATION = new SqlElementType("LEVEL_OF_ISOLATION");
  IElementType LIKE_CLAUSE = new SqlElementType("LIKE_CLAUSE");
  IElementType LIKE_OPTIONS = new SqlElementType("LIKE_OPTIONS");
  IElementType LIKE_PREDICATE = new SqlElementType("LIKE_PREDICATE");
  IElementType LIST_OF_ATTRIBUTES = new SqlElementType("LIST_OF_ATTRIBUTES");
  IElementType LITERAL = new SqlElementType("LITERAL");
  IElementType LOCAL_OR_SCHEMA_QUALIFIED_NAME = new SqlElementType("LOCAL_OR_SCHEMA_QUALIFIED_NAME");
  IElementType LOCAL_OR_SCHEMA_QUALIFIER = new SqlElementType("LOCAL_OR_SCHEMA_QUALIFIER");
  IElementType LOCAL_QUALIFIED_NAME = new SqlElementType("LOCAL_QUALIFIED_NAME");
  IElementType LOCAL_QUALIFIER = new SqlElementType("LOCAL_QUALIFIER");
  IElementType LOCATOR_INDICATION = new SqlElementType("LOCATOR_INDICATION");
  IElementType LOCATOR_REFERENCE = new SqlElementType("LOCATOR_REFERENCE");
  IElementType LOW_VALUE = new SqlElementType("LOW_VALUE");
  IElementType MAJOR_CATEGORY = new SqlElementType("MAJOR_CATEGORY");
  IElementType MANTISSA = new SqlElementType("MANTISSA");
  IElementType MAP_CATEGORY = new SqlElementType("MAP_CATEGORY");
  IElementType MAP_FUNCTION_SPECIFICATION = new SqlElementType("MAP_FUNCTION_SPECIFICATION");
  IElementType MATCH_PREDICATE = new SqlElementType("MATCH_PREDICATE");
  IElementType MATCH_PREDICATE_PART_2 = new SqlElementType("MATCH_PREDICATE_PART_2");
  IElementType MATCH_TYPE = new SqlElementType("MATCH_TYPE");
  IElementType MAXIMUM_DYNAMIC_RESULT_SETS = new SqlElementType("MAXIMUM_DYNAMIC_RESULT_SETS");
  IElementType MEMBER = new SqlElementType("MEMBER");
  IElementType MEMBER_LIST = new SqlElementType("MEMBER_LIST");
  IElementType MEMBER_NAME = new SqlElementType("MEMBER_NAME");
  IElementType MEMBER_NAME_ALTERNATIVES = new SqlElementType("MEMBER_NAME_ALTERNATIVES");
  IElementType MEMBER_PREDICATE = new SqlElementType("MEMBER_PREDICATE");
  IElementType MEMBER_PREDICATE_PART_2 = new SqlElementType("MEMBER_PREDICATE_PART_2");
  IElementType MERGE_CORRELATION_NAME = new SqlElementType("MERGE_CORRELATION_NAME");
  IElementType MERGE_INSERT_SPECIFICATION = new SqlElementType("MERGE_INSERT_SPECIFICATION");
  IElementType MERGE_INSERT_VALUE_ELEMENT = new SqlElementType("MERGE_INSERT_VALUE_ELEMENT");
  IElementType MERGE_INSERT_VALUE_LIST = new SqlElementType("MERGE_INSERT_VALUE_LIST");
  IElementType MERGE_OPERATION_SPECIFICATION = new SqlElementType("MERGE_OPERATION_SPECIFICATION");
  IElementType MERGE_STATEMENT = new SqlElementType("MERGE_STATEMENT");
  IElementType MERGE_UPDATE_SPECIFICATION = new SqlElementType("MERGE_UPDATE_SPECIFICATION");
  IElementType MERGE_WHEN_CLAUSE = new SqlElementType("MERGE_WHEN_CLAUSE");
  IElementType MERGE_WHEN_MATCHED_CLAUSE = new SqlElementType("MERGE_WHEN_MATCHED_CLAUSE");
  IElementType MERGE_WHEN_NOT_MATCHED_CLAUSE = new SqlElementType("MERGE_WHEN_NOT_MATCHED_CLAUSE");
  IElementType METHOD_CHARACTERISTIC = new SqlElementType("METHOD_CHARACTERISTIC");
  IElementType METHOD_CHARACTERISTICS = new SqlElementType("METHOD_CHARACTERISTICS");
  IElementType METHOD_INVOCATION = new SqlElementType("METHOD_INVOCATION");
  IElementType METHOD_NAME = new SqlElementType("METHOD_NAME");
  IElementType METHOD_REFERENCE = new SqlElementType("METHOD_REFERENCE");
  IElementType METHOD_SELECTION = new SqlElementType("METHOD_SELECTION");
  IElementType METHOD_SPECIFICATION = new SqlElementType("METHOD_SPECIFICATION");
  IElementType METHOD_SPECIFICATION_DESIGNATOR = new SqlElementType("METHOD_SPECIFICATION_DESIGNATOR");
  IElementType METHOD_SPECIFICATION_LIST = new SqlElementType("METHOD_SPECIFICATION_LIST");
  IElementType MINUS_SIGN = new SqlElementType("MINUS_SIGN");
  IElementType MINUTES_VALUE = new SqlElementType("MINUTES_VALUE");
  IElementType MODULE_AUTHORIZATION_CLAUSE = new SqlElementType("MODULE_AUTHORIZATION_CLAUSE");
  IElementType MODULE_AUTHORIZATION_IDENTIFIER = new SqlElementType("MODULE_AUTHORIZATION_IDENTIFIER");
  IElementType MODULE_CHARACTER_SET_SPECIFICATION = new SqlElementType("MODULE_CHARACTER_SET_SPECIFICATION");
  IElementType MODULE_COLLATIONS = new SqlElementType("MODULE_COLLATIONS");
  IElementType MODULE_COLLATION_SPECIFICATION = new SqlElementType("MODULE_COLLATION_SPECIFICATION");
  IElementType MODULE_CONTENTS = new SqlElementType("MODULE_CONTENTS");
  IElementType MODULE_NAME_CLAUSE = new SqlElementType("MODULE_NAME_CLAUSE");
  IElementType MODULE_PATH_SPECIFICATION = new SqlElementType("MODULE_PATH_SPECIFICATION");
  IElementType MODULE_TRANSFORM_GROUP_SPECIFICATION = new SqlElementType("MODULE_TRANSFORM_GROUP_SPECIFICATION");
  IElementType MODULUS_EXPRESSION = new SqlElementType("MODULUS_EXPRESSION");
  IElementType MONTHS_VALUE = new SqlElementType("MONTHS_VALUE");
  IElementType MULTIPLE_COLUMN_ASSIGNMENT = new SqlElementType("MULTIPLE_COLUMN_ASSIGNMENT");
  IElementType MULTIPLE_GROUP_SPECIFICATION = new SqlElementType("MULTIPLE_GROUP_SPECIFICATION");
  IElementType MULTIPLIER = new SqlElementType("MULTIPLIER");
  IElementType MULTISET_ELEMENT = new SqlElementType("MULTISET_ELEMENT");
  IElementType MULTISET_ELEMENT_LIST = new SqlElementType("MULTISET_ELEMENT_LIST");
  IElementType MULTISET_ELEMENT_REFERENCE = new SqlElementType("MULTISET_ELEMENT_REFERENCE");
  IElementType MULTISET_PRIMARY = new SqlElementType("MULTISET_PRIMARY");
  IElementType MULTISET_SET_FUNCTION = new SqlElementType("MULTISET_SET_FUNCTION");
  IElementType MULTISET_TERM = new SqlElementType("MULTISET_TERM");
  IElementType MULTISET_TYPE = new SqlElementType("MULTISET_TYPE");
  IElementType MULTISET_VALUE_CONSTRUCTOR = new SqlElementType("MULTISET_VALUE_CONSTRUCTOR");
  IElementType MULTISET_VALUE_CONSTRUCTOR_BY_ENUMERATION = new SqlElementType("MULTISET_VALUE_CONSTRUCTOR_BY_ENUMERATION");
  IElementType MULTISET_VALUE_CONSTRUCTOR_BY_QUERY = new SqlElementType("MULTISET_VALUE_CONSTRUCTOR_BY_QUERY");
  IElementType MULTISET_VALUE_EXPRESSION = new SqlElementType("MULTISET_VALUE_EXPRESSION");
  IElementType MULTISET_VALUE_FUNCTION = new SqlElementType("MULTISET_VALUE_FUNCTION");
  IElementType MUTATED_SET_CLAUSE = new SqlElementType("MUTATED_SET_CLAUSE");
  IElementType MUTATED_TARGET = new SqlElementType("MUTATED_TARGET");
  IElementType NAMED_COLUMNS_JOIN = new SqlElementType("NAMED_COLUMNS_JOIN");
  IElementType NATIONAL_CHARACTER_STRING_LITERAL = new SqlElementType("NATIONAL_CHARACTER_STRING_LITERAL");
  IElementType NATIONAL_CHARACTER_STRING_TYPE = new SqlElementType("NATIONAL_CHARACTER_STRING_TYPE");
  IElementType NATURAL_JOIN = new SqlElementType("NATURAL_JOIN");
  IElementType NATURAL_LOGARITHM = new SqlElementType("NATURAL_LOGARITHM");
  IElementType NESTING_OPTION = new SqlElementType("NESTING_OPTION");
  IElementType NEW_INVOCATION = new SqlElementType("NEW_INVOCATION");
  IElementType NEW_SPECIFICATION = new SqlElementType("NEW_SPECIFICATION");
  IElementType NEW_VALUES_CORRELATION_NAME = new SqlElementType("NEW_VALUES_CORRELATION_NAME");
  IElementType NEW_VALUES_TABLE_ALIAS = new SqlElementType("NEW_VALUES_TABLE_ALIAS");
  IElementType NEW_WINDOW_NAME = new SqlElementType("NEW_WINDOW_NAME");
  IElementType NEXT_VALUE_EXPRESSION = new SqlElementType("NEXT_VALUE_EXPRESSION");
  IElementType NONDELIMITER_TOKEN = new SqlElementType("NONDELIMITER_TOKEN");
  IElementType NONDOUBLEQUOTE_CHARACTER = new SqlElementType("NONDOUBLEQUOTE_CHARACTER");
  IElementType NONPARENTHESIZED_VALUE_EXPRESSION_PRIMARY = new SqlElementType("NONPARENTHESIZED_VALUE_EXPRESSION_PRIMARY");
  IElementType NONQUOTE_CHARACTER = new SqlElementType("NONQUOTE_CHARACTER");
  IElementType NON_CYCLE_MARK_VALUE = new SqlElementType("NON_CYCLE_MARK_VALUE");
  IElementType NON_ESCAPED_CHARACTER = new SqlElementType("NON_ESCAPED_CHARACTER");
  IElementType NON_JOIN_QUERY_EXPRESSION = new SqlElementType("NON_JOIN_QUERY_EXPRESSION");
  IElementType NON_JOIN_QUERY_PRIMARY = new SqlElementType("NON_JOIN_QUERY_PRIMARY");
  IElementType NON_JOIN_QUERY_TERM = new SqlElementType("NON_JOIN_QUERY_TERM");
  IElementType NON_RESERVED_WORD = new SqlElementType("NON_RESERVED_WORD");
  IElementType NON_SECOND_PRIMARY_DATETIME_FIELD = new SqlElementType("NON_SECOND_PRIMARY_DATETIME_FIELD");
  IElementType NORMALIZED_PREDICATE = new SqlElementType("NORMALIZED_PREDICATE");
  IElementType NORMALIZE_FUNCTION = new SqlElementType("NORMALIZE_FUNCTION");
  IElementType NOT_EQUALS_OPERATOR = new SqlElementType("NOT_EQUALS_OPERATOR");
  IElementType NULL_CALL_CLAUSE = new SqlElementType("NULL_CALL_CLAUSE");
  IElementType NULL_ORDERING = new SqlElementType("NULL_ORDERING");
  IElementType NULL_PREDICATE = new SqlElementType("NULL_PREDICATE");
  IElementType NULL_PREDICATE_PART_2 = new SqlElementType("NULL_PREDICATE_PART_2");
  IElementType NULL_SPECIFICATION = new SqlElementType("NULL_SPECIFICATION");
  IElementType NUMBER_OF_CONDITIONS = new SqlElementType("NUMBER_OF_CONDITIONS");
  IElementType NUMERIC_PRIMARY = new SqlElementType("NUMERIC_PRIMARY");
  IElementType NUMERIC_TYPE = new SqlElementType("NUMERIC_TYPE");
  IElementType NUMERIC_VALUE_EXPRESSION = new SqlElementType("NUMERIC_VALUE_EXPRESSION");
  IElementType NUMERIC_VALUE_EXPRESSION_BASE = new SqlElementType("NUMERIC_VALUE_EXPRESSION_BASE");
  IElementType NUMERIC_VALUE_EXPRESSION_EXPONENT = new SqlElementType("NUMERIC_VALUE_EXPRESSION_EXPONENT");
  IElementType NUMERIC_VALUE_FUNCTION = new SqlElementType("NUMERIC_VALUE_FUNCTION");
  IElementType OBJECT_COLUMN = new SqlElementType("OBJECT_COLUMN");
  IElementType OBJECT_NAME = new SqlElementType("OBJECT_NAME");
  IElementType OBJECT_PRIVILEGES = new SqlElementType("OBJECT_PRIVILEGES");
  IElementType OCCURRENCES = new SqlElementType("OCCURRENCES");
  IElementType OCTET_LENGTH_EXPRESSION = new SqlElementType("OCTET_LENGTH_EXPRESSION");
  IElementType OCTET_LIKE_PREDICATE = new SqlElementType("OCTET_LIKE_PREDICATE");
  IElementType OCTET_LIKE_PREDICATE_PART_2 = new SqlElementType("OCTET_LIKE_PREDICATE_PART_2");
  IElementType OCTET_PATTERN = new SqlElementType("OCTET_PATTERN");
  IElementType OLD_OR_NEW_VALUES_ALIAS = new SqlElementType("OLD_OR_NEW_VALUES_ALIAS");
  IElementType OLD_OR_NEW_VALUES_ALIAS_LIST = new SqlElementType("OLD_OR_NEW_VALUES_ALIAS_LIST");
  IElementType OLD_VALUES_CORRELATION_NAME = new SqlElementType("OLD_VALUES_CORRELATION_NAME");
  IElementType OLD_VALUES_TABLE_ALIAS = new SqlElementType("OLD_VALUES_TABLE_ALIAS");
  IElementType ONLY_SPEC = new SqlElementType("ONLY_SPEC");
  IElementType OPEN_STATEMENT = new SqlElementType("OPEN_STATEMENT");
  IElementType ORDERED_SET_FUNCTION = new SqlElementType("ORDERED_SET_FUNCTION");
  IElementType ORDERING_CATEGORY = new SqlElementType("ORDERING_CATEGORY");
  IElementType ORDERING_FORM = new SqlElementType("ORDERING_FORM");
  IElementType ORDERING_SPECIFICATION = new SqlElementType("ORDERING_SPECIFICATION");
  IElementType ORDER_BY_CLAUSE = new SqlElementType("ORDER_BY_CLAUSE");
  IElementType ORDINARY_GROUPING_SET = new SqlElementType("ORDINARY_GROUPING_SET");
  IElementType ORDINARY_GROUPING_SET_LIST = new SqlElementType("ORDINARY_GROUPING_SET_LIST");
  IElementType ORIGINAL_METHOD_SPECIFICATION = new SqlElementType("ORIGINAL_METHOD_SPECIFICATION");
  IElementType OUTER_JOIN_TYPE = new SqlElementType("OUTER_JOIN_TYPE");
  IElementType OUTPUT_USING_CLAUSE = new SqlElementType("OUTPUT_USING_CLAUSE");
  IElementType OVERLAPS_PREDICATE = new SqlElementType("OVERLAPS_PREDICATE");
  IElementType OVERLAPS_PREDICATE_PART_1 = new SqlElementType("OVERLAPS_PREDICATE_PART_1");
  IElementType OVERLAPS_PREDICATE_PART_2 = new SqlElementType("OVERLAPS_PREDICATE_PART_2");
  IElementType OVERRIDE_CLAUSE = new SqlElementType("OVERRIDE_CLAUSE");
  IElementType OVERRIDING_METHOD_SPECIFICATION = new SqlElementType("OVERRIDING_METHOD_SPECIFICATION");
  IElementType PAD_CHARACTERISTIC = new SqlElementType("PAD_CHARACTERISTIC");
  IElementType PARAMETER_MODE = new SqlElementType("PARAMETER_MODE");
  IElementType PARAMETER_STYLE = new SqlElementType("PARAMETER_STYLE");
  IElementType PARAMETER_STYLE_CLAUSE = new SqlElementType("PARAMETER_STYLE_CLAUSE");
  IElementType PARAMETER_TYPE = new SqlElementType("PARAMETER_TYPE");
  IElementType PARAMETER_USING_CLAUSE = new SqlElementType("PARAMETER_USING_CLAUSE");
  IElementType PARENTHESIZED_BOOLEAN_VALUE_EXPRESSION = new SqlElementType("PARENTHESIZED_BOOLEAN_VALUE_EXPRESSION");
  IElementType PARENTHESIZED_VALUE_EXPRESSION = new SqlElementType("PARENTHESIZED_VALUE_EXPRESSION");
  IElementType PARTIAL_METHOD_SPECIFICATION = new SqlElementType("PARTIAL_METHOD_SPECIFICATION");
  IElementType PATH_COLUMN = new SqlElementType("PATH_COLUMN");
  IElementType PATH_RESOLVED_USER_DEFINED_TYPE_NAME = new SqlElementType("PATH_RESOLVED_USER_DEFINED_TYPE_NAME");
  IElementType PATH_SPECIFICATION = new SqlElementType("PATH_SPECIFICATION");
  IElementType PERCENT = new SqlElementType("PERCENT");
  IElementType PERIOD = new SqlElementType("PERIOD");
  IElementType PLUS_SIGN = new SqlElementType("PLUS_SIGN");
  IElementType POSITION_EXPRESSION = new SqlElementType("POSITION_EXPRESSION");
  IElementType POWER_FUNCTION = new SqlElementType("POWER_FUNCTION");
  IElementType PRECISION = new SqlElementType("PRECISION");
  IElementType PREDEFINED_TYPE = new SqlElementType("PREDEFINED_TYPE");
  IElementType PREDICATE = new SqlElementType("PREDICATE");
  IElementType PREPARABLE_DYNAMIC_DELETE_STATEMENT_POSITIONED = new SqlElementType("PREPARABLE_DYNAMIC_DELETE_STATEMENT_POSITIONED");
  IElementType PREPARABLE_DYNAMIC_UPDATE_STATEMENT_POSITIONED = new SqlElementType("PREPARABLE_DYNAMIC_UPDATE_STATEMENT_POSITIONED");
  IElementType PREPARABLE_IMPLEMENTATION_DEFINED_STATEMENT = new SqlElementType("PREPARABLE_IMPLEMENTATION_DEFINED_STATEMENT");
  IElementType PREPARABLE_SQL_CONTROL_STATEMENT = new SqlElementType("PREPARABLE_SQL_CONTROL_STATEMENT");
  IElementType PREPARABLE_SQL_DATA_STATEMENT = new SqlElementType("PREPARABLE_SQL_DATA_STATEMENT");
  IElementType PREPARABLE_SQL_SCHEMA_STATEMENT = new SqlElementType("PREPARABLE_SQL_SCHEMA_STATEMENT");
  IElementType PREPARABLE_SQL_SESSION_STATEMENT = new SqlElementType("PREPARABLE_SQL_SESSION_STATEMENT");
  IElementType PREPARABLE_SQL_TRANSACTION_STATEMENT = new SqlElementType("PREPARABLE_SQL_TRANSACTION_STATEMENT");
  IElementType PREPARABLE_STATEMENT = new SqlElementType("PREPARABLE_STATEMENT");
  IElementType PREPARE_STATEMENT = new SqlElementType("PREPARE_STATEMENT");
  IElementType PRIMARY_DATETIME_FIELD = new SqlElementType("PRIMARY_DATETIME_FIELD");
  IElementType PRIVILEGES = new SqlElementType("PRIVILEGES");
  IElementType PRIVILEGE_COLUMN_LIST = new SqlElementType("PRIVILEGE_COLUMN_LIST");
  IElementType PRIVILEGE_METHOD_LIST = new SqlElementType("PRIVILEGE_METHOD_LIST");
  IElementType PROCEDURE_NAME = new SqlElementType("PROCEDURE_NAME");
  IElementType QUALIFIED_ASTERISK = new SqlElementType("QUALIFIED_ASTERISK");
  IElementType QUALIFIED_IDENTIFIER = new SqlElementType("QUALIFIED_IDENTIFIER");
  IElementType QUALIFIED_JOIN = new SqlElementType("QUALIFIED_JOIN");
  IElementType QUANTIFIED_COMPARISON_PREDICATE = new SqlElementType("QUANTIFIED_COMPARISON_PREDICATE");
  IElementType QUANTIFIED_COMPARISON_PREDICATE_PART_2 = new SqlElementType("QUANTIFIED_COMPARISON_PREDICATE_PART_2");
  IElementType QUANTIFIER = new SqlElementType("QUANTIFIER");
  IElementType QUERY_EXPRESSION = new SqlElementType("QUERY_EXPRESSION");
  IElementType QUERY_EXPRESSION_BODY = new SqlElementType("QUERY_EXPRESSION_BODY");
  IElementType QUERY_NAME = new SqlElementType("QUERY_NAME");
  IElementType QUERY_PRIMARY = new SqlElementType("QUERY_PRIMARY");
  IElementType QUERY_SPECIFICATION = new SqlElementType("QUERY_SPECIFICATION");
  IElementType QUERY_TERM = new SqlElementType("QUERY_TERM");
  IElementType QUESTION_MARK = new SqlElementType("QUESTION_MARK");
  IElementType QUOTE = new SqlElementType("QUOTE");
  IElementType QUOTE_SYMBOL = new SqlElementType("QUOTE_SYMBOL");
  IElementType RANK_FUNCTION_TYPE = new SqlElementType("RANK_FUNCTION_TYPE");
  IElementType RECURSIVE_SEARCH_ORDER = new SqlElementType("RECURSIVE_SEARCH_ORDER");
  IElementType REFERENCEABLE_VIEW_SPECIFICATION = new SqlElementType("REFERENCEABLE_VIEW_SPECIFICATION");
  IElementType REFERENCED_TABLE_AND_COLUMNS = new SqlElementType("REFERENCED_TABLE_AND_COLUMNS");
  IElementType REFERENCED_TYPE = new SqlElementType("REFERENCED_TYPE");
  IElementType REFERENCES_SPECIFICATION = new SqlElementType("REFERENCES_SPECIFICATION");
  IElementType REFERENCE_COLUMN_LIST = new SqlElementType("REFERENCE_COLUMN_LIST");
  IElementType REFERENCE_GENERATION = new SqlElementType("REFERENCE_GENERATION");
  IElementType REFERENCE_RESOLUTION = new SqlElementType("REFERENCE_RESOLUTION");
  IElementType REFERENCE_SCOPE_CHECK = new SqlElementType("REFERENCE_SCOPE_CHECK");
  IElementType REFERENCE_SCOPE_CHECK_ACTION = new SqlElementType("REFERENCE_SCOPE_CHECK_ACTION");
  IElementType REFERENCE_TYPE = new SqlElementType("REFERENCE_TYPE");
  IElementType REFERENCE_TYPE_SPECIFICATION = new SqlElementType("REFERENCE_TYPE_SPECIFICATION");
  IElementType REFERENCE_VALUE_EXPRESSION = new SqlElementType("REFERENCE_VALUE_EXPRESSION");
  IElementType REFERENCING_COLUMNS = new SqlElementType("REFERENCING_COLUMNS");
  IElementType REFERENTIAL_ACTION = new SqlElementType("REFERENTIAL_ACTION");
  IElementType REFERENTIAL_CONSTRAINT_DEFINITION = new SqlElementType("REFERENTIAL_CONSTRAINT_DEFINITION");
  IElementType REFERENTIAL_TRIGGERED_ACTION = new SqlElementType("REFERENTIAL_TRIGGERED_ACTION");
  IElementType REF_CAST_OPTION = new SqlElementType("REF_CAST_OPTION");
  IElementType REGULAR_CHARACTER_SET = new SqlElementType("REGULAR_CHARACTER_SET");
  IElementType REGULAR_CHARACTER_SET_IDENTIFIER = new SqlElementType("REGULAR_CHARACTER_SET_IDENTIFIER");
  IElementType REGULAR_EXPRESSION = new SqlElementType("REGULAR_EXPRESSION");
  IElementType REGULAR_EXPRESSION_SUBSTRING_FUNCTION = new SqlElementType("REGULAR_EXPRESSION_SUBSTRING_FUNCTION");
  IElementType REGULAR_FACTOR = new SqlElementType("REGULAR_FACTOR");
  IElementType REGULAR_IDENTIFIER = new SqlElementType("REGULAR_IDENTIFIER");
  IElementType REGULAR_PRIMARY = new SqlElementType("REGULAR_PRIMARY");
  IElementType REGULAR_TERM = new SqlElementType("REGULAR_TERM");
  IElementType REGULAR_VIEW_SPECIFICATION = new SqlElementType("REGULAR_VIEW_SPECIFICATION");
  IElementType RELATIVE_CATEGORY = new SqlElementType("RELATIVE_CATEGORY");
  IElementType RELATIVE_FUNCTION_SPECIFICATION = new SqlElementType("RELATIVE_FUNCTION_SPECIFICATION");
  IElementType RELEASE_SAVEPOINT_STATEMENT = new SqlElementType("RELEASE_SAVEPOINT_STATEMENT");
  IElementType REPEATABLE_CLAUSE = new SqlElementType("REPEATABLE_CLAUSE");
  IElementType REPEAT_ARGUMENT = new SqlElementType("REPEAT_ARGUMENT");
  IElementType REPEAT_FACTOR = new SqlElementType("REPEAT_FACTOR");
  IElementType REPRESENTATION = new SqlElementType("REPRESENTATION");
  IElementType RESERVED_WORD = new SqlElementType("RESERVED_WORD");
  IElementType RESULT = new SqlElementType("RESULT");
  IElementType RESULT_CAST = new SqlElementType("RESULT_CAST");
  IElementType RESULT_CAST_FROM_TYPE = new SqlElementType("RESULT_CAST_FROM_TYPE");
  IElementType RESULT_EXPRESSION = new SqlElementType("RESULT_EXPRESSION");
  IElementType RESULT_SET_CURSOR = new SqlElementType("RESULT_SET_CURSOR");
  IElementType RESULT_USING_CLAUSE = new SqlElementType("RESULT_USING_CLAUSE");
  IElementType RETURNS_CLAUSE = new SqlElementType("RETURNS_CLAUSE");
  IElementType RETURNS_DATA_TYPE = new SqlElementType("RETURNS_DATA_TYPE");
  IElementType RETURNS_TABLE_TYPE = new SqlElementType("RETURNS_TABLE_TYPE");
  IElementType RETURNS_TYPE = new SqlElementType("RETURNS_TYPE");
  IElementType RETURN_STATEMENT = new SqlElementType("RETURN_STATEMENT");
  IElementType RETURN_VALUE = new SqlElementType("RETURN_VALUE");
  IElementType REVOKE_OPTION_EXTENSION = new SqlElementType("REVOKE_OPTION_EXTENSION");
  IElementType REVOKE_PRIVILEGE_STATEMENT = new SqlElementType("REVOKE_PRIVILEGE_STATEMENT");
  IElementType REVOKE_ROLE_STATEMENT = new SqlElementType("REVOKE_ROLE_STATEMENT");
  IElementType REVOKE_STATEMENT = new SqlElementType("REVOKE_STATEMENT");
  IElementType RIGHTS_CLAUSE = new SqlElementType("RIGHTS_CLAUSE");
  IElementType RIGHT_ARROW = new SqlElementType("RIGHT_ARROW");
  IElementType RIGHT_BRACE = new SqlElementType("RIGHT_BRACE");
  IElementType RIGHT_BRACKET_OR_TRIGRAPH = new SqlElementType("RIGHT_BRACKET_OR_TRIGRAPH");
  IElementType RIGHT_PAREN = new SqlElementType("RIGHT_PAREN");
  IElementType ROLE_DEFINITION = new SqlElementType("ROLE_DEFINITION");
  IElementType ROLE_GRANTED = new SqlElementType("ROLE_GRANTED");
  IElementType ROLE_NAME = new SqlElementType("ROLE_NAME");
  IElementType ROLE_REVOKED = new SqlElementType("ROLE_REVOKED");
  IElementType ROLE_SPECIFICATION = new SqlElementType("ROLE_SPECIFICATION");
  IElementType ROLLBACK_STATEMENT = new SqlElementType("ROLLBACK_STATEMENT");
  IElementType ROLLUP_LIST = new SqlElementType("ROLLUP_LIST");
  IElementType ROUTINE_BODY = new SqlElementType("ROUTINE_BODY");
  IElementType ROUTINE_CHARACTERISTIC = new SqlElementType("ROUTINE_CHARACTERISTIC");
  IElementType ROUTINE_CHARACTERISTICS = new SqlElementType("ROUTINE_CHARACTERISTICS");
  IElementType ROUTINE_INVOCATION = new SqlElementType("ROUTINE_INVOCATION");
  IElementType ROUTINE_NAME = new SqlElementType("ROUTINE_NAME");
  IElementType ROUTINE_TYPE = new SqlElementType("ROUTINE_TYPE");
  IElementType ROW_SUBQUERY = new SqlElementType("ROW_SUBQUERY");
  IElementType ROW_TYPE = new SqlElementType("ROW_TYPE");
  IElementType ROW_TYPE_BODY = new SqlElementType("ROW_TYPE_BODY");
  IElementType ROW_VALUE_CONSTRUCTOR = new SqlElementType("ROW_VALUE_CONSTRUCTOR");
  IElementType ROW_VALUE_CONSTRUCTOR_ELEMENT = new SqlElementType("ROW_VALUE_CONSTRUCTOR_ELEMENT");
  IElementType ROW_VALUE_CONSTRUCTOR_ELEMENT_LIST = new SqlElementType("ROW_VALUE_CONSTRUCTOR_ELEMENT_LIST");
  IElementType ROW_VALUE_CONSTRUCTOR_PREDICAND = new SqlElementType("ROW_VALUE_CONSTRUCTOR_PREDICAND");
  IElementType ROW_VALUE_EXPRESSION = new SqlElementType("ROW_VALUE_EXPRESSION");
  IElementType ROW_VALUE_EXPRESSION_LIST = new SqlElementType("ROW_VALUE_EXPRESSION_LIST");
  IElementType ROW_VALUE_PREDICAND = new SqlElementType("ROW_VALUE_PREDICAND");
  IElementType ROW_VALUE_PREDICAND_1 = new SqlElementType("ROW_VALUE_PREDICAND_1");
  IElementType ROW_VALUE_PREDICAND_2 = new SqlElementType("ROW_VALUE_PREDICAND_2");
  IElementType ROW_VALUE_PREDICAND_3 = new SqlElementType("ROW_VALUE_PREDICAND_3");
  IElementType ROW_VALUE_PREDICAND_4 = new SqlElementType("ROW_VALUE_PREDICAND_4");
  IElementType ROW_VALUE_SPECIAL_CASE = new SqlElementType("ROW_VALUE_SPECIAL_CASE");
  IElementType SAMPLE_CLAUSE = new SqlElementType("SAMPLE_CLAUSE");
  IElementType SAMPLE_METHOD = new SqlElementType("SAMPLE_METHOD");
  IElementType SAMPLE_PERCENTAGE = new SqlElementType("SAMPLE_PERCENTAGE");
  IElementType SAVEPOINT_CLAUSE = new SqlElementType("SAVEPOINT_CLAUSE");
  IElementType SAVEPOINT_LEVEL_INDICATION = new SqlElementType("SAVEPOINT_LEVEL_INDICATION");
  IElementType SAVEPOINT_NAME = new SqlElementType("SAVEPOINT_NAME");
  IElementType SAVEPOINT_SPECIFIER = new SqlElementType("SAVEPOINT_SPECIFIER");
  IElementType SAVEPOINT_STATEMENT = new SqlElementType("SAVEPOINT_STATEMENT");
  IElementType SCALAR_SUBQUERY = new SqlElementType("SCALAR_SUBQUERY");
  IElementType SCALE = new SqlElementType("SCALE");
  IElementType SCHEMA_AUTHORIZATION_IDENTIFIER = new SqlElementType("SCHEMA_AUTHORIZATION_IDENTIFIER");
  IElementType SCHEMA_CHARACTER_SET_OR_PATH = new SqlElementType("SCHEMA_CHARACTER_SET_OR_PATH");
  IElementType SCHEMA_CHARACTER_SET_SPECIFICATION = new SqlElementType("SCHEMA_CHARACTER_SET_SPECIFICATION");
  IElementType SCHEMA_DEFINITION = new SqlElementType("SCHEMA_DEFINITION");
  IElementType SCHEMA_ELEMENT = new SqlElementType("SCHEMA_ELEMENT");
  IElementType SCHEMA_FUNCTION = new SqlElementType("SCHEMA_FUNCTION");
  IElementType SCHEMA_NAME = new SqlElementType("SCHEMA_NAME");
  IElementType SCHEMA_NAME_CHARACTERISTIC = new SqlElementType("SCHEMA_NAME_CHARACTERISTIC");
  IElementType SCHEMA_NAME_CLAUSE = new SqlElementType("SCHEMA_NAME_CLAUSE");
  IElementType SCHEMA_NAME_LIST = new SqlElementType("SCHEMA_NAME_LIST");
  IElementType SCHEMA_PATH_SPECIFICATION = new SqlElementType("SCHEMA_PATH_SPECIFICATION");
  IElementType SCHEMA_PROCEDURE = new SqlElementType("SCHEMA_PROCEDURE");
  IElementType SCHEMA_QUALIFIED_NAME = new SqlElementType("SCHEMA_QUALIFIED_NAME");
  IElementType SCHEMA_QUALIFIED_ROUTINE_NAME = new SqlElementType("SCHEMA_QUALIFIED_ROUTINE_NAME");
  IElementType SCHEMA_QUALIFIED_TYPE_NAME = new SqlElementType("SCHEMA_QUALIFIED_TYPE_NAME");
  IElementType SCHEMA_RESOLVED_USER_DEFINED_TYPE_NAME = new SqlElementType("SCHEMA_RESOLVED_USER_DEFINED_TYPE_NAME");
  IElementType SCHEMA_ROUTINE = new SqlElementType("SCHEMA_ROUTINE");
  IElementType SCOPE_CLAUSE = new SqlElementType("SCOPE_CLAUSE");
  IElementType SCOPE_OPTION = new SqlElementType("SCOPE_OPTION");
  IElementType SEARCHED_CASE = new SqlElementType("SEARCHED_CASE");
  IElementType SEARCHED_WHEN_CLAUSE = new SqlElementType("SEARCHED_WHEN_CLAUSE");
  IElementType SEARCH_CLAUSE = new SqlElementType("SEARCH_CLAUSE");
  IElementType SEARCH_CONDITION = new SqlElementType("SEARCH_CONDITION");
  IElementType SEARCH_OR_CYCLE_CLAUSE = new SqlElementType("SEARCH_OR_CYCLE_CLAUSE");
  IElementType SECONDS_FRACTION = new SqlElementType("SECONDS_FRACTION");
  IElementType SECONDS_INTEGER_VALUE = new SqlElementType("SECONDS_INTEGER_VALUE");
  IElementType SECONDS_VALUE = new SqlElementType("SECONDS_VALUE");
  IElementType SELECT_LIST = new SqlElementType("SELECT_LIST");
  IElementType SELECT_STATEMENT_SINGLE_ROW = new SqlElementType("SELECT_STATEMENT_SINGLE_ROW");
  IElementType SELECT_SUBLIST = new SqlElementType("SELECT_SUBLIST");
  IElementType SELECT_TARGET_LIST = new SqlElementType("SELECT_TARGET_LIST");
  IElementType SELF_REFERENCING_COLUMN_NAME = new SqlElementType("SELF_REFERENCING_COLUMN_NAME");
  IElementType SELF_REFERENCING_COLUMN_SPECIFICATION = new SqlElementType("SELF_REFERENCING_COLUMN_SPECIFICATION");
  IElementType SEMICOLON = new SqlElementType("SEMICOLON");
  IElementType SEPARATOR = new SqlElementType("SEPARATOR");
  IElementType SEQUENCE_COLUMN = new SqlElementType("SEQUENCE_COLUMN");
  IElementType SEQUENCE_GENERATOR_CYCLE_OPTION = new SqlElementType("SEQUENCE_GENERATOR_CYCLE_OPTION");
  IElementType SEQUENCE_GENERATOR_DATA_TYPE_OPTION = new SqlElementType("SEQUENCE_GENERATOR_DATA_TYPE_OPTION");
  IElementType SEQUENCE_GENERATOR_DEFINITION = new SqlElementType("SEQUENCE_GENERATOR_DEFINITION");
  IElementType SEQUENCE_GENERATOR_INCREMENT = new SqlElementType("SEQUENCE_GENERATOR_INCREMENT");
  IElementType SEQUENCE_GENERATOR_INCREMENT_BY_OPTION = new SqlElementType("SEQUENCE_GENERATOR_INCREMENT_BY_OPTION");
  IElementType SEQUENCE_GENERATOR_MAXVALUE_OPTION = new SqlElementType("SEQUENCE_GENERATOR_MAXVALUE_OPTION");
  IElementType SEQUENCE_GENERATOR_MAX_VALUE = new SqlElementType("SEQUENCE_GENERATOR_MAX_VALUE");
  IElementType SEQUENCE_GENERATOR_MINVALUE_OPTION = new SqlElementType("SEQUENCE_GENERATOR_MINVALUE_OPTION");
  IElementType SEQUENCE_GENERATOR_MIN_VALUE = new SqlElementType("SEQUENCE_GENERATOR_MIN_VALUE");
  IElementType SEQUENCE_GENERATOR_NAME = new SqlElementType("SEQUENCE_GENERATOR_NAME");
  IElementType SEQUENCE_GENERATOR_OPTION = new SqlElementType("SEQUENCE_GENERATOR_OPTION");
  IElementType SEQUENCE_GENERATOR_OPTIONS = new SqlElementType("SEQUENCE_GENERATOR_OPTIONS");
  IElementType SEQUENCE_GENERATOR_RESTART_VALUE = new SqlElementType("SEQUENCE_GENERATOR_RESTART_VALUE");
  IElementType SEQUENCE_GENERATOR_START_VALUE = new SqlElementType("SEQUENCE_GENERATOR_START_VALUE");
  IElementType SEQUENCE_GENERATOR_START_WITH_OPTION = new SqlElementType("SEQUENCE_GENERATOR_START_WITH_OPTION");
  IElementType SESSION_CHARACTERISTIC = new SqlElementType("SESSION_CHARACTERISTIC");
  IElementType SESSION_CHARACTERISTIC_LIST = new SqlElementType("SESSION_CHARACTERISTIC_LIST");
  IElementType SET_CATALOG_STATEMENT = new SqlElementType("SET_CATALOG_STATEMENT");
  IElementType SET_CLAUSE = new SqlElementType("SET_CLAUSE");
  IElementType SET_CLAUSE_LIST = new SqlElementType("SET_CLAUSE_LIST");
  IElementType SET_COLUMN_DEFAULT_CLAUSE = new SqlElementType("SET_COLUMN_DEFAULT_CLAUSE");
  IElementType SET_CONNECTION_STATEMENT = new SqlElementType("SET_CONNECTION_STATEMENT");
  IElementType SET_CONSTRAINTS_MODE_STATEMENT = new SqlElementType("SET_CONSTRAINTS_MODE_STATEMENT");
  IElementType SET_DESCRIPTOR_INFORMATION = new SqlElementType("SET_DESCRIPTOR_INFORMATION");
  IElementType SET_DOMAIN_DEFAULT_CLAUSE = new SqlElementType("SET_DOMAIN_DEFAULT_CLAUSE");
  IElementType SET_FUNCTION_SPECIFICATION = new SqlElementType("SET_FUNCTION_SPECIFICATION");
  IElementType SET_FUNCTION_TYPE = new SqlElementType("SET_FUNCTION_TYPE");
  IElementType SET_HEADER_INFORMATION = new SqlElementType("SET_HEADER_INFORMATION");
  IElementType SET_ITEM_INFORMATION = new SqlElementType("SET_ITEM_INFORMATION");
  IElementType SET_LOCAL_TIME_ZONE_STATEMENT = new SqlElementType("SET_LOCAL_TIME_ZONE_STATEMENT");
  IElementType SET_NAMES_STATEMENT = new SqlElementType("SET_NAMES_STATEMENT");
  IElementType SET_PATH_STATEMENT = new SqlElementType("SET_PATH_STATEMENT");
  IElementType SET_PREDICATE = new SqlElementType("SET_PREDICATE");
  IElementType SET_PREDICATE_PART_2 = new SqlElementType("SET_PREDICATE_PART_2");
  IElementType SET_QUANTIFIER = new SqlElementType("SET_QUANTIFIER");
  IElementType SET_ROLE_STATEMENT = new SqlElementType("SET_ROLE_STATEMENT");
  IElementType SET_SCHEMA_STATEMENT = new SqlElementType("SET_SCHEMA_STATEMENT");
  IElementType SET_SESSION_CHARACTERISTICS_STATEMENT = new SqlElementType("SET_SESSION_CHARACTERISTICS_STATEMENT");
  IElementType SET_SESSION_COLLATION_STATEMENT = new SqlElementType("SET_SESSION_COLLATION_STATEMENT");
  IElementType SET_SESSION_USER_IDENTIFIER_STATEMENT = new SqlElementType("SET_SESSION_USER_IDENTIFIER_STATEMENT");
  IElementType SET_TARGET = new SqlElementType("SET_TARGET");
  IElementType SET_TARGET_LIST = new SqlElementType("SET_TARGET_LIST");
  IElementType SET_TIME_ZONE_VALUE = new SqlElementType("SET_TIME_ZONE_VALUE");
  IElementType SET_TRANSACTION_STATEMENT = new SqlElementType("SET_TRANSACTION_STATEMENT");
  IElementType SET_TRANSFORM_GROUP_STATEMENT = new SqlElementType("SET_TRANSFORM_GROUP_STATEMENT");
  IElementType SIGN = new SqlElementType("SIGN");
  IElementType SIGNED_INTEGER = new SqlElementType("SIGNED_INTEGER");
  IElementType SIGNED_NUMERIC_LITERAL = new SqlElementType("SIGNED_NUMERIC_LITERAL");
  IElementType SIMILAR_PATTERN = new SqlElementType("SIMILAR_PATTERN");
  IElementType SIMILAR_PREDICATE = new SqlElementType("SIMILAR_PREDICATE");
  IElementType SIMILAR_PREDICATE_PART_2 = new SqlElementType("SIMILAR_PREDICATE_PART_2");
  IElementType SIMPLE_CASE = new SqlElementType("SIMPLE_CASE");
  IElementType SIMPLE_COMMENT = new SqlElementType("SIMPLE_COMMENT");
  IElementType SIMPLE_COMMENT_INTRODUCER = new SqlElementType("SIMPLE_COMMENT_INTRODUCER");
  IElementType SIMPLE_LATIN_LETTER = new SqlElementType("SIMPLE_LATIN_LETTER");
  IElementType SIMPLE_LATIN_LOWER_CASE_LETTER = new SqlElementType("SIMPLE_LATIN_LOWER_CASE_LETTER");
  IElementType SIMPLE_LATIN_UPPER_CASE_LETTER = new SqlElementType("SIMPLE_LATIN_UPPER_CASE_LETTER");
  IElementType SIMPLE_TABLE = new SqlElementType("SIMPLE_TABLE");
  IElementType SIMPLE_TARGET_SPECIFICATION = new SqlElementType("SIMPLE_TARGET_SPECIFICATION");
  IElementType SIMPLE_TARGET_SPECIFICATION_1 = new SqlElementType("SIMPLE_TARGET_SPECIFICATION_1");
  IElementType SIMPLE_TARGET_SPECIFICATION_2 = new SqlElementType("SIMPLE_TARGET_SPECIFICATION_2");
  IElementType SIMPLE_VALUE_SPECIFICATION = new SqlElementType("SIMPLE_VALUE_SPECIFICATION");
  IElementType SIMPLE_VALUE_SPECIFICATION_1 = new SqlElementType("SIMPLE_VALUE_SPECIFICATION_1");
  IElementType SIMPLE_VALUE_SPECIFICATION_2 = new SqlElementType("SIMPLE_VALUE_SPECIFICATION_2");
  IElementType SIMPLE_WHEN_CLAUSE = new SqlElementType("SIMPLE_WHEN_CLAUSE");
  IElementType SINGLE_DATETIME_FIELD = new SqlElementType("SINGLE_DATETIME_FIELD");
  IElementType SINGLE_GROUP_SPECIFICATION = new SqlElementType("SINGLE_GROUP_SPECIFICATION");
  IElementType SLASH = new SqlElementType("SLASH");
  IElementType SOLIDUS = new SqlElementType("SOLIDUS");
  IElementType SOME = new SqlElementType("SOME");
  IElementType SORT_KEY = new SqlElementType("SORT_KEY");
  IElementType SORT_SPECIFICATION = new SqlElementType("SORT_SPECIFICATION");
  IElementType SORT_SPECIFICATION_LIST = new SqlElementType("SORT_SPECIFICATION_LIST");
  IElementType SOURCE_CHARACTER_SET_SPECIFICATION = new SqlElementType("SOURCE_CHARACTER_SET_SPECIFICATION");
  IElementType SOURCE_DATA_TYPE = new SqlElementType("SOURCE_DATA_TYPE");
  IElementType SPACE = new SqlElementType("SPACE");
  IElementType SPECIFIC_METHOD_NAME = new SqlElementType("SPECIFIC_METHOD_NAME");
  IElementType SPECIFIC_METHOD_SPECIFICATION_DESIGNATOR = new SqlElementType("SPECIFIC_METHOD_SPECIFICATION_DESIGNATOR");
  IElementType SPECIFIC_NAME = new SqlElementType("SPECIFIC_NAME");
  IElementType SPECIFIC_ROUTINE_DESIGNATOR = new SqlElementType("SPECIFIC_ROUTINE_DESIGNATOR");
  IElementType SPECIFIC_TYPE_METHOD = new SqlElementType("SPECIFIC_TYPE_METHOD");
  IElementType SQLSTATE_CHAR = new SqlElementType("SQLSTATE_CHAR");
  IElementType SQLSTATE_CLASS_VALUE = new SqlElementType("SQLSTATE_CLASS_VALUE");
  IElementType SQLSTATE_SUBCLASS_VALUE = new SqlElementType("SQLSTATE_SUBCLASS_VALUE");
  IElementType SQL_ARGUMENT = new SqlElementType("SQL_ARGUMENT");
  IElementType SQL_ARGUMENT_LIST = new SqlElementType("SQL_ARGUMENT_LIST");
  IElementType SQL_CLIENT_MODULE_DEFINITION = new SqlElementType("SQL_CLIENT_MODULE_DEFINITION");
  IElementType SQL_CLIENT_MODULE_NAME = new SqlElementType("SQL_CLIENT_MODULE_NAME");
  IElementType SQL_CONDITION = new SqlElementType("SQL_CONDITION");
  IElementType SQL_CONNECTION_STATEMENT = new SqlElementType("SQL_CONNECTION_STATEMENT");
  IElementType SQL_CONTROL_STATEMENT = new SqlElementType("SQL_CONTROL_STATEMENT");
  IElementType SQL_DATA_ACCESS_INDICATION = new SqlElementType("SQL_DATA_ACCESS_INDICATION");
  IElementType SQL_DATA_CHANGE_STATEMENT = new SqlElementType("SQL_DATA_CHANGE_STATEMENT");
  IElementType SQL_DATA_STATEMENT = new SqlElementType("SQL_DATA_STATEMENT");
  IElementType SQL_DIAGNOSTICS_INFORMATION = new SqlElementType("SQL_DIAGNOSTICS_INFORMATION");
  IElementType SQL_DIAGNOSTICS_STATEMENT = new SqlElementType("SQL_DIAGNOSTICS_STATEMENT");
  IElementType SQL_DYNAMIC_DATA_STATEMENT = new SqlElementType("SQL_DYNAMIC_DATA_STATEMENT");
  IElementType SQL_DYNAMIC_STATEMENT = new SqlElementType("SQL_DYNAMIC_STATEMENT");
  IElementType SQL_EXECUTABLE_STATEMENT = new SqlElementType("SQL_EXECUTABLE_STATEMENT");
  IElementType SQL_INVOKED_FUNCTION = new SqlElementType("SQL_INVOKED_FUNCTION");
  IElementType SQL_INVOKED_PROCEDURE = new SqlElementType("SQL_INVOKED_PROCEDURE");
  IElementType SQL_INVOKED_ROUTINE = new SqlElementType("SQL_INVOKED_ROUTINE");
  IElementType SQL_LANGUAGE_CHARACTER = new SqlElementType("SQL_LANGUAGE_CHARACTER");
  IElementType SQL_LANGUAGE_IDENTIFIER = new SqlElementType("SQL_LANGUAGE_IDENTIFIER");
  IElementType SQL_LANGUAGE_IDENTIFIER_PART = new SqlElementType("SQL_LANGUAGE_IDENTIFIER_PART");
  IElementType SQL_LANGUAGE_IDENTIFIER_START = new SqlElementType("SQL_LANGUAGE_IDENTIFIER_START");
  IElementType SQL_PARAMETER_DECLARATION = new SqlElementType("SQL_PARAMETER_DECLARATION");
  IElementType SQL_PARAMETER_DECLARATION_LIST = new SqlElementType("SQL_PARAMETER_DECLARATION_LIST");
  IElementType SQL_PARAMETER_NAME = new SqlElementType("SQL_PARAMETER_NAME");
  IElementType SQL_PARAMETER_REFERENCE = new SqlElementType("SQL_PARAMETER_REFERENCE");
  IElementType SQL_PATH_CHARACTERISTIC = new SqlElementType("SQL_PATH_CHARACTERISTIC");
  IElementType SQL_PREFIX = new SqlElementType("SQL_PREFIX");
  IElementType SQL_PROCEDURE_STATEMENT = new SqlElementType("SQL_PROCEDURE_STATEMENT");
  IElementType SQL_ROUTINE_BODY = new SqlElementType("SQL_ROUTINE_BODY");
  IElementType SQL_ROUTINE_SPEC = new SqlElementType("SQL_ROUTINE_SPEC");
  IElementType SQL_SCHEMA_DEFINITION_STATEMENT = new SqlElementType("SQL_SCHEMA_DEFINITION_STATEMENT");
  IElementType SQL_SCHEMA_MANIPULATION_STATEMENT = new SqlElementType("SQL_SCHEMA_MANIPULATION_STATEMENT");
  IElementType SQL_SCHEMA_STATEMENT = new SqlElementType("SQL_SCHEMA_STATEMENT");
  IElementType SQL_SERVER_NAME = new SqlElementType("SQL_SERVER_NAME");
  IElementType SQL_SESSION_STATEMENT = new SqlElementType("SQL_SESSION_STATEMENT");
  IElementType SQL_SPECIAL_CHARACTER = new SqlElementType("SQL_SPECIAL_CHARACTER");
  IElementType SQL_STATEMENT_NAME = new SqlElementType("SQL_STATEMENT_NAME");
  IElementType SQL_STATEMENT_VARIABLE = new SqlElementType("SQL_STATEMENT_VARIABLE");
  IElementType SQL_TERMINATOR = new SqlElementType("SQL_TERMINATOR");
  IElementType SQL_TRANSACTION_STATEMENT = new SqlElementType("SQL_TRANSACTION_STATEMENT");
  IElementType SQUARE_ROOT = new SqlElementType("SQUARE_ROOT");
  IElementType STANDARD_CHARACTER_SET_NAME = new SqlElementType("STANDARD_CHARACTER_SET_NAME");
  IElementType START_FIELD = new SqlElementType("START_FIELD");
  IElementType START_POSITION = new SqlElementType("START_POSITION");
  IElementType START_TRANSACTION_STATEMENT = new SqlElementType("START_TRANSACTION_STATEMENT");
  IElementType STATEMENT_CURSOR = new SqlElementType("STATEMENT_CURSOR");
  IElementType STATEMENT_INFORMATION = new SqlElementType("STATEMENT_INFORMATION");
  IElementType STATEMENT_INFORMATION_ITEM = new SqlElementType("STATEMENT_INFORMATION_ITEM");
  IElementType STATEMENT_INFORMATION_ITEM_NAME = new SqlElementType("STATEMENT_INFORMATION_ITEM_NAME");
  IElementType STATEMENT_NAME = new SqlElementType("STATEMENT_NAME");
  IElementType STATEMENT_OR_DECLARATION = new SqlElementType("STATEMENT_OR_DECLARATION");
  IElementType STATE_CATEGORY = new SqlElementType("STATE_CATEGORY");
  IElementType STATIC_METHOD_INVOCATION = new SqlElementType("STATIC_METHOD_INVOCATION");
  IElementType STATIC_METHOD_SELECTION = new SqlElementType("STATIC_METHOD_SELECTION");
  IElementType STATUS_PARAMETER = new SqlElementType("STATUS_PARAMETER");
  IElementType STRING_LENGTH = new SqlElementType("STRING_LENGTH");
  IElementType STRING_POSITION_EXPRESSION = new SqlElementType("STRING_POSITION_EXPRESSION");
  IElementType STRING_VALUE_EXPRESSION = new SqlElementType("STRING_VALUE_EXPRESSION");
  IElementType STRING_VALUE_FUNCTION = new SqlElementType("STRING_VALUE_FUNCTION");
  IElementType SUBMULTISET_PREDICATE = new SqlElementType("SUBMULTISET_PREDICATE");
  IElementType SUBMULTISET_PREDICATE_PART_2 = new SqlElementType("SUBMULTISET_PREDICATE_PART_2");
  IElementType SUBQUERY = new SqlElementType("SUBQUERY");
  IElementType SUBTABLE_CLAUSE = new SqlElementType("SUBTABLE_CLAUSE");
  IElementType SUBTYPE_CLAUSE = new SqlElementType("SUBTYPE_CLAUSE");
  IElementType SUBTYPE_OPERAND = new SqlElementType("SUBTYPE_OPERAND");
  IElementType SUBTYPE_TREATMENT = new SqlElementType("SUBTYPE_TREATMENT");
  IElementType SUBVIEW_CLAUSE = new SqlElementType("SUBVIEW_CLAUSE");
  IElementType SUPERTABLE_CLAUSE = new SqlElementType("SUPERTABLE_CLAUSE");
  IElementType SUPERTABLE_NAME = new SqlElementType("SUPERTABLE_NAME");
  IElementType SUPERTYPE_NAME = new SqlElementType("SUPERTYPE_NAME");
  IElementType SYSTEM_DESCRIPTOR_STATEMENT = new SqlElementType("SYSTEM_DESCRIPTOR_STATEMENT");
  IElementType SYSTEM_GENERATED_REPRESENTATION = new SqlElementType("SYSTEM_GENERATED_REPRESENTATION");
  IElementType TABLE_COMMIT_ACTION = new SqlElementType("TABLE_COMMIT_ACTION");
  IElementType TABLE_CONSTRAINT = new SqlElementType("TABLE_CONSTRAINT");
  IElementType TABLE_CONSTRAINT_DEFINITION = new SqlElementType("TABLE_CONSTRAINT_DEFINITION");
  IElementType TABLE_CONTENTS_SOURCE = new SqlElementType("TABLE_CONTENTS_SOURCE");
  IElementType TABLE_DEFINITION = new SqlElementType("TABLE_DEFINITION");
  IElementType TABLE_ELEMENT = new SqlElementType("TABLE_ELEMENT");
  IElementType TABLE_ELEMENT_LIST = new SqlElementType("TABLE_ELEMENT_LIST");
  IElementType TABLE_EXPRESSION = new SqlElementType("TABLE_EXPRESSION");
  IElementType TABLE_FUNCTION_COLUMN_LIST = new SqlElementType("TABLE_FUNCTION_COLUMN_LIST");
  IElementType TABLE_FUNCTION_COLUMN_LIST_ELEMENT = new SqlElementType("TABLE_FUNCTION_COLUMN_LIST_ELEMENT");
  IElementType TABLE_FUNCTION_DERIVED_TABLE = new SqlElementType("TABLE_FUNCTION_DERIVED_TABLE");
  IElementType TABLE_NAME = new SqlElementType("TABLE_NAME");
  IElementType TABLE_OR_QUERY_NAME = new SqlElementType("TABLE_OR_QUERY_NAME");
  IElementType TABLE_PRIMARY = new SqlElementType("TABLE_PRIMARY");
  IElementType TABLE_PRIMARY_OR_JOINED_TABLE = new SqlElementType("TABLE_PRIMARY_OR_JOINED_TABLE");
  IElementType TABLE_REFERENCE = new SqlElementType("TABLE_REFERENCE");
  IElementType TABLE_REFERENCE_LIST = new SqlElementType("TABLE_REFERENCE_LIST");
  IElementType TABLE_ROW_VALUE_EXPRESSION = new SqlElementType("TABLE_ROW_VALUE_EXPRESSION");
  IElementType TABLE_SCOPE = new SqlElementType("TABLE_SCOPE");
  IElementType TABLE_SUBQUERY = new SqlElementType("TABLE_SUBQUERY");
  IElementType TABLE_VALUE_CONSTRUCTOR = new SqlElementType("TABLE_VALUE_CONSTRUCTOR");
  IElementType TABLE_VALUE_CONSTRUCTOR_BY_QUERY = new SqlElementType("TABLE_VALUE_CONSTRUCTOR_BY_QUERY");
  IElementType TARGET_ARRAY_ELEMENT_SPECIFICATION = new SqlElementType("TARGET_ARRAY_ELEMENT_SPECIFICATION");
  IElementType TARGET_ARRAY_REFERENCE = new SqlElementType("TARGET_ARRAY_REFERENCE");
  IElementType TARGET_CHARACTER_SET_SPECIFICATION = new SqlElementType("TARGET_CHARACTER_SET_SPECIFICATION");
  IElementType TARGET_DATA_TYPE = new SqlElementType("TARGET_DATA_TYPE");
  IElementType TARGET_SPECIFICATION = new SqlElementType("TARGET_SPECIFICATION");
  IElementType TARGET_SUBTYPE = new SqlElementType("TARGET_SUBTYPE");
  IElementType TARGET_TABLE = new SqlElementType("TARGET_TABLE");
  IElementType TEMPORARY_TABLE_DECLARATION = new SqlElementType("TEMPORARY_TABLE_DECLARATION");
  IElementType TERM = new SqlElementType("TERM");
  IElementType TIMESTAMP_LITERAL = new SqlElementType("TIMESTAMP_LITERAL");
  IElementType TIMESTAMP_PRECISION = new SqlElementType("TIMESTAMP_PRECISION");
  IElementType TIMESTAMP_STRING = new SqlElementType("TIMESTAMP_STRING");
  IElementType TIME_FRACTIONAL_SECONDS_PRECISION = new SqlElementType("TIME_FRACTIONAL_SECONDS_PRECISION");
  IElementType TIME_INTERVAL = new SqlElementType("TIME_INTERVAL");
  IElementType TIME_LITERAL = new SqlElementType("TIME_LITERAL");
  IElementType TIME_PRECISION = new SqlElementType("TIME_PRECISION");
  IElementType TIME_STRING = new SqlElementType("TIME_STRING");
  IElementType TIME_VALUE = new SqlElementType("TIME_VALUE");
  IElementType TIME_ZONE = new SqlElementType("TIME_ZONE");
  IElementType TIME_ZONE_FIELD = new SqlElementType("TIME_ZONE_FIELD");
  IElementType TIME_ZONE_INTERVAL = new SqlElementType("TIME_ZONE_INTERVAL");
  IElementType TIME_ZONE_SPECIFIER = new SqlElementType("TIME_ZONE_SPECIFIER");
  IElementType TOKEN = new SqlElementType("TOKEN");
  IElementType TO_SQL = new SqlElementType("TO_SQL");
  IElementType TO_SQL_FUNCTION = new SqlElementType("TO_SQL_FUNCTION");
  IElementType TRANSACTION_ACCESS_MODE = new SqlElementType("TRANSACTION_ACCESS_MODE");
  IElementType TRANSACTION_CHARACTERISTICS = new SqlElementType("TRANSACTION_CHARACTERISTICS");
  IElementType TRANSACTION_MODE = new SqlElementType("TRANSACTION_MODE");
  IElementType TRANSCODING = new SqlElementType("TRANSCODING");
  IElementType TRANSCODING_NAME = new SqlElementType("TRANSCODING_NAME");
  IElementType TRANSFORMS_TO_BE_DROPPED = new SqlElementType("TRANSFORMS_TO_BE_DROPPED");
  IElementType TRANSFORM_DEFINITION = new SqlElementType("TRANSFORM_DEFINITION");
  IElementType TRANSFORM_ELEMENT = new SqlElementType("TRANSFORM_ELEMENT");
  IElementType TRANSFORM_ELEMENT_LIST = new SqlElementType("TRANSFORM_ELEMENT_LIST");
  IElementType TRANSFORM_GROUP = new SqlElementType("TRANSFORM_GROUP");
  IElementType TRANSFORM_GROUP_CHARACTERISTIC = new SqlElementType("TRANSFORM_GROUP_CHARACTERISTIC");
  IElementType TRANSFORM_GROUP_ELEMENT = new SqlElementType("TRANSFORM_GROUP_ELEMENT");
  IElementType TRANSFORM_GROUP_SPECIFICATION = new SqlElementType("TRANSFORM_GROUP_SPECIFICATION");
  IElementType TRANSFORM_KIND = new SqlElementType("TRANSFORM_KIND");
  IElementType TRANSLITERATION_DEFINITION = new SqlElementType("TRANSLITERATION_DEFINITION");
  IElementType TRANSLITERATION_NAME = new SqlElementType("TRANSLITERATION_NAME");
  IElementType TRANSLITERATION_ROUTINE = new SqlElementType("TRANSLITERATION_ROUTINE");
  IElementType TRANSLITERATION_SOURCE = new SqlElementType("TRANSLITERATION_SOURCE");
  IElementType TRIGGERED_ACTION = new SqlElementType("TRIGGERED_ACTION");
  IElementType TRIGGERED_SQL_STATEMENT = new SqlElementType("TRIGGERED_SQL_STATEMENT");
  IElementType TRIGGER_ACTION_TIME = new SqlElementType("TRIGGER_ACTION_TIME");
  IElementType TRIGGER_COLUMN_LIST = new SqlElementType("TRIGGER_COLUMN_LIST");
  IElementType TRIGGER_DEFINITION = new SqlElementType("TRIGGER_DEFINITION");
  IElementType TRIGGER_EVENT = new SqlElementType("TRIGGER_EVENT");
  IElementType TRIGGER_NAME = new SqlElementType("TRIGGER_NAME");
  IElementType TRIM_CHARACTER = new SqlElementType("TRIM_CHARACTER");
  IElementType TRIM_FUNCTION = new SqlElementType("TRIM_FUNCTION");
  IElementType TRIM_OCTET = new SqlElementType("TRIM_OCTET");
  IElementType TRIM_OPERANDS = new SqlElementType("TRIM_OPERANDS");
  IElementType TRIM_SOURCE = new SqlElementType("TRIM_SOURCE");
  IElementType TRIM_SPECIFICATION = new SqlElementType("TRIM_SPECIFICATION");
  IElementType TRUTH_VALUE = new SqlElementType("TRUTH_VALUE");
  IElementType TYPE_LIST = new SqlElementType("TYPE_LIST");
  IElementType TYPE_PREDICATE = new SqlElementType("TYPE_PREDICATE");
  IElementType TYPE_PREDICATE_PART_2 = new SqlElementType("TYPE_PREDICATE_PART_2");
  IElementType UNDERSCORE = new SqlElementType("UNDERSCORE");
  IElementType UNICODE_4_DIGIT_ESCAPE_VALUE = new SqlElementType("UNICODE_4_DIGIT_ESCAPE_VALUE");
  IElementType UNICODE_CHARACTER_ESCAPE_VALUE = new SqlElementType("UNICODE_CHARACTER_ESCAPE_VALUE");
  IElementType UNICODE_CHARACTER_STRING_LITERAL = new SqlElementType("UNICODE_CHARACTER_STRING_LITERAL");
  IElementType UNICODE_DELIMITER_BODY = new SqlElementType("UNICODE_DELIMITER_BODY");
  IElementType UNICODE_ESCAPE_SPECIFIER = new SqlElementType("UNICODE_ESCAPE_SPECIFIER");
  IElementType UNICODE_ESCAPE_VALUE = new SqlElementType("UNICODE_ESCAPE_VALUE");
  IElementType UNICODE_IDENTIFIER_PART = new SqlElementType("UNICODE_IDENTIFIER_PART");
  IElementType UNICODE_REPRESENTATION = new SqlElementType("UNICODE_REPRESENTATION");
  IElementType UNION_JOIN = new SqlElementType("UNION_JOIN");
  IElementType UNIQUE_COLUMN_LIST = new SqlElementType("UNIQUE_COLUMN_LIST");
  IElementType UNIQUE_CONSTRAINT_DEFINITION = new SqlElementType("UNIQUE_CONSTRAINT_DEFINITION");
  IElementType UNIQUE_PREDICATE = new SqlElementType("UNIQUE_PREDICATE");
  IElementType UNIQUE_SPECIFICATION = new SqlElementType("UNIQUE_SPECIFICATION");
  IElementType UNQUOTED_DATE_STRING = new SqlElementType("UNQUOTED_DATE_STRING");
  IElementType UNQUOTED_INTERVAL_STRING = new SqlElementType("UNQUOTED_INTERVAL_STRING");
  IElementType UNQUOTED_TIMESTAMP_STRING = new SqlElementType("UNQUOTED_TIMESTAMP_STRING");
  IElementType UNQUOTED_TIME_STRING = new SqlElementType("UNQUOTED_TIME_STRING");
  IElementType UNSIGNED_INTEGER = new SqlElementType("UNSIGNED_INTEGER");
  IElementType UNSIGNED_LITERAL = new SqlElementType("UNSIGNED_LITERAL");
  IElementType UNSIGNED_NUMERIC_LITERAL = new SqlElementType("UNSIGNED_NUMERIC_LITERAL");
  IElementType UNSIGNED_VALUE_SPECIFICATION = new SqlElementType("UNSIGNED_VALUE_SPECIFICATION");
  IElementType UPDATABILITY_CLAUSE = new SqlElementType("UPDATABILITY_CLAUSE");
  IElementType UPDATE_RULE = new SqlElementType("UPDATE_RULE");
  IElementType UPDATE_SOURCE = new SqlElementType("UPDATE_SOURCE");
  IElementType UPDATE_STATEMENT_POSITIONED = new SqlElementType("UPDATE_STATEMENT_POSITIONED");
  IElementType UPDATE_STATEMENT_SEARCHED = new SqlElementType("UPDATE_STATEMENT_SEARCHED");
  IElementType UPDATE_TARGET = new SqlElementType("UPDATE_TARGET");
  IElementType UPPER_LIMIT = new SqlElementType("UPPER_LIMIT");
  IElementType USER_DEFINED_CAST_DEFINITION = new SqlElementType("USER_DEFINED_CAST_DEFINITION");
  IElementType USER_DEFINED_CHARACTER_SET_NAME = new SqlElementType("USER_DEFINED_CHARACTER_SET_NAME");
  IElementType USER_DEFINED_ORDERING_DEFINITION = new SqlElementType("USER_DEFINED_ORDERING_DEFINITION");
  IElementType USER_DEFINED_REPRESENTATION = new SqlElementType("USER_DEFINED_REPRESENTATION");
  IElementType USER_DEFINED_TYPE_BODY = new SqlElementType("USER_DEFINED_TYPE_BODY");
  IElementType USER_DEFINED_TYPE_DEFINITION = new SqlElementType("USER_DEFINED_TYPE_DEFINITION");
  IElementType USER_DEFINED_TYPE_NAME = new SqlElementType("USER_DEFINED_TYPE_NAME");
  IElementType USER_DEFINED_TYPE_OPTION = new SqlElementType("USER_DEFINED_TYPE_OPTION");
  IElementType USER_DEFINED_TYPE_OPTION_LIST = new SqlElementType("USER_DEFINED_TYPE_OPTION_LIST");
  IElementType USER_DEFINED_TYPE_SPECIFICATION = new SqlElementType("USER_DEFINED_TYPE_SPECIFICATION");
  IElementType USER_DEFINED_TYPE_VALUE_EXPRESSION = new SqlElementType("USER_DEFINED_TYPE_VALUE_EXPRESSION");
  IElementType USER_IDENTIFIER = new SqlElementType("USER_IDENTIFIER");
  IElementType USING_ARGUMENT = new SqlElementType("USING_ARGUMENT");
  IElementType USING_ARGUMENTS = new SqlElementType("USING_ARGUMENTS");
  IElementType USING_DESCRIPTOR = new SqlElementType("USING_DESCRIPTOR");
  IElementType USING_INPUT_DESCRIPTOR = new SqlElementType("USING_INPUT_DESCRIPTOR");
  IElementType VALUE_EXPRESSION = new SqlElementType("VALUE_EXPRESSION");
  IElementType VALUE_EXPRESSION_PRIMARY = new SqlElementType("VALUE_EXPRESSION_PRIMARY");
  IElementType VALUE_SPECIFICATION = new SqlElementType("VALUE_SPECIFICATION");
  IElementType VERTICAL_BAR = new SqlElementType("VERTICAL_BAR");
  IElementType VIEW_COLUMN_LIST = new SqlElementType("VIEW_COLUMN_LIST");
  IElementType VIEW_COLUMN_OPTION = new SqlElementType("VIEW_COLUMN_OPTION");
  IElementType VIEW_DEFINITION = new SqlElementType("VIEW_DEFINITION");
  IElementType VIEW_ELEMENT = new SqlElementType("VIEW_ELEMENT");
  IElementType VIEW_ELEMENT_LIST = new SqlElementType("VIEW_ELEMENT_LIST");
  IElementType VIEW_SPECIFICATION = new SqlElementType("VIEW_SPECIFICATION");
  IElementType WHEN_OPERAND = new SqlElementType("WHEN_OPERAND");
  IElementType WHERE_CLAUSE = new SqlElementType("WHERE_CLAUSE");
  IElementType WIDTH_BUCKET_BOUND_1 = new SqlElementType("WIDTH_BUCKET_BOUND_1");
  IElementType WIDTH_BUCKET_BOUND_2 = new SqlElementType("WIDTH_BUCKET_BOUND_2");
  IElementType WIDTH_BUCKET_COUNT = new SqlElementType("WIDTH_BUCKET_COUNT");
  IElementType WIDTH_BUCKET_FUNCTION = new SqlElementType("WIDTH_BUCKET_FUNCTION");
  IElementType WIDTH_BUCKET_OPERAND = new SqlElementType("WIDTH_BUCKET_OPERAND");
  IElementType WINDOW_CLAUSE = new SqlElementType("WINDOW_CLAUSE");
  IElementType WINDOW_DEFINITION = new SqlElementType("WINDOW_DEFINITION");
  IElementType WINDOW_DEFINITION_LIST = new SqlElementType("WINDOW_DEFINITION_LIST");
  IElementType WINDOW_FRAME_BETWEEN = new SqlElementType("WINDOW_FRAME_BETWEEN");
  IElementType WINDOW_FRAME_BOUND = new SqlElementType("WINDOW_FRAME_BOUND");
  IElementType WINDOW_FRAME_BOUND_1 = new SqlElementType("WINDOW_FRAME_BOUND_1");
  IElementType WINDOW_FRAME_BOUND_2 = new SqlElementType("WINDOW_FRAME_BOUND_2");
  IElementType WINDOW_FRAME_CLAUSE = new SqlElementType("WINDOW_FRAME_CLAUSE");
  IElementType WINDOW_FRAME_EXCLUSION = new SqlElementType("WINDOW_FRAME_EXCLUSION");
  IElementType WINDOW_FRAME_EXTENT = new SqlElementType("WINDOW_FRAME_EXTENT");
  IElementType WINDOW_FRAME_FOLLOWING = new SqlElementType("WINDOW_FRAME_FOLLOWING");
  IElementType WINDOW_FRAME_PRECEDING = new SqlElementType("WINDOW_FRAME_PRECEDING");
  IElementType WINDOW_FRAME_START = new SqlElementType("WINDOW_FRAME_START");
  IElementType WINDOW_FRAME_UNITS = new SqlElementType("WINDOW_FRAME_UNITS");
  IElementType WINDOW_FUNCTION = new SqlElementType("WINDOW_FUNCTION");
  IElementType WINDOW_FUNCTION_TYPE = new SqlElementType("WINDOW_FUNCTION_TYPE");
  IElementType WINDOW_NAME = new SqlElementType("WINDOW_NAME");
  IElementType WINDOW_NAME_OR_SPECIFICATION = new SqlElementType("WINDOW_NAME_OR_SPECIFICATION");
  IElementType WINDOW_ORDER_CLAUSE = new SqlElementType("WINDOW_ORDER_CLAUSE");
  IElementType WINDOW_PARTITION_CLAUSE = new SqlElementType("WINDOW_PARTITION_CLAUSE");
  IElementType WINDOW_PARTITION_COLUMN_REFERENCE = new SqlElementType("WINDOW_PARTITION_COLUMN_REFERENCE");
  IElementType WINDOW_PARTITION_COLUMN_REFERENCE_LIST = new SqlElementType("WINDOW_PARTITION_COLUMN_REFERENCE_LIST");
  IElementType WINDOW_SPECIFICATION = new SqlElementType("WINDOW_SPECIFICATION");
  IElementType WINDOW_SPECIFICATION_DETAILS = new SqlElementType("WINDOW_SPECIFICATION_DETAILS");
  IElementType WITHIN_GROUP_SPECIFICATION = new SqlElementType("WITHIN_GROUP_SPECIFICATION");
  IElementType WITH_CLAUSE = new SqlElementType("WITH_CLAUSE");
  IElementType WITH_COLUMN_LIST = new SqlElementType("WITH_COLUMN_LIST");
  IElementType WITH_LIST = new SqlElementType("WITH_LIST");
  IElementType WITH_LIST_ELEMENT = new SqlElementType("WITH_LIST_ELEMENT");
  IElementType WITH_OR_WITHOUT_DATA = new SqlElementType("WITH_OR_WITHOUT_DATA");
  IElementType WITH_OR_WITHOUT_TIME_ZONE = new SqlElementType("WITH_OR_WITHOUT_TIME_ZONE");
  IElementType YEARS_VALUE = new SqlElementType("YEARS_VALUE");
  IElementType YEAR_MONTH_LITERAL = new SqlElementType("YEAR_MONTH_LITERAL");

  IElementType A = new SqlTokenType("a");
  IElementType ABS = new SqlTokenType("ABS");
  IElementType ABSOLUTE = new SqlTokenType("ABSOLUTE");
  //IElementType ACTION = new SqlTokenType("ACTION");
  IElementType ADD = new SqlTokenType("ADD");
  IElementType ADMIN = new SqlTokenType("ADMIN");
  IElementType AFTER = new SqlTokenType("AFTER");
  //IElementType ALL = new SqlTokenType("ALL");
  IElementType ALLOCATE = new SqlTokenType("ALLOCATE");
  IElementType ALTER = new SqlTokenType("ALTER");
  IElementType ALWAYS = new SqlTokenType("ALWAYS");
  IElementType AND = new SqlTokenType("AND");
  IElementType ANY = new SqlTokenType("ANY");
  IElementType ARE = new SqlTokenType("ARE");
  IElementType ARRAY = new SqlTokenType("ARRAY");
  IElementType AS = new SqlTokenType("AS");
  IElementType ASC = new SqlTokenType("ASC");
  IElementType ASENSITIVE = new SqlTokenType("ASENSITIVE");
  IElementType ASSERTION = new SqlTokenType("ASSERTION");
  IElementType ASSIGNMENT = new SqlTokenType("ASSIGNMENT");
  IElementType ASYMMETRIC = new SqlTokenType("ASYMMETRIC");
  IElementType AT = new SqlTokenType("AT");
  IElementType ATOMIC = new SqlTokenType("ATOMIC");
  IElementType ATTRIBUTE = new SqlTokenType("ATTRIBUTE");
  IElementType ATTRIBUTES = new SqlTokenType("ATTRIBUTES");
  IElementType AUTHORIZATION = new SqlTokenType("AUTHORIZATION");
  IElementType AUTO = new SqlTokenType("auto");
  IElementType AVG = new SqlTokenType("AVG");
  IElementType B = new SqlTokenType("b");
  IElementType BEFORE = new SqlTokenType("BEFORE");
  IElementType BEGIN = new SqlTokenType("BEGIN");
  IElementType BERNOULLI = new SqlTokenType("BERNOULLI");
  IElementType BETWEEN = new SqlTokenType("BETWEEN");
  IElementType BIGINT = new SqlTokenType("BIGINT");
  IElementType BINARY = new SqlTokenType("BINARY");
  IElementType BLOB = new SqlTokenType("BLOB");
  IElementType BOOLEAN = new SqlTokenType("BOOLEAN");
  IElementType BOTH = new SqlTokenType("BOTH");
  IElementType BREADTH = new SqlTokenType("BREADTH");
  IElementType BY = new SqlTokenType("BY");
  IElementType C = new SqlTokenType("c");
  IElementType CALL = new SqlTokenType("CALL");
  IElementType CALLED = new SqlTokenType("CALLED");
  IElementType CARDINALITY = new SqlTokenType("CARDINALITY");
  IElementType CASCADE = new SqlTokenType("CASCADE");
  IElementType CASCADED = new SqlTokenType("CASCADED");
  IElementType CASE = new SqlTokenType("CASE");
  IElementType CAST = new SqlTokenType("CAST");
  IElementType CATALOG = new SqlTokenType("CATALOG");
  //IElementType CATALOG_NAME = new SqlTokenType("CATALOG_NAME");
  IElementType CEIL = new SqlTokenType("CEIL");
  IElementType CEILING = new SqlTokenType("CEILING");
  IElementType CHAIN = new SqlTokenType("CHAIN");
  IElementType CHAR = new SqlTokenType("CHAR");
  IElementType CHARACTER = new SqlTokenType("CHARACTER");
  IElementType CHARACTERISTICS = new SqlTokenType("CHARACTERISTICS");
  IElementType CHARACTERS = new SqlTokenType("CHARACTERS");
  IElementType CHARACTER_LENGTH = new SqlTokenType("CHARACTER_LENGTH");
  IElementType CHARACTER_SET_CATALOG = new SqlTokenType("CHARACTER_SET_CATALOG");
  //IElementType CHARACTER_SET_NAME = new SqlTokenType("CHARACTER_SET_NAME");
  IElementType CHARACTER_SET_SCHEMA = new SqlTokenType("CHARACTER_SET_SCHEMA");
  IElementType CHAR_LENGTH = new SqlTokenType("CHAR_LENGTH");
  IElementType CHECK = new SqlTokenType("CHECK");
  IElementType CHECKED = new SqlTokenType("CHECKED");
  IElementType CLASS_ORIGIN = new SqlTokenType("CLASS_ORIGIN");
  IElementType CLOB = new SqlTokenType("CLOB");
  IElementType CLOSE = new SqlTokenType("CLOSE");
  IElementType COALESCE = new SqlTokenType("COALESCE");
  IElementType CODE_UNITS = new SqlTokenType("CODE_UNITS");
  IElementType COLLATE = new SqlTokenType("COLLATE");
  IElementType COLLATION = new SqlTokenType("COLLATION");
  IElementType COLLATION_CATALOG = new SqlTokenType("COLLATION_CATALOG");
  //IElementType COLLATION_NAME = new SqlTokenType("COLLATION_NAME");
  IElementType COLLATION_SCHEMA = new SqlTokenType("COLLATION_SCHEMA");
  IElementType COLLECT = new SqlTokenType("COLLECT");
  IElementType COLUMN = new SqlTokenType("COLUMN");
  //IElementType COLUMN_NAME = new SqlTokenType("COLUMN_NAME");
  IElementType COMMAND_FUNCTION = new SqlTokenType("COMMAND_FUNCTION");
  IElementType COMMAND_FUNCTION_CODE = new SqlTokenType("COMMAND_FUNCTION_CODE");
  IElementType COMMIT = new SqlTokenType("COMMIT");
  IElementType COMMITTED = new SqlTokenType("COMMITTED");
  //IElementType CONDITION = new SqlTokenType("CONDITION");
  //IElementType CONDITION_NUMBER = new SqlTokenType("CONDITION_NUMBER");
  IElementType CONNECT = new SqlTokenType("CONNECT");
  IElementType CONNECTION = new SqlTokenType("CONNECTION");
  //IElementType CONNECTION_NAME = new SqlTokenType("CONNECTION_NAME");
  IElementType CONST = new SqlTokenType("const");
  IElementType CONSTRAINT = new SqlTokenType("CONSTRAINT");
  IElementType CONSTRAINTS = new SqlTokenType("CONSTRAINTS");
  IElementType CONSTRAINT_CATALOG = new SqlTokenType("CONSTRAINT_CATALOG");
  //IElementType CONSTRAINT_NAME = new SqlTokenType("CONSTRAINT_NAME");
  IElementType CONSTRAINT_SCHEMA = new SqlTokenType("CONSTRAINT_SCHEMA");
  IElementType CONSTRUCTOR = new SqlTokenType("CONSTRUCTOR");
  IElementType CONSTRUCTORS = new SqlTokenType("CONSTRUCTORS");
  IElementType CONTAINS = new SqlTokenType("CONTAINS");
  IElementType CONTINUE = new SqlTokenType("CONTINUE");
  IElementType CONVERT = new SqlTokenType("CONVERT");
  IElementType CORR = new SqlTokenType("CORR");
  IElementType CORRESPONDING = new SqlTokenType("CORRESPONDING");
  IElementType COUNT = new SqlTokenType("COUNT");
  IElementType COVAR_POP = new SqlTokenType("COVAR_POP");
  IElementType COVAR_SAMP = new SqlTokenType("COVAR_SAMP");
  IElementType CREATE = new SqlTokenType("CREATE");
  IElementType CROSS = new SqlTokenType("CROSS");
  IElementType CUBE = new SqlTokenType("CUBE");
  IElementType CUME_DIST = new SqlTokenType("CUME_DIST");
  IElementType CURRENT = new SqlTokenType("CURRENT");
  IElementType CURRENT_COLLATION = new SqlTokenType("CURRENT_COLLATION");
  IElementType CURRENT_DATE = new SqlTokenType("CURRENT_DATE");
  IElementType CURRENT_DEFAULT_TRANSFORM_GROUP = new SqlTokenType("CURRENT_DEFAULT_TRANSFORM_GROUP");
  IElementType CURRENT_PATH = new SqlTokenType("CURRENT_PATH");
  IElementType CURRENT_ROLE = new SqlTokenType("CURRENT_ROLE");
  IElementType CURRENT_TIME = new SqlTokenType("CURRENT_TIME");
  IElementType CURRENT_TIMESTAMP = new SqlTokenType("CURRENT_TIMESTAMP");
  IElementType CURRENT_TRANSFORM_GROUP_FOR_TYPE = new SqlTokenType("CURRENT_TRANSFORM_GROUP_FOR_TYPE");
  IElementType CURRENT_USER = new SqlTokenType("CURRENT_USER");
  IElementType CURSOR = new SqlTokenType("CURSOR");
  //IElementType CURSOR_NAME = new SqlTokenType("CURSOR_NAME");
  IElementType CYCLE = new SqlTokenType("CYCLE");
  IElementType D = new SqlTokenType("d");
  IElementType DATA = new SqlTokenType("DATA");
  IElementType DATE = new SqlTokenType("DATE");
  IElementType DATETIME_INTERVAL_CODE = new SqlTokenType("DATETIME_INTERVAL_CODE");
  IElementType DATETIME_INTERVAL_PRECISION = new SqlTokenType("DATETIME_INTERVAL_PRECISION");
  IElementType DAY = new SqlTokenType("DAY");
  IElementType DEALLOCATE = new SqlTokenType("DEALLOCATE");
  IElementType DEC = new SqlTokenType("DEC");
  IElementType DECIMAL = new SqlTokenType("DECIMAL");
  IElementType DECLARE = new SqlTokenType("DECLARE");
  IElementType DEFAULT = new SqlTokenType("DEFAULT");
  IElementType DEFAULTS = new SqlTokenType("DEFAULTS");
  IElementType DEFERRABLE = new SqlTokenType("DEFERRABLE");
  IElementType DEFERRED = new SqlTokenType("DEFERRED");
  IElementType DEFINED = new SqlTokenType("DEFINED");
  IElementType DEFINER = new SqlTokenType("DEFINER");
  IElementType DEGREE = new SqlTokenType("DEGREE");
  IElementType DELETE = new SqlTokenType("DELETE");
  IElementType DENSE_RANK = new SqlTokenType("DENSE_RANK");
  IElementType DEPTH = new SqlTokenType("DEPTH");
  IElementType DEREF = new SqlTokenType("DEREF");
  IElementType DERIVED = new SqlTokenType("DERIVED");
  IElementType DESC = new SqlTokenType("DESC");
  IElementType DESCRIBE = new SqlTokenType("DESCRIBE");
  IElementType DESCRIPTOR = new SqlTokenType("DESCRIPTOR");
  IElementType DETERMINISTIC = new SqlTokenType("DETERMINISTIC");
  IElementType DIAGNOSTICS = new SqlTokenType("DIAGNOSTICS");
  IElementType DISCONNECT = new SqlTokenType("DISCONNECT");
  IElementType DISPATCH = new SqlTokenType("DISPATCH");
  IElementType DISTINCT = new SqlTokenType("DISTINCT");
  IElementType DOMAIN = new SqlTokenType("DOMAIN");
  IElementType DOUBLE = new SqlTokenType("DOUBLE");
  IElementType DROP = new SqlTokenType("DROP");
  IElementType DYNAMIC = new SqlTokenType("DYNAMIC");
  IElementType DYNAMIC_FUNCTION = new SqlTokenType("DYNAMIC_FUNCTION");
  IElementType DYNAMIC_FUNCTION_CODE = new SqlTokenType("DYNAMIC_FUNCTION_CODE");
  IElementType E = new SqlTokenType("e");
  IElementType EACH = new SqlTokenType("EACH");
  IElementType ELEMENT = new SqlTokenType("ELEMENT");
  IElementType ELSE = new SqlTokenType("ELSE");
  IElementType END = new SqlTokenType("END");
  IElementType END_EXEC = new SqlTokenType("END-EXEC");
  IElementType EQUALS = new SqlTokenType("EQUALS");
  IElementType ESCAPE = new SqlTokenType("ESCAPE");
  IElementType EVERY = new SqlTokenType("EVERY");
  IElementType EXCEPT = new SqlTokenType("EXCEPT");
  IElementType EXCEPTION = new SqlTokenType("EXCEPTION");
  IElementType EXCLUDE = new SqlTokenType("EXCLUDE");
  IElementType EXCLUDING = new SqlTokenType("EXCLUDING");
  IElementType EXEC = new SqlTokenType("EXEC");
  IElementType EXECUTE = new SqlTokenType("EXECUTE");
  IElementType EXISTS = new SqlTokenType("EXISTS");
  IElementType EXP = new SqlTokenType("EXP");
  IElementType EXTERN = new SqlTokenType("extern");
  IElementType EXTERNAL = new SqlTokenType("EXTERNAL");
  IElementType EXTRACT = new SqlTokenType("EXTRACT");
  IElementType F = new SqlTokenType("f");
  IElementType FALSE = new SqlTokenType("FALSE");
  IElementType FETCH = new SqlTokenType("FETCH");
  IElementType FILTER = new SqlTokenType("FILTER");
  IElementType FINAL = new SqlTokenType("FINAL");
  IElementType FIRST = new SqlTokenType("FIRST");
  IElementType FLOAT = new SqlTokenType("FLOAT");
  IElementType FLOOR = new SqlTokenType("FLOOR");
  IElementType FOLLOWING = new SqlTokenType("FOLLOWING");
  IElementType FOR = new SqlTokenType("FOR");
  IElementType FOREIGN = new SqlTokenType("FOREIGN");
  IElementType FORTRAN = new SqlTokenType("FORTRAN");
  IElementType FOUND = new SqlTokenType("FOUND");
  IElementType FREE = new SqlTokenType("FREE");
  IElementType FROM = new SqlTokenType("FROM");
  IElementType FULL = new SqlTokenType("FULL");
  IElementType FUNCTION = new SqlTokenType("FUNCTION");
  IElementType FUSION = new SqlTokenType("FUSION");
  IElementType G = new SqlTokenType("g");
  IElementType GENERAL = new SqlTokenType("GENERAL");
  IElementType GENERATED = new SqlTokenType("GENERATED");
  IElementType GET = new SqlTokenType("GET");
  IElementType GLOBAL = new SqlTokenType("GLOBAL");
  IElementType GO = new SqlTokenType("GO");
  IElementType GOTO = new SqlTokenType("GOTO");
  IElementType GRANT = new SqlTokenType("GRANT");
  IElementType GRANTED = new SqlTokenType("GRANTED");
  IElementType GROUP = new SqlTokenType("GROUP");
  IElementType GROUPING = new SqlTokenType("GROUPING");
  IElementType H = new SqlTokenType("H");
  IElementType HAVING = new SqlTokenType("HAVING");
  IElementType HIERARCHY = new SqlTokenType("HIERARCHY");
  IElementType HOLD = new SqlTokenType("HOLD");
  IElementType HOUR = new SqlTokenType("HOUR");
  IElementType I = new SqlTokenType("I");
  IElementType IDENTITY = new SqlTokenType("IDENTITY");
  IElementType IMMEDIATE = new SqlTokenType("IMMEDIATE");
  IElementType IMPLEMENTATION = new SqlTokenType("IMPLEMENTATION");
  IElementType IN = new SqlTokenType("IN");
  IElementType INCLUDING = new SqlTokenType("INCLUDING");
  IElementType INCREMENT = new SqlTokenType("INCREMENT");
  IElementType INDICATOR = new SqlTokenType("INDICATOR");
  IElementType INITIALLY = new SqlTokenType("INITIALLY");
  IElementType INNER = new SqlTokenType("INNER");
  IElementType INOUT = new SqlTokenType("INOUT");
  IElementType INPUT = new SqlTokenType("INPUT");
  IElementType INSENSITIVE = new SqlTokenType("INSENSITIVE");
  IElementType INSERT = new SqlTokenType("INSERT");
  IElementType INSTANCE = new SqlTokenType("INSTANCE");
  IElementType INSTANTIABLE = new SqlTokenType("INSTANTIABLE");
  IElementType INT = new SqlTokenType("INT");
  IElementType INTEGER = new SqlTokenType("INTEGER");
  IElementType INTERSECT = new SqlTokenType("INTERSECT");
  IElementType INTERSECTION = new SqlTokenType("INTERSECTION");
  IElementType INTERVAL = new SqlTokenType("INTERVAL");
  IElementType INTO = new SqlTokenType("INTO");
  IElementType INVOKER = new SqlTokenType("INVOKER");
  IElementType IS = new SqlTokenType("IS");
  IElementType ISOLATION = new SqlTokenType("ISOLATION");
  IElementType J = new SqlTokenType("J");
  IElementType JOIN = new SqlTokenType("JOIN");
  IElementType K = new SqlTokenType("k");
  IElementType KEY = new SqlTokenType("KEY");
  IElementType KEY_MEMBER = new SqlTokenType("KEY_MEMBER");
  IElementType KEY_TYPE = new SqlTokenType("KEY_TYPE");
  IElementType L = new SqlTokenType("L");
  IElementType LANGUAGE = new SqlTokenType("LANGUAGE");
  IElementType LARGE = new SqlTokenType("LARGE");
  IElementType LAST = new SqlTokenType("LAST");
  IElementType LATERAL = new SqlTokenType("LATERAL");
  IElementType LEADING = new SqlTokenType("LEADING");
  IElementType LEFT = new SqlTokenType("LEFT");
  //IElementType LENGTH = new SqlTokenType("LENGTH");
  IElementType LEVEL = new SqlTokenType("LEVEL");
  IElementType LIKE = new SqlTokenType("LIKE");
  IElementType LN = new SqlTokenType("LN");
  IElementType LOCAL = new SqlTokenType("LOCAL");
  IElementType LOCALTIME = new SqlTokenType("LOCALTIME");
  IElementType LOCALTIMESTAMP = new SqlTokenType("LOCALTIMESTAMP");
  IElementType LOCATOR = new SqlTokenType("LOCATOR");
  IElementType LONG = new SqlTokenType("long");
  IElementType LOWER = new SqlTokenType("LOWER");
  IElementType M = new SqlTokenType("m");
  IElementType MAP = new SqlTokenType("MAP");
  IElementType MATCH = new SqlTokenType("MATCH");
  IElementType MATCHED = new SqlTokenType("MATCHED");
  IElementType MAX = new SqlTokenType("MAX");
  IElementType MAXVALUE = new SqlTokenType("MAXVALUE");
  //IElementType MEMBER = new SqlTokenType("MEMBER");
  IElementType MERGE = new SqlTokenType("MERGE");
  IElementType MESSAGE_LENGTH = new SqlTokenType("MESSAGE_LENGTH");
  IElementType MESSAGE_OCTET_LENGTH = new SqlTokenType("MESSAGE_OCTET_LENGTH");
  IElementType MESSAGE_TEXT = new SqlTokenType("MESSAGE_TEXT");
  IElementType METHOD = new SqlTokenType("METHOD");
  IElementType MIN = new SqlTokenType("MIN");
  IElementType MINUTE = new SqlTokenType("MINUTE");
  IElementType MINVALUE = new SqlTokenType("MINVALUE");
  IElementType MOD = new SqlTokenType("MOD");
  IElementType MODIFIES = new SqlTokenType("MODIFIES");
  IElementType MODULE = new SqlTokenType("MODULE");
  IElementType MONTH = new SqlTokenType("MONTH");
  IElementType MORE = new SqlTokenType("MORE");
  IElementType MULTISET = new SqlTokenType("MULTISET");
  IElementType MUMPS = new SqlTokenType("MUMPS");
  IElementType N = new SqlTokenType("n");
  IElementType NAME = new SqlTokenType("NAME");
  IElementType NAMES = new SqlTokenType("NAMES");
  IElementType NATIONAL = new SqlTokenType("NATIONAL");
  IElementType NATURAL = new SqlTokenType("NATURAL");
  IElementType NCHAR = new SqlTokenType("NCHAR");
  IElementType NCLOB = new SqlTokenType("NCLOB");
  IElementType NESTING = new SqlTokenType("NESTING");
  IElementType NEW = new SqlTokenType("NEW");
  IElementType NEXT = new SqlTokenType("NEXT");
  IElementType NO = new SqlTokenType("NO");
  IElementType NONE = new SqlTokenType("NONE");
  IElementType NORMALIZE = new SqlTokenType("NORMALIZE");
  IElementType NORMALIZED = new SqlTokenType("NORMALIZED");
  IElementType NOT = new SqlTokenType("NOT");
  IElementType NULL = new SqlTokenType("NULL");
  IElementType NULLABLE = new SqlTokenType("NULLABLE");
  IElementType NULLIF = new SqlTokenType("NULLIF");
  IElementType NULLS = new SqlTokenType("NULLS");
  IElementType NUMBER = new SqlTokenType("NUMBER");
  IElementType NUMERIC = new SqlTokenType("NUMERIC");
  IElementType O = new SqlTokenType("O");
  IElementType OBJECT = new SqlTokenType("OBJECT");
  IElementType OCTETS = new SqlTokenType("OCTETS");
  IElementType OCTET_LENGTH = new SqlTokenType("OCTET_LENGTH");
  IElementType OF = new SqlTokenType("OF");
  IElementType OLD = new SqlTokenType("OLD");
  IElementType ON = new SqlTokenType("ON");
  IElementType ONLY = new SqlTokenType("ONLY");
  IElementType OPEN = new SqlTokenType("OPEN");
  IElementType OPTION = new SqlTokenType("OPTION");
  IElementType OPTIONS = new SqlTokenType("OPTIONS");
  IElementType OR = new SqlTokenType("OR");
  IElementType ORDER = new SqlTokenType("ORDER");
  IElementType ORDERING = new SqlTokenType("ORDERING");
  IElementType ORDINALITY = new SqlTokenType("ORDINALITY");
  IElementType OTHERS = new SqlTokenType("OTHERS");
  IElementType OUT = new SqlTokenType("OUT");
  IElementType OUTER = new SqlTokenType("OUTER");
  IElementType OUTPUT = new SqlTokenType("OUTPUT");
  IElementType OVER = new SqlTokenType("OVER");
  IElementType OVERLAPS = new SqlTokenType("OVERLAPS");
  IElementType OVERLAY = new SqlTokenType("OVERLAY");
  IElementType OVERRIDING = new SqlTokenType("OVERRIDING");
  IElementType P = new SqlTokenType("P");
  IElementType PAD = new SqlTokenType("PAD");
  IElementType PARAMETER = new SqlTokenType("PARAMETER");
  //IElementType PARAMETER_MODE = new SqlTokenType("PARAMETER_MODE");
  IElementType PARAMETER_NAME = new SqlTokenType("PARAMETER_NAME");
  IElementType PARAMETER_ORDINAL_POSITION = new SqlTokenType("PARAMETER_ORDINAL_POSITION");
  IElementType PARAMETER_SPECIFIC_CATALOG = new SqlTokenType("PARAMETER_SPECIFIC_CATALOG");
  IElementType PARAMETER_SPECIFIC_NAME = new SqlTokenType("PARAMETER_SPECIFIC_NAME");
  IElementType PARAMETER_SPECIFIC_SCHEMA = new SqlTokenType("PARAMETER_SPECIFIC_SCHEMA");
  IElementType PARTIAL = new SqlTokenType("PARTIAL");
  IElementType PARTITION = new SqlTokenType("PARTITION");
  IElementType PASCAL = new SqlTokenType("PASCAL");
  IElementType PATH = new SqlTokenType("PATH");
  IElementType PERCENTILE_CONT = new SqlTokenType("PERCENTILE_CONT");
  IElementType PERCENTILE_DISC = new SqlTokenType("PERCENTILE_DISC");
  IElementType PERCENT_RANK = new SqlTokenType("PERCENT_RANK");
  IElementType PLACING = new SqlTokenType("PLACING");
  IElementType PLI = new SqlTokenType("PLI");
  IElementType POSITION = new SqlTokenType("POSITION");
  IElementType POWER = new SqlTokenType("POWER");
  IElementType PRECEDING = new SqlTokenType("PRECEDING");
  //IElementType PRECISION = new SqlTokenType("PRECISION");
  IElementType PREPARE = new SqlTokenType("PREPARE");
  IElementType PRESERVE = new SqlTokenType("PRESERVE");
  IElementType PRIMARY = new SqlTokenType("PRIMARY");
  IElementType PRIOR = new SqlTokenType("PRIOR");
  //IElementType PRIVILEGES = new SqlTokenType("PRIVILEGES");
  IElementType PROCEDURE = new SqlTokenType("PROCEDURE");
  IElementType PUBLIC = new SqlTokenType("PUBLIC");
  IElementType Q = new SqlTokenType("Q");
  IElementType R = new SqlTokenType("R");
  IElementType RANGE = new SqlTokenType("RANGE");
  IElementType RANK = new SqlTokenType("RANK");
  IElementType READ = new SqlTokenType("READ");
  IElementType READS = new SqlTokenType("READS");
  IElementType REAL = new SqlTokenType("REAL");
  IElementType RECURSIVE = new SqlTokenType("RECURSIVE");
  IElementType REF = new SqlTokenType("REF");
  IElementType REFERENCES = new SqlTokenType("REFERENCES");
  IElementType REFERENCING = new SqlTokenType("REFERENCING");
  IElementType REGR_AVGX = new SqlTokenType("REGR_AVGX");
  IElementType REGR_AVGY = new SqlTokenType("REGR_AVGY");
  IElementType REGR_COUNT = new SqlTokenType("REGR_COUNT");
  IElementType REGR_INTERCEPT = new SqlTokenType("REGR_INTERCEPT");
  IElementType REGR_R2 = new SqlTokenType("REGR_R2");
  IElementType REGR_SLOPE = new SqlTokenType("REGR_SLOPE");
  IElementType REGR_SXX = new SqlTokenType("REGR_SXX");
  IElementType REGR_SXY = new SqlTokenType("REGR_SXY");
  IElementType REGR_SYY = new SqlTokenType("REGR_SYY");
  IElementType RELATIVE = new SqlTokenType("RELATIVE");
  IElementType RELEASE = new SqlTokenType("RELEASE");
  IElementType REPEATABLE = new SqlTokenType("REPEATABLE");
  IElementType RESTART = new SqlTokenType("RESTART");
  IElementType RESTRICT = new SqlTokenType("RESTRICT");
  //IElementType RESULT = new SqlTokenType("RESULT");
  IElementType RETURN = new SqlTokenType("RETURN");
  IElementType RETURNED_CARDINALITY = new SqlTokenType("RETURNED_CARDINALITY");
  IElementType RETURNED_LENGTH = new SqlTokenType("RETURNED_LENGTH");
  IElementType RETURNED_OCTET_LENGTH = new SqlTokenType("RETURNED_OCTET_LENGTH");
  IElementType RETURNED_SQLSTATE = new SqlTokenType("RETURNED_SQLSTATE");
  IElementType RETURNS = new SqlTokenType("RETURNS");
  IElementType REVOKE = new SqlTokenType("REVOKE");
  IElementType RIGHT = new SqlTokenType("RIGHT");
  IElementType ROLE = new SqlTokenType("ROLE");
  IElementType ROLLBACK = new SqlTokenType("ROLLBACK");
  IElementType ROLLUP = new SqlTokenType("ROLLUP");
  IElementType ROUTINE = new SqlTokenType("ROUTINE");
  IElementType ROUTINE_CATALOG = new SqlTokenType("ROUTINE_CATALOG");
  //IElementType ROUTINE_NAME = new SqlTokenType("ROUTINE_NAME");
  IElementType ROUTINE_SCHEMA = new SqlTokenType("ROUTINE_SCHEMA");
  IElementType ROW = new SqlTokenType("ROW");
  IElementType ROWS = new SqlTokenType("ROWS");
  IElementType ROW_COUNT = new SqlTokenType("ROW_COUNT");
  IElementType ROW_NUMBER = new SqlTokenType("ROW_NUMBER");
  IElementType S = new SqlTokenType("S");
  IElementType SAVEPOINT = new SqlTokenType("SAVEPOINT");
  //IElementType SCALE = new SqlTokenType("SCALE");
  IElementType SCHEMA = new SqlTokenType("SCHEMA");
  //IElementType SCHEMA_NAME = new SqlTokenType("SCHEMA_NAME");
  IElementType SCOPE = new SqlTokenType("SCOPE");
  IElementType SCOPE_CATALOG = new SqlTokenType("SCOPE_CATALOG");
  IElementType SCOPE_NAME = new SqlTokenType("SCOPE_NAME");
  IElementType SCOPE_SCHEMA = new SqlTokenType("SCOPE_SCHEMA");
  IElementType SCROLL = new SqlTokenType("SCROLL");
  IElementType SEARCH = new SqlTokenType("SEARCH");
  IElementType SECOND = new SqlTokenType("SECOND");
  IElementType SECTION = new SqlTokenType("SECTION");
  IElementType SECURITY = new SqlTokenType("SECURITY");
  IElementType SELECT = new SqlTokenType("SELECT");
  IElementType SELF = new SqlTokenType("SELF");
  IElementType SENSITIVE = new SqlTokenType("SENSITIVE");
  IElementType SEQUENCE = new SqlTokenType("SEQUENCE");
  IElementType SERIALIZABLE = new SqlTokenType("SERIALIZABLE");
  IElementType SERVER_NAME = new SqlTokenType("SERVER_NAME");
  IElementType SESSION = new SqlTokenType("SESSION");
  IElementType SESSION_USER = new SqlTokenType("SESSION_USER");
  IElementType SET = new SqlTokenType("SET");
  IElementType SETS = new SqlTokenType("SETS");
  IElementType SHORT = new SqlTokenType("short");
  IElementType SIMILAR = new SqlTokenType("SIMILAR");
  IElementType SIMPLE = new SqlTokenType("SIMPLE");
  IElementType SIZE = new SqlTokenType("SIZE");
  IElementType SMALLINT = new SqlTokenType("SMALLINT");
  //IElementType SOME = new SqlTokenType("SOME");
  IElementType SOURCE = new SqlTokenType("SOURCE");
  //IElementType SPACE = new SqlTokenType("SPACE");
  IElementType SPECIFIC = new SqlTokenType("SPECIFIC");
  IElementType SPECIFICTYPE = new SqlTokenType("SPECIFICTYPE");
  //IElementType SPECIFIC_NAME = new SqlTokenType("SPECIFIC_NAME");
  IElementType SQL = new SqlTokenType("SQL");
  IElementType SQLEXCEPTION = new SqlTokenType("SQLEXCEPTION");
  IElementType SQLSTATE = new SqlTokenType("SQLSTATE");
  IElementType SQLWARNING = new SqlTokenType("SQLWARNING");
  IElementType SQRT = new SqlTokenType("SQRT");
  IElementType START = new SqlTokenType("START");
  IElementType STATE = new SqlTokenType("STATE");
  IElementType STATEMENT = new SqlTokenType("STATEMENT");
  IElementType STATIC = new SqlTokenType("STATIC");
  IElementType STDDEV_POP = new SqlTokenType("STDDEV_POP");
  IElementType STDDEV_SAMP = new SqlTokenType("STDDEV_SAMP");
  IElementType STRUCTURE = new SqlTokenType("STRUCTURE");
  IElementType STYLE = new SqlTokenType("STYLE");
  IElementType SUBCLASS_ORIGIN = new SqlTokenType("SUBCLASS_ORIGIN");
  IElementType SUBMULTISET = new SqlTokenType("SUBMULTISET");
  IElementType SUBSTRING = new SqlTokenType("SUBSTRING");
  IElementType SUM = new SqlTokenType("SUM");
  IElementType SYMMETRIC = new SqlTokenType("SYMMETRIC");
  IElementType SYSTEM = new SqlTokenType("SYSTEM");
  IElementType SYSTEM_USER = new SqlTokenType("SYSTEM_USER");
  IElementType T = new SqlTokenType("T");
  IElementType TABLE = new SqlTokenType("TABLE");
  IElementType TABLESAMPLE = new SqlTokenType("TABLESAMPLE");
  //IElementType TABLE_NAME = new SqlTokenType("TABLE_NAME");
  IElementType TEMPORARY = new SqlTokenType("TEMPORARY");
  IElementType THEN = new SqlTokenType("THEN");
  IElementType TIES = new SqlTokenType("TIES");
  IElementType TIME = new SqlTokenType("TIME");
  IElementType TIMESTAMP = new SqlTokenType("TIMESTAMP");
  IElementType TIMEZONE_HOUR = new SqlTokenType("TIMEZONE_HOUR");
  IElementType TIMEZONE_MINUTE = new SqlTokenType("TIMEZONE_MINUTE");
  IElementType TO = new SqlTokenType("TO");
  IElementType TOP_LEVEL_COUNT = new SqlTokenType("TOP_LEVEL_COUNT");
  IElementType TRAILING = new SqlTokenType("TRAILING");
  IElementType TRANSACTION = new SqlTokenType("TRANSACTION");
  IElementType TRANSACTIONS_COMMITTED = new SqlTokenType("TRANSACTIONS_COMMITTED");
  IElementType TRANSACTIONS_ROLLED_BACK = new SqlTokenType("TRANSACTIONS_ROLLED_BACK");
  IElementType TRANSACTION_ACTIVE = new SqlTokenType("TRANSACTION_ACTIVE");
  IElementType TRANSFORM = new SqlTokenType("TRANSFORM");
  IElementType TRANSFORMS = new SqlTokenType("TRANSFORMS");
  IElementType TRANSLATE = new SqlTokenType("TRANSLATE");
  IElementType TRANSLATION = new SqlTokenType("TRANSLATION");
  IElementType TREAT = new SqlTokenType("TREAT");
  IElementType TRIGGER = new SqlTokenType("TRIGGER");
  IElementType TRIGGER_CATALOG = new SqlTokenType("TRIGGER_CATALOG");
  //IElementType TRIGGER_NAME = new SqlTokenType("TRIGGER_NAME");
  IElementType TRIGGER_SCHEMA = new SqlTokenType("TRIGGER_SCHEMA");
  IElementType TRIM = new SqlTokenType("TRIM");
  IElementType TRUE = new SqlTokenType("TRUE");
  IElementType TYPE = new SqlTokenType("TYPE");
  IElementType U = new SqlTokenType("u");
  IElementType UESCAPE = new SqlTokenType("UESCAPE");
  IElementType UNBOUNDED = new SqlTokenType("UNBOUNDED");
  IElementType UNCOMMITTED = new SqlTokenType("UNCOMMITTED");
  IElementType UNDER = new SqlTokenType("UNDER");
  IElementType UNION = new SqlTokenType("UNION");
  IElementType UNIQUE = new SqlTokenType("UNIQUE");
  IElementType UNKNOWN = new SqlTokenType("UNKNOWN");
  IElementType UNNAMED = new SqlTokenType("UNNAMED");
  IElementType UNNEST = new SqlTokenType("UNNEST");
  IElementType UNSIGNED = new SqlTokenType("unsigned");
  IElementType UPDATE = new SqlTokenType("UPDATE");
  IElementType UPPER = new SqlTokenType("UPPER");
  IElementType USAGE = new SqlTokenType("USAGE");
  IElementType USER = new SqlTokenType("USER");
  IElementType USER_DEFINED_TYPE_CATALOG = new SqlTokenType("USER_DEFINED_TYPE_CATALOG");
  IElementType USER_DEFINED_TYPE_CODE = new SqlTokenType("USER_DEFINED_TYPE_CODE");
  //IElementType USER_DEFINED_TYPE_NAME = new SqlTokenType("USER_DEFINED_TYPE_NAME");
  IElementType USER_DEFINED_TYPE_SCHEMA = new SqlTokenType("USER_DEFINED_TYPE_SCHEMA");
  IElementType USING = new SqlTokenType("USING");
  IElementType V = new SqlTokenType("V");
  IElementType VALUE = new SqlTokenType("VALUE");
  IElementType VALUES = new SqlTokenType("VALUES");
  IElementType VARCHAR = new SqlTokenType("VARCHAR");
  IElementType VARYING = new SqlTokenType("VARYING");
  IElementType VAR_POP = new SqlTokenType("VAR_POP");
  IElementType VAR_SAMP = new SqlTokenType("VAR_SAMP");
  IElementType VERTICAL_BAR_0_0 = new SqlTokenType("vertical_bar_0_0");
  IElementType VERTICAL_BAR_1_0 = new SqlTokenType("vertical_bar_1_0");
  IElementType VIEW = new SqlTokenType("VIEW");
  IElementType VOLATILE = new SqlTokenType("volatile");
  IElementType W = new SqlTokenType("W");
  IElementType WHEN = new SqlTokenType("WHEN");
  IElementType WHENEVER = new SqlTokenType("WHENEVER");
  IElementType WHERE = new SqlTokenType("WHERE");
  IElementType WIDTH_BUCKET = new SqlTokenType("WIDTH_BUCKET");
  IElementType WINDOW = new SqlTokenType("WINDOW");
  IElementType WITH = new SqlTokenType("WITH");
  IElementType WITHIN = new SqlTokenType("WITHIN");
  IElementType WITHOUT = new SqlTokenType("WITHOUT");
  IElementType WORK = new SqlTokenType("WORK");
  IElementType WRITE = new SqlTokenType("WRITE");
  IElementType X = new SqlTokenType("x");
  IElementType Y = new SqlTokenType("Y");
  IElementType YEAR = new SqlTokenType("YEAR");
  IElementType Z = new SqlTokenType("Z");
  IElementType ZONE = new SqlTokenType("ZONE");
  IElementType _ALL_FIELDS_COLUMN_NAME_LIST_ = new SqlTokenType("<all fields column name list>");
  IElementType _AMPERSAND_ = new SqlTokenType("<ampersand>");
  IElementType _ASTERISKED_IDENTIFIER_CHAIN_ = new SqlTokenType("<asterisked identifier chain>");
  IElementType _ASTERISK_ = new SqlTokenType("<asterisk>");
  IElementType _BASIC_SEQUENCE_GENERATOR_OPTION_ = new SqlTokenType("<basic sequence generator option>");
  IElementType _BIT_STRING_LITERAL_ = new SqlTokenType("<bit string literal>");
  IElementType _BOOLEAN_FACTOR_ = new SqlTokenType("<boolean factor>");
  IElementType _BOOLEAN_TERM_ = new SqlTokenType("<boolean term>");
  IElementType _BOOLEAN_VALUE_EXPRESSION_ = new SqlTokenType("<boolean value expression>");
  IElementType _CATALOG_NAME_ = new SqlTokenType("<catalog name>");
  IElementType _CHARACTER_SET_NAME_ = new SqlTokenType("<character set name>");
  IElementType _CHARACTER_SET_SPECIFICATION_ = new SqlTokenType("<character set specification>");
  IElementType _CHARACTER_SET_SPECIFICATION_LIST_ = new SqlTokenType("<character set specification list>");
  IElementType _CHARACTER_SPECIFIER_ = new SqlTokenType("<character specifier>");
  IElementType _CHARACTER_STRING_LITERAL_ = new SqlTokenType("<character string literal>");
  IElementType _CHAR_LENGTH_UNITS_ = new SqlTokenType("<char length units>");
  IElementType _COLLATION_NAME_ = new SqlTokenType("<collation name>");
  IElementType _COLON_ = new SqlTokenType("<colon>");
  IElementType _COLUMN_NAME_ = new SqlTokenType("<column name>");
  IElementType _COLUMN_NAME_LIST_ = new SqlTokenType("<column name list>");
  IElementType _COMMA_ = new SqlTokenType("<comma>");
  IElementType _COMMON_SEQUENCE_GENERATOR_OPTIONS_ = new SqlTokenType("<common sequence generator options>");
  IElementType _CONNECTION_NAME_ = new SqlTokenType("<connection name>");
  IElementType _CONNECTION_USER_NAME_ = new SqlTokenType("<connection user name>");
  IElementType _CONSTRAINT_NAME_ = new SqlTokenType("<constraint name>");
  IElementType _CONTEXTUALLY_TYPED_ROW_VALUE_CONSTRUCTOR_ELEMENT_ = new SqlTokenType("<contextually typed row value constructor element>");
  IElementType _CONTEXTUALLY_TYPED_ROW_VALUE_CONSTRUCTOR_ELEMENT_LIST_ = new SqlTokenType("<contextually typed row value constructor element list>");
  IElementType _CORRESPONDING_COLUMN_LIST_ = new SqlTokenType("<corresponding column list>");
  IElementType _CYCLE_CLAUSE_ = new SqlTokenType("<cycle clause>");
  IElementType _DATETIME_TERM_ = new SqlTokenType("<datetime term>");
  IElementType _DATETIME_VALUE_EXPRESSION_ = new SqlTokenType("<datetime value expression>");
  IElementType _DELIMITER_TOKEN_ = new SqlTokenType("<delimiter token>");
  IElementType _DERIVED_COLUMN_LIST_ = new SqlTokenType("<derived column list>");
  IElementType _DOMAIN_NAME_ = new SqlTokenType("<domain name>");
  IElementType _DOUBLEQUOTE_SYMBOL_ = new SqlTokenType("<doublequote symbol>");
  IElementType _DOUBLE_QUOTE_ = new SqlTokenType("<double quote>");
  IElementType _END_FIELD_ = new SqlTokenType("<end field>");
  IElementType _EQUALS_OPERATOR_ = new SqlTokenType("<equals operator>");
  IElementType _ESCAPE_CHARACTER_ = new SqlTokenType("<escape character>");
  IElementType _ESCAPE_OCTET_ = new SqlTokenType("<escape octet>");
  IElementType _EXTENDED_CURSOR_NAME_ = new SqlTokenType("<extended cursor name>");
  IElementType _EXTERNAL_ROUTINE_NAME_ = new SqlTokenType("<external routine name>");
  IElementType _FACTOR_ = new SqlTokenType("<factor>");
  IElementType _GET_DESCRIPTOR_STATEMENT_ = new SqlTokenType("<get descriptor statement>");
  IElementType _GRANTOR_ = new SqlTokenType("<grantor>");
  IElementType _GROUPING_COLUMN_REFERENCE_LIST_ = new SqlTokenType("<grouping column reference list>");
  IElementType _HANDLER_DECLARATION_ = new SqlTokenType("<handler declaration>");
  IElementType _HEX_STRING_LITERAL_ = new SqlTokenType("<hex string literal>");
  IElementType _HOST_LABEL_IDENTIFIER_ = new SqlTokenType("<host label identifier>");
  IElementType _HOST_PARAMETER_DATA_TYPE_ = new SqlTokenType("<host parameter data type>");
  IElementType _HOST_PARAMETER_NAME_ = new SqlTokenType("<host parameter name>");
  IElementType _IDENTIFIER_EXTEND_ = new SqlTokenType("<identifier extend>");
  IElementType _IDEOGRAPHIC_CHARACTER_ = new SqlTokenType("<ideographic character>");
  IElementType _INITIAL_ALPHABETIC_CHARACTER_ = new SqlTokenType("<initial alphabetic character>");
  IElementType _INSERT_COLUMN_LIST_ = new SqlTokenType("<insert column list>");
  IElementType _INTERVAL_FACTOR_ = new SqlTokenType("<interval factor>");
  IElementType _INTERVAL_FRACTIONAL_SECONDS_PRECISION_ = new SqlTokenType("<interval fractional seconds precision>");
  IElementType _INTERVAL_LEADING_FIELD_PRECISION_ = new SqlTokenType("<interval leading field precision>");
  IElementType _INTERVAL_PRIMARY_ = new SqlTokenType("<interval primary>");
  IElementType _INTERVAL_QUALIFIER_ = new SqlTokenType("<interval qualifier>");
  IElementType _INTERVAL_TERM_ = new SqlTokenType("<interval term>");
  IElementType _INTERVAL_TERM_1_ = new SqlTokenType("<interval term 1>");
  IElementType _INTERVAL_TERM_2_ = new SqlTokenType("<interval term 2>");
  IElementType _INTERVAL_VALUE_EXPRESSION_ = new SqlTokenType("<interval value expression>");
  IElementType _INTERVAL_VALUE_EXPRESSION_1_ = new SqlTokenType("<interval value expression 1>");
  IElementType _INTRODUCER_ = new SqlTokenType("<introducer>");
  IElementType _IN_VALUE_LIST_ = new SqlTokenType("<in value list>");
  IElementType _JOINED_TABLE_ = new SqlTokenType("<joined table>");
  IElementType _LARGE_OBJECT_LENGTH_ = new SqlTokenType("<large object length>");
  IElementType _LEFT_BRACKET_ = new SqlTokenType("<left bracket>");
  IElementType _LEFT_BRACKET_OR_TRIGRAPH_ = new SqlTokenType("<left bracket or trigraph>");
  IElementType _LEFT_PAREN_ = new SqlTokenType("<left paren>");
  IElementType _LENGTH_ = new SqlTokenType("<length>");
  IElementType _LOCAL_OR_SCHEMA_QUALIFIER_ = new SqlTokenType("<local or schema qualifier>");
  IElementType _LOCAL_QUALIFIER_ = new SqlTokenType("<local qualifier>");
  IElementType _MATCH_TYPE_ = new SqlTokenType("<match type>");
  IElementType _MINUS_SIGN_ = new SqlTokenType("<minus sign>");
  IElementType _MODULE_COLLATION_ = new SqlTokenType("<module collation>");
  IElementType _MULTSET_VALUE_EXPRESSION_ = new SqlTokenType("<multset value expression>");
  IElementType _NEWLINE_ = new SqlTokenType("<newline>");
  IElementType _NON_JOIN_QUERY_EXPRESSION_ = new SqlTokenType("<non-join query expression>");
  IElementType _NUMERIC_VALUE_EXPRESSION_ = new SqlTokenType("<numeric value expression>");
  IElementType _NUMERIC_VALUE_EXPRESSION_DIVIDEND_ = new SqlTokenType("<numeric value expression dividend>");
  IElementType _NUMERIC_VALUE_EXPRESSION_DIVISOR_ = new SqlTokenType("<numeric value expression divisor>");
  IElementType _OBJECT_COLUMN_ = new SqlTokenType("<object column>");
  IElementType _OCCURRENCES_ = new SqlTokenType("<occurrences>");
  IElementType _OLD_OR_NEW_VALUES_ALIAS_LIST_ = new SqlTokenType("<old or new values alias list>");
  IElementType _OVERLAPS_PREDICATE_PART_ = new SqlTokenType("<overlaps predicate part>");
  IElementType _PATH_RESOLVED_USER_DEFINED_TYPE_NAME_ = new SqlTokenType("<path-resolved user-defined type name>");
  IElementType _PERIOD_ = new SqlTokenType("<period>");
  IElementType _PLUS_SIGN_ = new SqlTokenType("<plus sign>");
  IElementType _PRECISION_ = new SqlTokenType("<precision>");
  IElementType _PRIVILEGE_COLUMN_LIST_ = new SqlTokenType("<privilege column list>");
  IElementType _PRIVILEGE_METHOD_LIST_ = new SqlTokenType("<privilege method list>");
  IElementType _QUALIFIED_IDENTIFIER_ = new SqlTokenType("<qualified identifier>");
  IElementType _QUESTION_MARK_ = new SqlTokenType("<question mark>");
  IElementType _QUOTE_ = new SqlTokenType("<quote>");
  IElementType _RANK_FUNCTION_TYPE_ = new SqlTokenType("<rank function type>");
  IElementType _REFERENCE_COLUMN_LIST_ = new SqlTokenType("<reference column list>");
  IElementType _REFERENCE_SCOPE_CHECK_ACTION_ = new SqlTokenType("<reference scope check action>");
  IElementType _REGULAR_CHARACTER_SET_IDENTIFIER_ = new SqlTokenType("<regular character set identifier>");
  IElementType _REGULAR_EXPRESSION_ = new SqlTokenType("<regular expression>");
  IElementType _REGULAR_FACTOR_ = new SqlTokenType("<regular factor>");
  IElementType _REGULAR_PRIMARY_ = new SqlTokenType("<regular primary>");
  IElementType _REGULAR_TERM_ = new SqlTokenType("<regular term>");
  IElementType _REPEAT_FACTOR_ = new SqlTokenType("<repeat factor>");
  IElementType _REPRESENTATION_ = new SqlTokenType("<representation>");
  IElementType _RIGHT_BRACKET_ = new SqlTokenType("<right bracket>");
  IElementType _RIGHT_BRACKET_OR_TRIGRAPH_ = new SqlTokenType("<right bracket or trigraph>");
  IElementType _RIGHT_BRACKET_TRIGRAPH_ = new SqlTokenType("<right bracket trigraph>");
  IElementType _RIGHT_PAREN_ = new SqlTokenType("<right paren>");
  IElementType _ROUTINE_TYPE_ = new SqlTokenType("<routine type>");
  IElementType _ROW_VALUE_CONSTRUCTOR_ELEMENT_ = new SqlTokenType("<row value constructor element>");
  IElementType _ROW_VALUE_CONSTRUCTOR_ELEMENT_LIST_ = new SqlTokenType("<row value constructor element list>");
  IElementType _SCALE_ = new SqlTokenType("<scale>");
  IElementType _SCHEMA_AUTHORIZATION_IDENTIFIER_ = new SqlTokenType("<schema authorization identifier>");
  IElementType _SCHEMA_CHARACTER_SET_SPECIFICATION_ = new SqlTokenType("<schema character set specification>");
  IElementType _SCHEMA_NAME_ = new SqlTokenType("<schema name>");
  IElementType _SCHEMA_PATH_SPECIFICATION_ = new SqlTokenType("<schema path specification>");
  IElementType _SCHEMA_RESOLVED_USER_DEFINED_TYPE_NAME_ = new SqlTokenType("<schema-resolved user-defined type name>");
  IElementType _SEARCH_CLAUSE_ = new SqlTokenType("<search clause>");
  IElementType _SEARCH_CONDITION_ = new SqlTokenType("<search condition>");
  IElementType _SECONDS_VALUE_ = new SqlTokenType("<seconds value>");
  IElementType _SEQUENCE_GENERATOR_MAX_VALUE_ = new SqlTokenType("<sequence generator max value>");
  IElementType _SEQUENCE_GENERATOR_MIN_VALUE_ = new SqlTokenType("<sequence generator min value>");
  IElementType _SEQUENCE_GENERATOR_NAME_ = new SqlTokenType("<sequence generator name>");
  IElementType _SET_DESCRIPTOR_STATEMENT_ = new SqlTokenType("<set descriptor statement>");
  IElementType _SET_TARGET_ = new SqlTokenType("<set target>");
  IElementType _SIMPLE_VALUE_SPECIFICATION_ = new SqlTokenType("<simple value specification>");
  IElementType _SOLIDUS_ = new SqlTokenType("<solidus>");
  IElementType _SORT_SPECIFICATION_LIST_ = new SqlTokenType("<sort specification list>");
  IElementType _SPECIFIC_METHOD_NAME_ = new SqlTokenType("<specific method name>");
  IElementType _SPECIFIC_NAME_ = new SqlTokenType("<specific name>");
  IElementType _START_FIELD_ = new SqlTokenType("<start field>");
  IElementType _STRING_LENGTH_ = new SqlTokenType("<string length>");
  IElementType _TABLE_COMMIT_ACTION_ = new SqlTokenType("<table commit action>");
  IElementType _TABLE_NAME_ = new SqlTokenType("<table name>");
  IElementType _TARGET_TABLE_ = new SqlTokenType("<target table>");
  IElementType _TERM_ = new SqlTokenType("<term>");
  IElementType _TIMESTAMP_PRECISION_ = new SqlTokenType("<timestamp precision>");
  IElementType _TIME_PRECISION_ = new SqlTokenType("<time precision>");
  IElementType _TRANSFORM_ELEMENT_ = new SqlTokenType("<transform element>");
  IElementType _TRANSFORM_KIND_ = new SqlTokenType("<transform kind>");
  IElementType _TRANSLITERATION_NAME_ = new SqlTokenType("<transliteration name>");
  IElementType _TRIGGER_COLUMN_LIST_ = new SqlTokenType("<trigger column list>");
  IElementType _UNICODE_6_DIGIT_ESCAPE_VALUE_ = new SqlTokenType("<Unicode 6 digit escape value>");
  IElementType _UNICODE_DELIMITED_IDENTIFIER_ = new SqlTokenType("<Unicode delimited identifier>");
  IElementType _UNICODE_DELIMITER_BODY_ = new SqlTokenType("<Unicode delimiter body>");
  IElementType _UNICODE_ESCAPE_CHARACTER_ = new SqlTokenType("<Unicode escape character>");
  IElementType _UNICODE_ESCAPE_SPECIFIER_ = new SqlTokenType("<Unicode escape specifier>");
  IElementType _UNIQUE_COLUMN_LIST_ = new SqlTokenType("<unique column list>");
  IElementType _UNIQUE_SPECIFICATION_ = new SqlTokenType("<unique specification>");
  IElementType _UNQUALIFIED_SCHEMA_NAME_ = new SqlTokenType("<unqualified schema name>");
  IElementType _UNSIGNED_INTEGER_ = new SqlTokenType("<unsigned integer>");
  IElementType _UPDATE_SOURCE_ = new SqlTokenType("<update source>");
  IElementType _VALUE_EXPRESSION_ = new SqlTokenType("<value expression>");
  IElementType _VALUE_SPECIFICATION_ = new SqlTokenType("<value specification>");
  IElementType _VERTICAL_BAR_ = new SqlTokenType("<vertical bar>");
  IElementType _VIEW_COLUMN_LIST_ = new SqlTokenType("<view column list>");
  IElementType _WHITE_SPACE_ = new SqlTokenType("<white space>");
  IElementType _WITH_COLUMN_LIST_ = new SqlTokenType("<with column list>");
  IElementType _YEARS_VALUE_ = new SqlTokenType("<years value>");

  class Factory {
    public static PsiElement createElement(ASTNode node) {
      IElementType type = node.getElementType();
      if (type == ABSOLUTE_VALUE_EXPRESSION) {
        return new SqlAbsoluteValueExpressionImpl(node);
      }
      else if (type == ACTION) {
        return new SqlActionImpl(node);
      }
      else if (type == ACTUAL_IDENTIFIER) {
        return new SqlActualIdentifierImpl(node);
      }
      else if (type == ADD_ATTRIBUTE_DEFINITION) {
        return new SqlAddAttributeDefinitionImpl(node);
      }
      else if (type == ADD_COLUMN_DEFINITION) {
        return new SqlAddColumnDefinitionImpl(node);
      }
      else if (type == ADD_COLUMN_SCOPE_CLAUSE) {
        return new SqlAddColumnScopeClauseImpl(node);
      }
      else if (type == ADD_DOMAIN_CONSTRAINT_DEFINITION) {
        return new SqlAddDomainConstraintDefinitionImpl(node);
      }
      else if (type == ADD_ORIGINAL_METHOD_SPECIFICATION) {
        return new SqlAddOriginalMethodSpecificationImpl(node);
      }
      else if (type == ADD_OVERRIDING_METHOD_SPECIFICATION) {
        return new SqlAddOverridingMethodSpecificationImpl(node);
      }
      else if (type == ADD_TABLE_CONSTRAINT_DEFINITION) {
        return new SqlAddTableConstraintDefinitionImpl(node);
      }
      else if (type == ADD_TRANSFORM_ELEMENT_LIST) {
        return new SqlAddTransformElementListImpl(node);
      }
      else if (type == AGGREGATE_FUNCTION) {
        return new SqlAggregateFunctionImpl(node);
      }
      else if (type == ALL) {
        return new SqlAllImpl(node);
      }
      else if (type == ALLOCATE_CURSOR_STATEMENT) {
        return new SqlAllocateCursorStatementImpl(node);
      }
      else if (type == ALLOCATE_DESCRIPTOR_STATEMENT) {
        return new SqlAllocateDescriptorStatementImpl(node);
      }
      else if (type == ALL_FIELDS_COLUMN_NAME_LIST) {
        return new SqlAllFieldsColumnNameListImpl(node);
      }
      else if (type == ALL_FIELDS_REFERENCE) {
        return new SqlAllFieldsReferenceImpl(node);
      }
      else if (type == ALTER_COLUMN_ACTION) {
        return new SqlAlterColumnActionImpl(node);
      }
      else if (type == ALTER_COLUMN_DEFINITION) {
        return new SqlAlterColumnDefinitionImpl(node);
      }
      else if (type == ALTER_DOMAIN_ACTION) {
        return new SqlAlterDomainActionImpl(node);
      }
      else if (type == ALTER_DOMAIN_STATEMENT) {
        return new SqlAlterDomainStatementImpl(node);
      }
      else if (type == ALTER_GROUP) {
        return new SqlAlterGroupImpl(node);
      }
      else if (type == ALTER_IDENTITY_COLUMN_OPTION) {
        return new SqlAlterIdentityColumnOptionImpl(node);
      }
      else if (type == ALTER_IDENTITY_COLUMN_SPECIFICATION) {
        return new SqlAlterIdentityColumnSpecificationImpl(node);
      }
      else if (type == ALTER_ROUTINE_BEHAVIOR) {
        return new SqlAlterRoutineBehaviorImpl(node);
      }
      else if (type == ALTER_ROUTINE_CHARACTERISTIC) {
        return new SqlAlterRoutineCharacteristicImpl(node);
      }
      else if (type == ALTER_ROUTINE_CHARACTERISTICS) {
        return new SqlAlterRoutineCharacteristicsImpl(node);
      }
      else if (type == ALTER_ROUTINE_STATEMENT) {
        return new SqlAlterRoutineStatementImpl(node);
      }
      else if (type == ALTER_SEQUENCE_GENERATOR_OPTION) {
        return new SqlAlterSequenceGeneratorOptionImpl(node);
      }
      else if (type == ALTER_SEQUENCE_GENERATOR_OPTIONS) {
        return new SqlAlterSequenceGeneratorOptionsImpl(node);
      }
      else if (type == ALTER_SEQUENCE_GENERATOR_RESTART_OPTION) {
        return new SqlAlterSequenceGeneratorRestartOptionImpl(node);
      }
      else if (type == ALTER_SEQUENCE_GENERATOR_STATEMENT) {
        return new SqlAlterSequenceGeneratorStatementImpl(node);
      }
      else if (type == ALTER_TABLE_ACTION) {
        return new SqlAlterTableActionImpl(node);
      }
      else if (type == ALTER_TABLE_STATEMENT) {
        return new SqlAlterTableStatementImpl(node);
      }
      else if (type == ALTER_TRANSFORM_ACTION) {
        return new SqlAlterTransformActionImpl(node);
      }
      else if (type == ALTER_TRANSFORM_ACTION_LIST) {
        return new SqlAlterTransformActionListImpl(node);
      }
      else if (type == ALTER_TRANSFORM_STATEMENT) {
        return new SqlAlterTransformStatementImpl(node);
      }
      else if (type == ALTER_TYPE_ACTION) {
        return new SqlAlterTypeActionImpl(node);
      }
      else if (type == ALTER_TYPE_STATEMENT) {
        return new SqlAlterTypeStatementImpl(node);
      }
      else if (type == AMPERSAND) {
        return new SqlAmpersandImpl(node);
      }
      else if (type == APPROXIMATE_NUMERIC_LITERAL) {
        return new SqlApproximateNumericLiteralImpl(node);
      }
      else if (type == APPROXIMATE_NUMERIC_TYPE) {
        return new SqlApproximateNumericTypeImpl(node);
      }
      else if (type == ARRAY_CONCATENATION) {
        return new SqlArrayConcatenationImpl(node);
      }
      else if (type == ARRAY_ELEMENT) {
        return new SqlArrayElementImpl(node);
      }
      else if (type == ARRAY_ELEMENT_LIST) {
        return new SqlArrayElementListImpl(node);
      }
      else if (type == ARRAY_ELEMENT_REFERENCE) {
        return new SqlArrayElementReferenceImpl(node);
      }
      else if (type == ARRAY_FACTOR) {
        return new SqlArrayFactorImpl(node);
      }
      else if (type == ARRAY_TYPE) {
        return new SqlArrayTypeImpl(node);
      }
      else if (type == ARRAY_VALUE_CONSTRUCTOR) {
        return new SqlArrayValueConstructorImpl(node);
      }
      else if (type == ARRAY_VALUE_CONSTRUCTOR_BY_ENUMERATION) {
        return new SqlArrayValueConstructorByEnumerationImpl(node);
      }
      else if (type == ARRAY_VALUE_CONSTRUCTOR_BY_QUERY) {
        return new SqlArrayValueConstructorByQueryImpl(node);
      }
      else if (type == ARRAY_VALUE_EXPRESSION) {
        return new SqlArrayValueExpressionImpl(node);
      }
      else if (type == ARRAY_VALUE_EXPRESSION_1) {
        return new SqlArrayValueExpression1Impl(node);
      }
      else if (type == ASSERTION_DEFINITION) {
        return new SqlAssertionDefinitionImpl(node);
      }
      else if (type == ASSIGNED_ROW) {
        return new SqlAssignedRowImpl(node);
      }
      else if (type == ASTERISK) {
        return new SqlAsteriskImpl(node);
      }
      else if (type == ASTERISKED_IDENTIFIER) {
        return new SqlAsteriskedIdentifierImpl(node);
      }
      else if (type == ASTERISKED_IDENTIFIER_CHAIN) {
        return new SqlAsteriskedIdentifierChainImpl(node);
      }
      else if (type == AS_CLAUSE) {
        return new SqlAsClauseImpl(node);
      }
      else if (type == AS_SUBQUERY_CLAUSE) {
        return new SqlAsSubqueryClauseImpl(node);
      }
      else if (type == ATTRIBUTES_SPECIFICATION) {
        return new SqlAttributesSpecificationImpl(node);
      }
      else if (type == ATTRIBUTES_VARIABLE) {
        return new SqlAttributesVariableImpl(node);
      }
      else if (type == ATTRIBUTE_DEFAULT) {
        return new SqlAttributeDefaultImpl(node);
      }
      else if (type == ATTRIBUTE_DEFINITION) {
        return new SqlAttributeDefinitionImpl(node);
      }
      else if (type == ATTRIBUTE_NAME) {
        return new SqlAttributeNameImpl(node);
      }
      else if (type == ATTRIBUTE_OR_METHOD_REFERENCE) {
        return new SqlAttributeOrMethodReferenceImpl(node);
      }
      else if (type == AUTHORIZATION_IDENTIFIER) {
        return new SqlAuthorizationIdentifierImpl(node);
      }
      else if (type == BASIC_IDENTIFIER_CHAIN) {
        return new SqlBasicIdentifierChainImpl(node);
      }
      else if (type == BASIC_SEQUENCE_GENERATOR_OPTION) {
        return new SqlBasicSequenceGeneratorOptionImpl(node);
      }
      else if (type == BETWEEN_PREDICATE) {
        return new SqlBetweenPredicateImpl(node);
      }
      else if (type == BETWEEN_PREDICATE_PART_2) {
        return new SqlBetweenPredicatePart2Impl(node);
      }
      else if (type == BINARY_LARGE_OBJECT_STRING_TYPE) {
        return new SqlBinaryLargeObjectStringTypeImpl(node);
      }
      else if (type == BINARY_SET_FUNCTION) {
        return new SqlBinarySetFunctionImpl(node);
      }
      else if (type == BINARY_SET_FUNCTION_TYPE) {
        return new SqlBinarySetFunctionTypeImpl(node);
      }
      else if (type == BINARY_STRING_LITERAL) {
        return new SqlBinaryStringLiteralImpl(node);
      }
      else if (type == BLOB_CONCATENATION) {
        return new SqlBlobConcatenationImpl(node);
      }
      else if (type == BLOB_FACTOR) {
        return new SqlBlobFactorImpl(node);
      }
      else if (type == BLOB_OVERLAY_FUNCTION) {
        return new SqlBlobOverlayFunctionImpl(node);
      }
      else if (type == BLOB_POSITION_EXPRESSION) {
        return new SqlBlobPositionExpressionImpl(node);
      }
      else if (type == BLOB_PRIMARY) {
        return new SqlBlobPrimaryImpl(node);
      }
      else if (type == BLOB_SUBSTRING_FUNCTION) {
        return new SqlBlobSubstringFunctionImpl(node);
      }
      else if (type == BLOB_TRIM_FUNCTION) {
        return new SqlBlobTrimFunctionImpl(node);
      }
      else if (type == BLOB_TRIM_OPERANDS) {
        return new SqlBlobTrimOperandsImpl(node);
      }
      else if (type == BLOB_TRIM_SOURCE) {
        return new SqlBlobTrimSourceImpl(node);
      }
      else if (type == BLOB_VALUE_EXPRESSION) {
        return new SqlBlobValueExpressionImpl(node);
      }
      else if (type == BLOB_VALUE_FUNCTION) {
        return new SqlBlobValueFunctionImpl(node);
      }
      else if (type == BOOLEAN_FACTOR) {
        return new SqlBooleanFactorImpl(node);
      }
      else if (type == BOOLEAN_LITERAL) {
        return new SqlBooleanLiteralImpl(node);
      }
      else if (type == BOOLEAN_PREDICAND) {
        return new SqlBooleanPredicandImpl(node);
      }
      else if (type == BOOLEAN_PRIMARY) {
        return new SqlBooleanPrimaryImpl(node);
      }
      else if (type == BOOLEAN_TERM) {
        return new SqlBooleanTermImpl(node);
      }
      else if (type == BOOLEAN_TEST) {
        return new SqlBooleanTestImpl(node);
      }
      else if (type == BOOLEAN_TYPE) {
        return new SqlBooleanTypeImpl(node);
      }
      else if (type == BOOLEAN_VALUE_EXPRESSION) {
        return new SqlBooleanValueExpressionImpl(node);
      }
      else if (type == BRACKETED_COMMENT) {
        return new SqlBracketedCommentImpl(node);
      }
      else if (type == BRACKETED_COMMENT_CONTENTS) {
        return new SqlBracketedCommentContentsImpl(node);
      }
      else if (type == BRACKETED_COMMENT_INTRODUCER) {
        return new SqlBracketedCommentIntroducerImpl(node);
      }
      else if (type == BRACKETED_COMMENT_TERMINATOR) {
        return new SqlBracketedCommentTerminatorImpl(node);
      }
      else if (type == CALL_STATEMENT) {
        return new SqlCallStatementImpl(node);
      }
      else if (type == CARDINALITY_EXPRESSION) {
        return new SqlCardinalityExpressionImpl(node);
      }
      else if (type == CASE_ABBREVIATION) {
        return new SqlCaseAbbreviationImpl(node);
      }
      else if (type == CASE_EXPRESSION) {
        return new SqlCaseExpressionImpl(node);
      }
      else if (type == CASE_OPERAND) {
        return new SqlCaseOperandImpl(node);
      }
      else if (type == CASE_SPECIFICATION) {
        return new SqlCaseSpecificationImpl(node);
      }
      else if (type == CAST_FUNCTION) {
        return new SqlCastFunctionImpl(node);
      }
      else if (type == CAST_OPERAND) {
        return new SqlCastOperandImpl(node);
      }
      else if (type == CAST_OPTION) {
        return new SqlCastOptionImpl(node);
      }
      else if (type == CAST_SPECIFICATION) {
        return new SqlCastSpecificationImpl(node);
      }
      else if (type == CAST_TARGET) {
        return new SqlCastTargetImpl(node);
      }
      else if (type == CAST_TO_DISTINCT) {
        return new SqlCastToDistinctImpl(node);
      }
      else if (type == CAST_TO_DISTINCT_IDENTIFIER) {
        return new SqlCastToDistinctIdentifierImpl(node);
      }
      else if (type == CAST_TO_REF) {
        return new SqlCastToRefImpl(node);
      }
      else if (type == CAST_TO_REF_IDENTIFIER) {
        return new SqlCastToRefIdentifierImpl(node);
      }
      else if (type == CAST_TO_SOURCE) {
        return new SqlCastToSourceImpl(node);
      }
      else if (type == CAST_TO_SOURCE_IDENTIFIER) {
        return new SqlCastToSourceIdentifierImpl(node);
      }
      else if (type == CAST_TO_TYPE) {
        return new SqlCastToTypeImpl(node);
      }
      else if (type == CAST_TO_TYPE_IDENTIFIER) {
        return new SqlCastToTypeIdentifierImpl(node);
      }
      else if (type == CATALOG_NAME) {
        return new SqlCatalogNameImpl(node);
      }
      else if (type == CATALOG_NAME_CHARACTERISTIC) {
        return new SqlCatalogNameCharacteristicImpl(node);
      }
      else if (type == CEILING_FUNCTION) {
        return new SqlCeilingFunctionImpl(node);
      }
      else if (type == CHARACTER_ENUMERATION) {
        return new SqlCharacterEnumerationImpl(node);
      }
      else if (type == CHARACTER_ENUMERATION_EXCLUDE) {
        return new SqlCharacterEnumerationExcludeImpl(node);
      }
      else if (type == CHARACTER_ENUMERATION_INCLUDE) {
        return new SqlCharacterEnumerationIncludeImpl(node);
      }
      else if (type == CHARACTER_FACTOR) {
        return new SqlCharacterFactorImpl(node);
      }
      else if (type == CHARACTER_LIKE_PREDICATE) {
        return new SqlCharacterLikePredicateImpl(node);
      }
      else if (type == CHARACTER_LIKE_PREDICATE_PART_2) {
        return new SqlCharacterLikePredicatePart2Impl(node);
      }
      else if (type == CHARACTER_OVERLAY_FUNCTION) {
        return new SqlCharacterOverlayFunctionImpl(node);
      }
      else if (type == CHARACTER_PATTERN) {
        return new SqlCharacterPatternImpl(node);
      }
      else if (type == CHARACTER_PRIMARY) {
        return new SqlCharacterPrimaryImpl(node);
      }
      else if (type == CHARACTER_REPRESENTATION) {
        return new SqlCharacterRepresentationImpl(node);
      }
      else if (type == CHARACTER_SET_DEFINITION) {
        return new SqlCharacterSetDefinitionImpl(node);
      }
      else if (type == CHARACTER_SET_NAME) {
        return new SqlCharacterSetNameImpl(node);
      }
      else if (type == CHARACTER_SET_NAME_CHARACTERISTIC) {
        return new SqlCharacterSetNameCharacteristicImpl(node);
      }
      else if (type == CHARACTER_SET_SOURCE) {
        return new SqlCharacterSetSourceImpl(node);
      }
      else if (type == CHARACTER_SET_SPECIFICATION) {
        return new SqlCharacterSetSpecificationImpl(node);
      }
      else if (type == CHARACTER_SET_SPECIFICATION_LIST) {
        return new SqlCharacterSetSpecificationListImpl(node);
      }
      else if (type == CHARACTER_SPECIFIER) {
        return new SqlCharacterSpecifierImpl(node);
      }
      else if (type == CHARACTER_STRING_LITERAL) {
        return new SqlCharacterStringLiteralImpl(node);
      }
      else if (type == CHARACTER_STRING_TYPE) {
        return new SqlCharacterStringTypeImpl(node);
      }
      else if (type == CHARACTER_SUBSTRING_FUNCTION) {
        return new SqlCharacterSubstringFunctionImpl(node);
      }
      else if (type == CHARACTER_TRANSLITERATION) {
        return new SqlCharacterTransliterationImpl(node);
      }
      else if (type == CHARACTER_VALUE_EXPRESSION) {
        return new SqlCharacterValueExpressionImpl(node);
      }
      else if (type == CHARACTER_VALUE_FUNCTION) {
        return new SqlCharacterValueFunctionImpl(node);
      }
      else if (type == CHAR_LENGTH_EXPRESSION) {
        return new SqlCharLengthExpressionImpl(node);
      }
      else if (type == CHAR_LENGTH_UNITS) {
        return new SqlCharLengthUnitsImpl(node);
      }
      else if (type == CHECK_CONSTRAINT_DEFINITION) {
        return new SqlCheckConstraintDefinitionImpl(node);
      }
      else if (type == CIRCUMFLEX) {
        return new SqlCircumflexImpl(node);
      }
      else if (type == CLOSE_STATEMENT) {
        return new SqlCloseStatementImpl(node);
      }
      else if (type == COLLATE_CLAUSE) {
        return new SqlCollateClauseImpl(node);
      }
      else if (type == COLLATION_DEFINITION) {
        return new SqlCollationDefinitionImpl(node);
      }
      else if (type == COLLATION_NAME) {
        return new SqlCollationNameImpl(node);
      }
      else if (type == COLLATION_SPECIFICATION) {
        return new SqlCollationSpecificationImpl(node);
      }
      else if (type == COLLECTION_DERIVED_TABLE) {
        return new SqlCollectionDerivedTableImpl(node);
      }
      else if (type == COLLECTION_TYPE) {
        return new SqlCollectionTypeImpl(node);
      }
      else if (type == COLLECTION_VALUE_CONSTRUCTOR) {
        return new SqlCollectionValueConstructorImpl(node);
      }
      else if (type == COLLECTION_VALUE_EXPRESSION) {
        return new SqlCollectionValueExpressionImpl(node);
      }
      else if (type == COLON) {
        return new SqlColonImpl(node);
      }
      else if (type == COLUMN_CONSTRAINT) {
        return new SqlColumnConstraintImpl(node);
      }
      else if (type == COLUMN_CONSTRAINT_DEFINITION) {
        return new SqlColumnConstraintDefinitionImpl(node);
      }
      else if (type == COLUMN_DEFAULT_OPTION) {
        return new SqlColumnDefaultOptionImpl(node);
      }
      else if (type == COLUMN_DEFINITION) {
        return new SqlColumnDefinitionImpl(node);
      }
      else if (type == COLUMN_NAME) {
        return new SqlColumnNameImpl(node);
      }
      else if (type == COLUMN_NAME_LIST) {
        return new SqlColumnNameListImpl(node);
      }
      else if (type == COLUMN_OPTIONS) {
        return new SqlColumnOptionsImpl(node);
      }
      else if (type == COLUMN_OPTION_LIST) {
        return new SqlColumnOptionListImpl(node);
      }
      else if (type == COLUMN_REFERENCE) {
        return new SqlColumnReferenceImpl(node);
      }
      else if (type == COMMA) {
        return new SqlCommaImpl(node);
      }
      else if (type == COMMENT) {
        return new SqlCommentImpl(node);
      }
      else if (type == COMMENT_CHARACTER) {
        return new SqlCommentCharacterImpl(node);
      }
      else if (type == COMMIT_STATEMENT) {
        return new SqlCommitStatementImpl(node);
      }
      else if (type == COMMON_SEQUENCE_GENERATOR_OPTION) {
        return new SqlCommonSequenceGeneratorOptionImpl(node);
      }
      else if (type == COMMON_SEQUENCE_GENERATOR_OPTIONS) {
        return new SqlCommonSequenceGeneratorOptionsImpl(node);
      }
      else if (type == COMMON_VALUE_EXPRESSION) {
        return new SqlCommonValueExpressionImpl(node);
      }
      else if (type == COMPARISON_PREDICATE) {
        return new SqlComparisonPredicateImpl(node);
      }
      else if (type == COMPARISON_PREDICATE_PART_2) {
        return new SqlComparisonPredicatePart2Impl(node);
      }
      else if (type == COMPUTATIONAL_OPERATION) {
        return new SqlComputationalOperationImpl(node);
      }
      else if (type == COMP_OP) {
        return new SqlCompOpImpl(node);
      }
      else if (type == CONCATENATION) {
        return new SqlConcatenationImpl(node);
      }
      else if (type == CONCATENATION_OPERATOR) {
        return new SqlConcatenationOperatorImpl(node);
      }
      else if (type == CONDITION) {
        return new SqlConditionImpl(node);
      }
      else if (type == CONDITION_ACTION) {
        return new SqlConditionActionImpl(node);
      }
      else if (type == CONDITION_INFORMATION) {
        return new SqlConditionInformationImpl(node);
      }
      else if (type == CONDITION_INFORMATION_ITEM) {
        return new SqlConditionInformationItemImpl(node);
      }
      else if (type == CONDITION_INFORMATION_ITEM_NAME) {
        return new SqlConditionInformationItemNameImpl(node);
      }
      else if (type == CONDITION_NUMBER) {
        return new SqlConditionNumberImpl(node);
      }
      else if (type == CONNECTION_NAME) {
        return new SqlConnectionNameImpl(node);
      }
      else if (type == CONNECTION_OBJECT) {
        return new SqlConnectionObjectImpl(node);
      }
      else if (type == CONNECTION_TARGET) {
        return new SqlConnectionTargetImpl(node);
      }
      else if (type == CONNECTION_USER_NAME) {
        return new SqlConnectionUserNameImpl(node);
      }
      else if (type == CONNECT_STATEMENT) {
        return new SqlConnectStatementImpl(node);
      }
      else if (type == CONSTRAINT_CHARACTERISTICS) {
        return new SqlConstraintCharacteristicsImpl(node);
      }
      else if (type == CONSTRAINT_CHECK_TIME) {
        return new SqlConstraintCheckTimeImpl(node);
      }
      else if (type == CONSTRAINT_NAME) {
        return new SqlConstraintNameImpl(node);
      }
      else if (type == CONSTRAINT_NAME_DEFINITION) {
        return new SqlConstraintNameDefinitionImpl(node);
      }
      else if (type == CONSTRAINT_NAME_LIST) {
        return new SqlConstraintNameListImpl(node);
      }
      else if (type == CONSTRUCTOR_METHOD_SELECTION) {
        return new SqlConstructorMethodSelectionImpl(node);
      }
      else if (type == CONTEXTUALLY_TYPED_ROW_VALUE_CONSTRUCTOR) {
        return new SqlContextuallyTypedRowValueConstructorImpl(node);
      }
      else if (type == CONTEXTUALLY_TYPED_ROW_VALUE_CONSTRUCTOR_ELEMENT) {
        return new SqlContextuallyTypedRowValueConstructorElementImpl(node);
      }
      else if (type == CONTEXTUALLY_TYPED_ROW_VALUE_CONSTRUCTOR_ELEMENT_LIST) {
        return new SqlContextuallyTypedRowValueConstructorElementListImpl(node);
      }
      else if (type == CONTEXTUALLY_TYPED_ROW_VALUE_EXPRESSION) {
        return new SqlContextuallyTypedRowValueExpressionImpl(node);
      }
      else if (type == CONTEXTUALLY_TYPED_ROW_VALUE_EXPRESSION_LIST) {
        return new SqlContextuallyTypedRowValueExpressionListImpl(node);
      }
      else if (type == CONTEXTUALLY_TYPED_TABLE_VALUE_CONSTRUCTOR) {
        return new SqlContextuallyTypedTableValueConstructorImpl(node);
      }
      else if (type == CONTEXTUALLY_TYPED_VALUE_SPECIFICATION) {
        return new SqlContextuallyTypedValueSpecificationImpl(node);
      }
      else if (type == CORRELATION_NAME) {
        return new SqlCorrelationNameImpl(node);
      }
      else if (type == CORRESPONDING_COLUMN_LIST) {
        return new SqlCorrespondingColumnListImpl(node);
      }
      else if (type == CORRESPONDING_SPEC) {
        return new SqlCorrespondingSpecImpl(node);
      }
      else if (type == CROSS_JOIN) {
        return new SqlCrossJoinImpl(node);
      }
      else if (type == CUBE_LIST) {
        return new SqlCubeListImpl(node);
      }
      else if (type == CURRENT_COLLATION_SPECIFICATION) {
        return new SqlCurrentCollationSpecificationImpl(node);
      }
      else if (type == CURRENT_DATE_VALUE_FUNCTION) {
        return new SqlCurrentDateValueFunctionImpl(node);
      }
      else if (type == CURRENT_LOCAL_TIMESTAMP_VALUE_FUNCTION) {
        return new SqlCurrentLocalTimestampValueFunctionImpl(node);
      }
      else if (type == CURRENT_LOCAL_TIME_VALUE_FUNCTION) {
        return new SqlCurrentLocalTimeValueFunctionImpl(node);
      }
      else if (type == CURRENT_TIMESTAMP_VALUE_FUNCTION) {
        return new SqlCurrentTimestampValueFunctionImpl(node);
      }
      else if (type == CURRENT_TIME_VALUE_FUNCTION) {
        return new SqlCurrentTimeValueFunctionImpl(node);
      }
      else if (type == CURSOR_ATTRIBUTE) {
        return new SqlCursorAttributeImpl(node);
      }
      else if (type == CURSOR_ATTRIBUTES) {
        return new SqlCursorAttributesImpl(node);
      }
      else if (type == CURSOR_HOLDABILITY) {
        return new SqlCursorHoldabilityImpl(node);
      }
      else if (type == CURSOR_INTENT) {
        return new SqlCursorIntentImpl(node);
      }
      else if (type == CURSOR_NAME) {
        return new SqlCursorNameImpl(node);
      }
      else if (type == CURSOR_RETURNABILITY) {
        return new SqlCursorReturnabilityImpl(node);
      }
      else if (type == CURSOR_SCROLLABILITY) {
        return new SqlCursorScrollabilityImpl(node);
      }
      else if (type == CURSOR_SENSITIVITY) {
        return new SqlCursorSensitivityImpl(node);
      }
      else if (type == CURSOR_SPECIFICATION) {
        return new SqlCursorSpecificationImpl(node);
      }
      else if (type == CYCLE_CLAUSE) {
        return new SqlCycleClauseImpl(node);
      }
      else if (type == CYCLE_COLUMN) {
        return new SqlCycleColumnImpl(node);
      }
      else if (type == CYCLE_COLUMN_LIST) {
        return new SqlCycleColumnListImpl(node);
      }
      else if (type == CYCLE_MARK_COLUMN) {
        return new SqlCycleMarkColumnImpl(node);
      }
      else if (type == CYCLE_MARK_VALUE) {
        return new SqlCycleMarkValueImpl(node);
      }
      else if (type == C_ARRAY_LOCATOR_VARIABLE) {
        return new SqlCArrayLocatorVariableImpl(node);
      }
      else if (type == C_ARRAY_SPECIFICATION) {
        return new SqlCArraySpecificationImpl(node);
      }
      else if (type == C_BLOB_LOCATOR_VARIABLE) {
        return new SqlCBLOBLocatorVariableImpl(node);
      }
      else if (type == C_BLOB_VARIABLE) {
        return new SqlCBLOBVariableImpl(node);
      }
      else if (type == C_CHARACTER_TYPE) {
        return new SqlCCharacterTypeImpl(node);
      }
      else if (type == C_CHARACTER_VARIABLE) {
        return new SqlCCharacterVariableImpl(node);
      }
      else if (type == C_CLASS_MODIFIER) {
        return new SqlCClassModifierImpl(node);
      }
      else if (type == C_CLOB_LOCATOR_VARIABLE) {
        return new SqlCCLOBLocatorVariableImpl(node);
      }
      else if (type == C_CLOB_VARIABLE) {
        return new SqlCCLOBVariableImpl(node);
      }
      else if (type == C_DERIVED_VARIABLE) {
        return new SqlCDerivedVariableImpl(node);
      }
      else if (type == C_HOST_IDENTIFIER) {
        return new SqlCHostIdentifierImpl(node);
      }
      else if (type == C_INITIAL_VALUE) {
        return new SqlCInitialValueImpl(node);
      }
      else if (type == C_MULTISET_LOCATOR_VARIABLE) {
        return new SqlCMultisetLocatorVariableImpl(node);
      }
      else if (type == C_NCHAR_VARIABLE) {
        return new SqlCNCHARVariableImpl(node);
      }
      else if (type == C_NCHAR_VARYING_VARIABLE) {
        return new SqlCNCHARVARYINGVariableImpl(node);
      }
      else if (type == C_NCLOB_VARIABLE) {
        return new SqlCNCLOBVariableImpl(node);
      }
      else if (type == C_NUMERIC_VARIABLE) {
        return new SqlCNumericVariableImpl(node);
      }
      else if (type == C_REF_VARIABLE) {
        return new SqlCREFVariableImpl(node);
      }
      else if (type == C_STORAGE_CLASS) {
        return new SqlCStorageClassImpl(node);
      }
      else if (type == C_USER_DEFINED_TYPE_LOCATOR_VARIABLE) {
        return new SqlCUserDefinedTypeLocatorVariableImpl(node);
      }
      else if (type == C_USER_DEFINED_TYPE_VARIABLE) {
        return new SqlCUserDefinedTypeVariableImpl(node);
      }
      else if (type == C_VARCHAR_VARIABLE) {
        return new SqlCVARCHARVariableImpl(node);
      }
      else if (type == C_VARIABLE_DEFINITION) {
        return new SqlCVariableDefinitionImpl(node);
      }
      else if (type == C_VARIABLE_SPECIFICATION) {
        return new SqlCVariableSpecificationImpl(node);
      }
      else if (type == DATA_TYPE) {
        return new SqlDataTypeImpl(node);
      }
      else if (type == DATA_TYPE_LIST) {
        return new SqlDataTypeListImpl(node);
      }
      else if (type == DATETIME_FACTOR) {
        return new SqlDatetimeFactorImpl(node);
      }
      else if (type == DATETIME_LITERAL) {
        return new SqlDatetimeLiteralImpl(node);
      }
      else if (type == DATETIME_PRIMARY) {
        return new SqlDatetimePrimaryImpl(node);
      }
      else if (type == DATETIME_TERM) {
        return new SqlDatetimeTermImpl(node);
      }
      else if (type == DATETIME_TYPE) {
        return new SqlDatetimeTypeImpl(node);
      }
      else if (type == DATETIME_VALUE) {
        return new SqlDatetimeValueImpl(node);
      }
      else if (type == DATETIME_VALUE_EXPRESSION) {
        return new SqlDatetimeValueExpressionImpl(node);
      }
      else if (type == DATETIME_VALUE_FUNCTION) {
        return new SqlDatetimeValueFunctionImpl(node);
      }
      else if (type == DATE_LITERAL) {
        return new SqlDateLiteralImpl(node);
      }
      else if (type == DATE_STRING) {
        return new SqlDateStringImpl(node);
      }
      else if (type == DATE_VALUE) {
        return new SqlDateValueImpl(node);
      }
      else if (type == DAYS_VALUE) {
        return new SqlDaysValueImpl(node);
      }
      else if (type == DAY_TIME_INTERVAL) {
        return new SqlDayTimeIntervalImpl(node);
      }
      else if (type == DAY_TIME_LITERAL) {
        return new SqlDayTimeLiteralImpl(node);
      }
      else if (type == DEALLOCATE_DESCRIPTOR_STATEMENT) {
        return new SqlDeallocateDescriptorStatementImpl(node);
      }
      else if (type == DEALLOCATE_PREPARED_STATEMENT) {
        return new SqlDeallocatePreparedStatementImpl(node);
      }
      else if (type == DECLARE_CURSOR) {
        return new SqlDeclareCursorImpl(node);
      }
      else if (type == DEFAULT_CLAUSE) {
        return new SqlDefaultClauseImpl(node);
      }
      else if (type == DEFAULT_OPTION) {
        return new SqlDefaultOptionImpl(node);
      }
      else if (type == DEFAULT_SPECIFICATION) {
        return new SqlDefaultSpecificationImpl(node);
      }
      else if (type == DELETE_RULE) {
        return new SqlDeleteRuleImpl(node);
      }
      else if (type == DELETE_STATEMENT_POSITIONED) {
        return new SqlDeleteStatementPositionedImpl(node);
      }
      else if (type == DELETE_STATEMENT_SEARCHED) {
        return new SqlDeleteStatementSearchedImpl(node);
      }
      else if (type == DELIMITED_IDENTIFIER) {
        return new SqlDelimitedIdentifierImpl(node);
      }
      else if (type == DELIMITED_IDENTIFIER_BODY) {
        return new SqlDelimitedIdentifierBodyImpl(node);
      }
      else if (type == DELIMITED_IDENTIFIER_PART) {
        return new SqlDelimitedIdentifierPartImpl(node);
      }
      else if (type == DEPENDENT_VARIABLE_EXPRESSION) {
        return new SqlDependentVariableExpressionImpl(node);
      }
      else if (type == DEREFERENCE_OPERATION) {
        return new SqlDereferenceOperationImpl(node);
      }
      else if (type == DEREFERENCE_OPERATOR) {
        return new SqlDereferenceOperatorImpl(node);
      }
      else if (type == DERIVED_COLUMN) {
        return new SqlDerivedColumnImpl(node);
      }
      else if (type == DERIVED_COLUMN_LIST) {
        return new SqlDerivedColumnListImpl(node);
      }
      else if (type == DERIVED_REPRESENTATION) {
        return new SqlDerivedRepresentationImpl(node);
      }
      else if (type == DERIVED_TABLE) {
        return new SqlDerivedTableImpl(node);
      }
      else if (type == DESCRIBED_OBJECT) {
        return new SqlDescribedObjectImpl(node);
      }
      else if (type == DESCRIBE_INPUT_STATEMENT) {
        return new SqlDescribeInputStatementImpl(node);
      }
      else if (type == DESCRIBE_OUTPUT_STATEMENT) {
        return new SqlDescribeOutputStatementImpl(node);
      }
      else if (type == DESCRIBE_STATEMENT) {
        return new SqlDescribeStatementImpl(node);
      }
      else if (type == DESCRIPTOR_ITEM_NAME) {
        return new SqlDescriptorItemNameImpl(node);
      }
      else if (type == DESCRIPTOR_NAME) {
        return new SqlDescriptorNameImpl(node);
      }
      else if (type == DETERMINISTIC_CHARACTERISTIC) {
        return new SqlDeterministicCharacteristicImpl(node);
      }
      else if (type == DIAGNOSTICS_SIZE) {
        return new SqlDiagnosticsSizeImpl(node);
      }
      else if (type == DIGIT) {
        return new SqlDigitImpl(node);
      }
      else if (type == DIRECTLY_EXECUTABLE_STATEMENT) {
        return new SqlDirectlyExecutableStatementImpl(node);
      }
      else if (type == DIRECT_IMPLEMENTATION_DEFINED_STATEMENT) {
        return new SqlDirectImplementationDefinedStatementImpl(node);
      }
      else if (type == DIRECT_INVOCATION) {
        return new SqlDirectInvocationImpl(node);
      }
      else if (type == DIRECT_SELECT_STATEMENT_MULTIPLE_ROWS) {
        return new SqlDirectSelectStatementMultipleRowsImpl(node);
      }
      else if (type == DIRECT_SQL_DATA_STATEMENT) {
        return new SqlDirectSQLDataStatementImpl(node);
      }
      else if (type == DIRECT_SQL_STATEMENT) {
        return new SqlDirectSQLStatementImpl(node);
      }
      else if (type == DISCONNECT_OBJECT) {
        return new SqlDisconnectObjectImpl(node);
      }
      else if (type == DISCONNECT_STATEMENT) {
        return new SqlDisconnectStatementImpl(node);
      }
      else if (type == DISPATCH_CLAUSE) {
        return new SqlDispatchClauseImpl(node);
      }
      else if (type == DISTINCT_PREDICATE) {
        return new SqlDistinctPredicateImpl(node);
      }
      else if (type == DISTINCT_PREDICATE_PART_2) {
        return new SqlDistinctPredicatePart2Impl(node);
      }
      else if (type == DOMAIN_CONSTRAINT) {
        return new SqlDomainConstraintImpl(node);
      }
      else if (type == DOMAIN_DEFINITION) {
        return new SqlDomainDefinitionImpl(node);
      }
      else if (type == DOMAIN_NAME) {
        return new SqlDomainNameImpl(node);
      }
      else if (type == DOUBLEQUOTE_SYMBOL) {
        return new SqlDoublequoteSymbolImpl(node);
      }
      else if (type == DOUBLE_COLON) {
        return new SqlDoubleColonImpl(node);
      }
      else if (type == DOUBLE_PERIOD) {
        return new SqlDoublePeriodImpl(node);
      }
      else if (type == DOUBLE_QUOTE) {
        return new SqlDoubleQuoteImpl(node);
      }
      else if (type == DROP_ASSERTION_STATEMENT) {
        return new SqlDropAssertionStatementImpl(node);
      }
      else if (type == DROP_ATTRIBUTE_DEFINITION) {
        return new SqlDropAttributeDefinitionImpl(node);
      }
      else if (type == DROP_BEHAVIOR) {
        return new SqlDropBehaviorImpl(node);
      }
      else if (type == DROP_CHARACTER_SET_STATEMENT) {
        return new SqlDropCharacterSetStatementImpl(node);
      }
      else if (type == DROP_COLLATION_STATEMENT) {
        return new SqlDropCollationStatementImpl(node);
      }
      else if (type == DROP_COLUMN_DEFAULT_CLAUSE) {
        return new SqlDropColumnDefaultClauseImpl(node);
      }
      else if (type == DROP_COLUMN_DEFINITION) {
        return new SqlDropColumnDefinitionImpl(node);
      }
      else if (type == DROP_COLUMN_SCOPE_CLAUSE) {
        return new SqlDropColumnScopeClauseImpl(node);
      }
      else if (type == DROP_DATA_TYPE_STATEMENT) {
        return new SqlDropDataTypeStatementImpl(node);
      }
      else if (type == DROP_DOMAIN_CONSTRAINT_DEFINITION) {
        return new SqlDropDomainConstraintDefinitionImpl(node);
      }
      else if (type == DROP_DOMAIN_DEFAULT_CLAUSE) {
        return new SqlDropDomainDefaultClauseImpl(node);
      }
      else if (type == DROP_DOMAIN_STATEMENT) {
        return new SqlDropDomainStatementImpl(node);
      }
      else if (type == DROP_METHOD_SPECIFICATION) {
        return new SqlDropMethodSpecificationImpl(node);
      }
      else if (type == DROP_ROLE_STATEMENT) {
        return new SqlDropRoleStatementImpl(node);
      }
      else if (type == DROP_ROUTINE_STATEMENT) {
        return new SqlDropRoutineStatementImpl(node);
      }
      else if (type == DROP_SCHEMA_STATEMENT) {
        return new SqlDropSchemaStatementImpl(node);
      }
      else if (type == DROP_SEQUENCE_GENERATOR_STATEMENT) {
        return new SqlDropSequenceGeneratorStatementImpl(node);
      }
      else if (type == DROP_TABLE_CONSTRAINT_DEFINITION) {
        return new SqlDropTableConstraintDefinitionImpl(node);
      }
      else if (type == DROP_TABLE_STATEMENT) {
        return new SqlDropTableStatementImpl(node);
      }
      else if (type == DROP_TRANSFORM_ELEMENT_LIST) {
        return new SqlDropTransformElementListImpl(node);
      }
      else if (type == DROP_TRANSFORM_STATEMENT) {
        return new SqlDropTransformStatementImpl(node);
      }
      else if (type == DROP_TRANSLITERATION_STATEMENT) {
        return new SqlDropTransliterationStatementImpl(node);
      }
      else if (type == DROP_TRIGGER_STATEMENT) {
        return new SqlDropTriggerStatementImpl(node);
      }
      else if (type == DROP_USER_DEFINED_CAST_STATEMENT) {
        return new SqlDropUserDefinedCastStatementImpl(node);
      }
      else if (type == DROP_USER_DEFINED_ORDERING_STATEMENT) {
        return new SqlDropUserDefinedOrderingStatementImpl(node);
      }
      else if (type == DROP_VIEW_STATEMENT) {
        return new SqlDropViewStatementImpl(node);
      }
      else if (type == DYNAMIC_CLOSE_STATEMENT) {
        return new SqlDynamicCloseStatementImpl(node);
      }
      else if (type == DYNAMIC_CURSOR_NAME) {
        return new SqlDynamicCursorNameImpl(node);
      }
      else if (type == DYNAMIC_DECLARE_CURSOR) {
        return new SqlDynamicDeclareCursorImpl(node);
      }
      else if (type == DYNAMIC_DELETE_STATEMENT_POSITIONED) {
        return new SqlDynamicDeleteStatementPositionedImpl(node);
      }
      else if (type == DYNAMIC_FETCH_STATEMENT) {
        return new SqlDynamicFetchStatementImpl(node);
      }
      else if (type == DYNAMIC_OPEN_STATEMENT) {
        return new SqlDynamicOpenStatementImpl(node);
      }
      else if (type == DYNAMIC_PARAMETER_SPECIFICATION) {
        return new SqlDynamicParameterSpecificationImpl(node);
      }
      else if (type == DYNAMIC_RESULT_SETS_CHARACTERISTIC) {
        return new SqlDynamicResultSetsCharacteristicImpl(node);
      }
      else if (type == DYNAMIC_SELECT_STATEMENT) {
        return new SqlDynamicSelectStatementImpl(node);
      }
      else if (type == DYNAMIC_SINGLE_ROW_SELECT_STATEMENT) {
        return new SqlDynamicSingleRowSelectStatementImpl(node);
      }
      else if (type == DYNAMIC_UPDATE_STATEMENT_POSITIONED) {
        return new SqlDynamicUpdateStatementPositionedImpl(node);
      }
      else if (type == ELSE_CLAUSE) {
        return new SqlElseClauseImpl(node);
      }
      else if (type == EMBEDDED_AUTHORIZATION_CLAUSE) {
        return new SqlEmbeddedAuthorizationClauseImpl(node);
      }
      else if (type == EMBEDDED_AUTHORIZATION_DECLARATION) {
        return new SqlEmbeddedAuthorizationDeclarationImpl(node);
      }
      else if (type == EMBEDDED_AUTHORIZATION_IDENTIFIER) {
        return new SqlEmbeddedAuthorizationIdentifierImpl(node);
      }
      else if (type == EMBEDDED_CHARACTER_SET_DECLARATION) {
        return new SqlEmbeddedCharacterSetDeclarationImpl(node);
      }
      else if (type == EMBEDDED_COLLATION_SPECIFICATION) {
        return new SqlEmbeddedCollationSpecificationImpl(node);
      }
      else if (type == EMBEDDED_EXCEPTION_DECLARATION) {
        return new SqlEmbeddedExceptionDeclarationImpl(node);
      }
      else if (type == EMBEDDED_PATH_SPECIFICATION) {
        return new SqlEmbeddedPathSpecificationImpl(node);
      }
      else if (type == EMBEDDED_SQL_BEGIN_DECLARE) {
        return new SqlEmbeddedSQLBeginDeclareImpl(node);
      }
      else if (type == EMBEDDED_SQL_C_PROGRAM) {
        return new SqlEmbeddedSQLCProgramImpl(node);
      }
      else if (type == EMBEDDED_SQL_DECLARE_SECTION) {
        return new SqlEmbeddedSQLDeclareSectionImpl(node);
      }
      else if (type == EMBEDDED_SQL_END_DECLARE) {
        return new SqlEmbeddedSQLEndDeclareImpl(node);
      }
      else if (type == EMBEDDED_SQL_HOST_PROGRAM) {
        return new SqlEmbeddedSQLHostProgramImpl(node);
      }
      else if (type == EMBEDDED_SQL_STATEMENT) {
        return new SqlEmbeddedSQLStatementImpl(node);
      }
      else if (type == EMBEDDED_TRANSFORM_GROUP_SPECIFICATION) {
        return new SqlEmbeddedTransformGroupSpecificationImpl(node);
      }
      else if (type == EMBEDDED_VARIABLE_NAME) {
        return new SqlEmbeddedVariableNameImpl(node);
      }
      else if (type == EMBEDDED_VARIABLE_SPECIFICATION) {
        return new SqlEmbeddedVariableSpecificationImpl(node);
      }
      else if (type == EMPTY_GROUPING_SET) {
        return new SqlEmptyGroupingSetImpl(node);
      }
      else if (type == EMPTY_SPECIFICATION) {
        return new SqlEmptySpecificationImpl(node);
      }
      else if (type == END_FIELD) {
        return new SqlEndFieldImpl(node);
      }
      else if (type == EQUALS_OPERATOR) {
        return new SqlEqualsOperatorImpl(node);
      }
      else if (type == EQUALS_ORDERING_FORM) {
        return new SqlEqualsOrderingFormImpl(node);
      }
      else if (type == ESCAPED_CHARACTER) {
        return new SqlEscapedCharacterImpl(node);
      }
      else if (type == ESCAPE_CHARACTER) {
        return new SqlEscapeCharacterImpl(node);
      }
      else if (type == ESCAPE_OCTET) {
        return new SqlEscapeOctetImpl(node);
      }
      else if (type == EXACT_NUMERIC_LITERAL) {
        return new SqlExactNumericLiteralImpl(node);
      }
      else if (type == EXACT_NUMERIC_TYPE) {
        return new SqlExactNumericTypeImpl(node);
      }
      else if (type == EXCLUSIVE_USER_DEFINED_TYPE_SPECIFICATION) {
        return new SqlExclusiveUserDefinedTypeSpecificationImpl(node);
      }
      else if (type == EXECUTE_IMMEDIATE_STATEMENT) {
        return new SqlExecuteImmediateStatementImpl(node);
      }
      else if (type == EXECUTE_STATEMENT) {
        return new SqlExecuteStatementImpl(node);
      }
      else if (type == EXISTING_COLLATION_NAME) {
        return new SqlExistingCollationNameImpl(node);
      }
      else if (type == EXISTING_TRANSLITERATION_NAME) {
        return new SqlExistingTransliterationNameImpl(node);
      }
      else if (type == EXISTING_WINDOW_NAME) {
        return new SqlExistingWindowNameImpl(node);
      }
      else if (type == EXISTS_PREDICATE) {
        return new SqlExistsPredicateImpl(node);
      }
      else if (type == EXPLICIT_ROW_VALUE_CONSTRUCTOR) {
        return new SqlExplicitRowValueConstructorImpl(node);
      }
      else if (type == EXPLICIT_TABLE) {
        return new SqlExplicitTableImpl(node);
      }
      else if (type == EXPONENT) {
        return new SqlExponentImpl(node);
      }
      else if (type == EXPONENTIAL_FUNCTION) {
        return new SqlExponentialFunctionImpl(node);
      }
      else if (type == EXTENDED_CURSOR_NAME) {
        return new SqlExtendedCursorNameImpl(node);
      }
      else if (type == EXTENDED_STATEMENT_NAME) {
        return new SqlExtendedStatementNameImpl(node);
      }
      else if (type == EXTERNALLY_INVOKED_PROCEDURE) {
        return new SqlExternallyInvokedProcedureImpl(node);
      }
      else if (type == EXTERNAL_BODY_REFERENCE) {
        return new SqlExternalBodyReferenceImpl(node);
      }
      else if (type == EXTERNAL_ROUTINE_NAME) {
        return new SqlExternalRoutineNameImpl(node);
      }
      else if (type == EXTERNAL_SECURITY_CLAUSE) {
        return new SqlExternalSecurityClauseImpl(node);
      }
      else if (type == EXTRACT_EXPRESSION) {
        return new SqlExtractExpressionImpl(node);
      }
      else if (type == EXTRACT_FIELD) {
        return new SqlExtractFieldImpl(node);
      }
      else if (type == EXTRACT_SOURCE) {
        return new SqlExtractSourceImpl(node);
      }
      else if (type == FACTOR) {
        return new SqlFactorImpl(node);
      }
      else if (type == FETCH_ORIENTATION) {
        return new SqlFetchOrientationImpl(node);
      }
      else if (type == FETCH_STATEMENT) {
        return new SqlFetchStatementImpl(node);
      }
      else if (type == FETCH_TARGET_LIST) {
        return new SqlFetchTargetListImpl(node);
      }
      else if (type == FIELD_DEFINITION) {
        return new SqlFieldDefinitionImpl(node);
      }
      else if (type == FIELD_NAME) {
        return new SqlFieldNameImpl(node);
      }
      else if (type == FIELD_REFERENCE) {
        return new SqlFieldReferenceImpl(node);
      }
      else if (type == FILTER_CLAUSE) {
        return new SqlFilterClauseImpl(node);
      }
      else if (type == FINALITY) {
        return new SqlFinalityImpl(node);
      }
      else if (type == FLOOR_FUNCTION) {
        return new SqlFloorFunctionImpl(node);
      }
      else if (type == FOLD) {
        return new SqlFoldImpl(node);
      }
      else if (type == FREE_LOCATOR_STATEMENT) {
        return new SqlFreeLocatorStatementImpl(node);
      }
      else if (type == FROM_CLAUSE) {
        return new SqlFromClauseImpl(node);
      }
      else if (type == FROM_CONSTRUCTOR) {
        return new SqlFromConstructorImpl(node);
      }
      else if (type == FROM_DEFAULT) {
        return new SqlFromDefaultImpl(node);
      }
      else if (type == FROM_SQL) {
        return new SqlFromSqlImpl(node);
      }
      else if (type == FROM_SQL_FUNCTION) {
        return new SqlFromSqlFunctionImpl(node);
      }
      else if (type == FROM_SUBQUERY) {
        return new SqlFromSubqueryImpl(node);
      }
      else if (type == FULL_ORDERING_FORM) {
        return new SqlFullOrderingFormImpl(node);
      }
      else if (type == FUNCTION_SPECIFICATION) {
        return new SqlFunctionSpecificationImpl(node);
      }
      else if (type == GENERALIZED_EXPRESSION) {
        return new SqlGeneralizedExpressionImpl(node);
      }
      else if (type == GENERALIZED_INVOCATION) {
        return new SqlGeneralizedInvocationImpl(node);
      }
      else if (type == GENERAL_LITERAL) {
        return new SqlGeneralLiteralImpl(node);
      }
      else if (type == GENERAL_SET_FUNCTION) {
        return new SqlGeneralSetFunctionImpl(node);
      }
      else if (type == GENERAL_VALUE_SPECIFICATION) {
        return new SqlGeneralValueSpecificationImpl(node);
      }
      else if (type == GENERATION_CLAUSE) {
        return new SqlGenerationClauseImpl(node);
      }
      else if (type == GENERATION_EXPRESSION) {
        return new SqlGenerationExpressionImpl(node);
      }
      else if (type == GENERATION_RULE) {
        return new SqlGenerationRuleImpl(node);
      }
      else if (type == GET_DESCRIPTOR_INFORMATION) {
        return new SqlGetDescriptorInformationImpl(node);
      }
      else if (type == GET_DIAGNOSTICS_STATEMENT) {
        return new SqlGetDiagnosticsStatementImpl(node);
      }
      else if (type == GET_HEADER_INFORMATION) {
        return new SqlGetHeaderInformationImpl(node);
      }
      else if (type == GET_ITEM_INFORMATION) {
        return new SqlGetItemInformationImpl(node);
      }
      else if (type == GLOBAL_OR_LOCAL) {
        return new SqlGlobalOrLocalImpl(node);
      }
      else if (type == GOTO_TARGET) {
        return new SqlGotoTargetImpl(node);
      }
      else if (type == GO_TO) {
        return new SqlGoToImpl(node);
      }
      else if (type == GRANTEE) {
        return new SqlGranteeImpl(node);
      }
      else if (type == GRANTOR) {
        return new SqlGrantorImpl(node);
      }
      else if (type == GRANT_PRIVILEGE_STATEMENT) {
        return new SqlGrantPrivilegeStatementImpl(node);
      }
      else if (type == GRANT_ROLE_STATEMENT) {
        return new SqlGrantRoleStatementImpl(node);
      }
      else if (type == GRANT_STATEMENT) {
        return new SqlGrantStatementImpl(node);
      }
      else if (type == GREATER_THAN_OPERATOR) {
        return new SqlGreaterThanOperatorImpl(node);
      }
      else if (type == GREATER_THAN_OR_EQUALS_OPERATOR) {
        return new SqlGreaterThanOrEqualsOperatorImpl(node);
      }
      else if (type == GROUPING_COLUMN_REFERENCE) {
        return new SqlGroupingColumnReferenceImpl(node);
      }
      else if (type == GROUPING_COLUMN_REFERENCE_LIST) {
        return new SqlGroupingColumnReferenceListImpl(node);
      }
      else if (type == GROUPING_ELEMENT) {
        return new SqlGroupingElementImpl(node);
      }
      else if (type == GROUPING_ELEMENT_LIST) {
        return new SqlGroupingElementListImpl(node);
      }
      else if (type == GROUPING_OPERATION) {
        return new SqlGroupingOperationImpl(node);
      }
      else if (type == GROUPING_SET) {
        return new SqlGroupingSetImpl(node);
      }
      else if (type == GROUPING_SETS_SPECIFICATION) {
        return new SqlGroupingSetsSpecificationImpl(node);
      }
      else if (type == GROUPING_SET_LIST) {
        return new SqlGroupingSetListImpl(node);
      }
      else if (type == GROUP_BY_CLAUSE) {
        return new SqlGroupByClauseImpl(node);
      }
      else if (type == GROUP_NAME) {
        return new SqlGroupNameImpl(node);
      }
      else if (type == GROUP_SPECIFICATION) {
        return new SqlGroupSpecificationImpl(node);
      }
      else if (type == HAVING_CLAUSE) {
        return new SqlHavingClauseImpl(node);
      }
      else if (type == HEADER_ITEM_NAME) {
        return new SqlHeaderItemNameImpl(node);
      }
      else if (type == HEXIT) {
        return new SqlHexitImpl(node);
      }
      else if (type == HIGH_VALUE) {
        return new SqlHighValueImpl(node);
      }
      else if (type == HOLD_LOCATOR_STATEMENT) {
        return new SqlHoldLocatorStatementImpl(node);
      }
      else if (type == HOST_IDENTIFIER) {
        return new SqlHostIdentifierImpl(node);
      }
      else if (type == HOST_PARAMETER_DATA_TYPE) {
        return new SqlHostParameterDataTypeImpl(node);
      }
      else if (type == HOST_PARAMETER_DECLARATION) {
        return new SqlHostParameterDeclarationImpl(node);
      }
      else if (type == HOST_PARAMETER_DECLARATION_LIST) {
        return new SqlHostParameterDeclarationListImpl(node);
      }
      else if (type == HOST_PARAMETER_NAME) {
        return new SqlHostParameterNameImpl(node);
      }
      else if (type == HOST_PARAMETER_SPECIFICATION) {
        return new SqlHostParameterSpecificationImpl(node);
      }
      else if (type == HOST_VARIABLE_DEFINITION) {
        return new SqlHostVariableDefinitionImpl(node);
      }
      else if (type == HOURS_VALUE) {
        return new SqlHoursValueImpl(node);
      }
      else if (type == HYPOTHETICAL_SET_FUNCTION) {
        return new SqlHypotheticalSetFunctionImpl(node);
      }
      else if (type == HYPOTHETICAL_SET_FUNCTION_VALUE_EXPRESSION_LIST) {
        return new SqlHypotheticalSetFunctionValueExpressionListImpl(node);
      }
      else if (type == IDENTIFIER) {
        return new SqlIdentifierImpl(node);
      }
      else if (type == IDENTIFIER_BODY) {
        return new SqlIdentifierBodyImpl(node);
      }
      else if (type == IDENTIFIER_CHAIN) {
        return new SqlIdentifierChainImpl(node);
      }
      else if (type == IDENTIFIER_PART) {
        return new SqlIdentifierPartImpl(node);
      }
      else if (type == IDENTIFIER_START) {
        return new SqlIdentifierStartImpl(node);
      }
      else if (type == IDENTITY_COLUMN_SPECIFICATION) {
        return new SqlIdentityColumnSpecificationImpl(node);
      }
      else if (type == IDENTITY_OPTION) {
        return new SqlIdentityOptionImpl(node);
      }
      else if (type == IMPLEMENTATION_DEFINED_CHARACTER_SET_NAME) {
        return new SqlImplementationDefinedCharacterSetNameImpl(node);
      }
      else if (type == IMPLICITLY_TYPED_VALUE_SPECIFICATION) {
        return new SqlImplicitlyTypedValueSpecificationImpl(node);
      }
      else if (type == INCLUSIVE_USER_DEFINED_TYPE_SPECIFICATION) {
        return new SqlInclusiveUserDefinedTypeSpecificationImpl(node);
      }
      else if (type == INDEPENDENT_VARIABLE_EXPRESSION) {
        return new SqlIndependentVariableExpressionImpl(node);
      }
      else if (type == INDICATOR_PARAMETER) {
        return new SqlIndicatorParameterImpl(node);
      }
      else if (type == INDICATOR_VARIABLE) {
        return new SqlIndicatorVariableImpl(node);
      }
      else if (type == INPUT_USING_CLAUSE) {
        return new SqlInputUsingClauseImpl(node);
      }
      else if (type == INSERTION_TARGET) {
        return new SqlInsertionTargetImpl(node);
      }
      else if (type == INSERT_COLUMNS_AND_SOURCE) {
        return new SqlInsertColumnsAndSourceImpl(node);
      }
      else if (type == INSERT_COLUMN_LIST) {
        return new SqlInsertColumnListImpl(node);
      }
      else if (type == INSERT_STATEMENT) {
        return new SqlInsertStatementImpl(node);
      }
      else if (type == INSTANTIABLE_CLAUSE) {
        return new SqlInstantiableClauseImpl(node);
      }
      else if (type == INTERVAL_ABSOLUTE_VALUE_FUNCTION) {
        return new SqlIntervalAbsoluteValueFunctionImpl(node);
      }
      else if (type == INTERVAL_FACTOR) {
        return new SqlIntervalFactorImpl(node);
      }
      else if (type == INTERVAL_FRACTIONAL_SECONDS_PRECISION) {
        return new SqlIntervalFractionalSecondsPrecisionImpl(node);
      }
      else if (type == INTERVAL_LEADING_FIELD_PRECISION) {
        return new SqlIntervalLeadingFieldPrecisionImpl(node);
      }
      else if (type == INTERVAL_LITERAL) {
        return new SqlIntervalLiteralImpl(node);
      }
      else if (type == INTERVAL_PRIMARY) {
        return new SqlIntervalPrimaryImpl(node);
      }
      else if (type == INTERVAL_QUALIFIER) {
        return new SqlIntervalQualifierImpl(node);
      }
      else if (type == INTERVAL_STRING) {
        return new SqlIntervalStringImpl(node);
      }
      else if (type == INTERVAL_TERM) {
        return new SqlIntervalTermImpl(node);
      }
      else if (type == INTERVAL_TERM_1) {
        return new SqlIntervalTerm1Impl(node);
      }
      else if (type == INTERVAL_TERM_2) {
        return new SqlIntervalTerm2Impl(node);
      }
      else if (type == INTERVAL_TYPE) {
        return new SqlIntervalTypeImpl(node);
      }
      else if (type == INTERVAL_VALUE_EXPRESSION) {
        return new SqlIntervalValueExpressionImpl(node);
      }
      else if (type == INTERVAL_VALUE_EXPRESSION_1) {
        return new SqlIntervalValueExpression1Impl(node);
      }
      else if (type == INTERVAL_VALUE_FUNCTION) {
        return new SqlIntervalValueFunctionImpl(node);
      }
      else if (type == INTO_ARGUMENT) {
        return new SqlIntoArgumentImpl(node);
      }
      else if (type == INTO_ARGUMENTS) {
        return new SqlIntoArgumentsImpl(node);
      }
      else if (type == INTO_DESCRIPTOR) {
        return new SqlIntoDescriptorImpl(node);
      }
      else if (type == INTRODUCER) {
        return new SqlIntroducerImpl(node);
      }
      else if (type == INVERSE_DISTRIBUTION_FUNCTION) {
        return new SqlInverseDistributionFunctionImpl(node);
      }
      else if (type == INVERSE_DISTRIBUTION_FUNCTION_ARGUMENT) {
        return new SqlInverseDistributionFunctionArgumentImpl(node);
      }
      else if (type == INVERSE_DISTRIBUTION_FUNCTION_TYPE) {
        return new SqlInverseDistributionFunctionTypeImpl(node);
      }
      else if (type == IN_LINE_WINDOW_SPECIFICATION) {
        return new SqlInLineWindowSpecificationImpl(node);
      }
      else if (type == IN_PREDICATE) {
        return new SqlInPredicateImpl(node);
      }
      else if (type == IN_PREDICATE_PART_2) {
        return new SqlInPredicatePart2Impl(node);
      }
      else if (type == IN_PREDICATE_VALUE) {
        return new SqlInPredicateValueImpl(node);
      }
      else if (type == IN_VALUE_LIST) {
        return new SqlInValueListImpl(node);
      }
      else if (type == ISOLATION_LEVEL) {
        return new SqlIsolationLevelImpl(node);
      }
      else if (type == ITEM_NUMBER) {
        return new SqlItemNumberImpl(node);
      }
      else if (type == JOINED_TABLE) {
        return new SqlJoinedTableImpl(node);
      }
      else if (type == JOIN_COLUMN_LIST) {
        return new SqlJoinColumnListImpl(node);
      }
      else if (type == JOIN_CONDITION) {
        return new SqlJoinConditionImpl(node);
      }
      else if (type == JOIN_SPECIFICATION) {
        return new SqlJoinSpecificationImpl(node);
      }
      else if (type == JOIN_TYPE) {
        return new SqlJoinTypeImpl(node);
      }
      else if (type == KEY_WORD) {
        return new SqlKeyWordImpl(node);
      }
      else if (type == LANGUAGE_CLAUSE) {
        return new SqlLanguageClauseImpl(node);
      }
      else if (type == LANGUAGE_NAME) {
        return new SqlLanguageNameImpl(node);
      }
      else if (type == LARGE_OBJECT_LENGTH) {
        return new SqlLargeObjectLengthImpl(node);
      }
      else if (type == LARGE_OBJECT_LENGTH_TOKEN) {
        return new SqlLargeObjectLengthTokenImpl(node);
      }
      else if (type == LATERAL_DERIVED_TABLE) {
        return new SqlLateralDerivedTableImpl(node);
      }
      else if (type == LEFT_BRACE) {
        return new SqlLeftBraceImpl(node);
      }
      else if (type == LEFT_BRACKET) {
        return new SqlLeftBracketImpl(node);
      }
      else if (type == LEFT_BRACKET_OR_TRIGRAPH) {
        return new SqlLeftBracketOrTrigraphImpl(node);
      }
      else if (type == LEFT_BRACKET_TRIGRAPH) {
        return new SqlLeftBracketTrigraphImpl(node);
      }
      else if (type == LEFT_PAREN) {
        return new SqlLeftParenImpl(node);
      }
      else if (type == LENGTH) {
        return new SqlLengthImpl(node);
      }
      else if (type == LENGTH_EXPRESSION) {
        return new SqlLengthExpressionImpl(node);
      }
      else if (type == LESS_THAN_OPERATOR) {
        return new SqlLessThanOperatorImpl(node);
      }
      else if (type == LESS_THAN_OR_EQUALS_OPERATOR) {
        return new SqlLessThanOrEqualsOperatorImpl(node);
      }
      else if (type == LEVELS_CLAUSE) {
        return new SqlLevelsClauseImpl(node);
      }
      else if (type == LEVEL_OF_ISOLATION) {
        return new SqlLevelOfIsolationImpl(node);
      }
      else if (type == LIKE_CLAUSE) {
        return new SqlLikeClauseImpl(node);
      }
      else if (type == LIKE_OPTIONS) {
        return new SqlLikeOptionsImpl(node);
      }
      else if (type == LIKE_PREDICATE) {
        return new SqlLikePredicateImpl(node);
      }
      else if (type == LIST_OF_ATTRIBUTES) {
        return new SqlListOfAttributesImpl(node);
      }
      else if (type == LITERAL) {
        return new SqlLiteralImpl(node);
      }
      else if (type == LOCAL_OR_SCHEMA_QUALIFIED_NAME) {
        return new SqlLocalOrSchemaQualifiedNameImpl(node);
      }
      else if (type == LOCAL_OR_SCHEMA_QUALIFIER) {
        return new SqlLocalOrSchemaQualifierImpl(node);
      }
      else if (type == LOCAL_QUALIFIED_NAME) {
        return new SqlLocalQualifiedNameImpl(node);
      }
      else if (type == LOCAL_QUALIFIER) {
        return new SqlLocalQualifierImpl(node);
      }
      else if (type == LOCATOR_INDICATION) {
        return new SqlLocatorIndicationImpl(node);
      }
      else if (type == LOCATOR_REFERENCE) {
        return new SqlLocatorReferenceImpl(node);
      }
      else if (type == LOW_VALUE) {
        return new SqlLowValueImpl(node);
      }
      else if (type == MAJOR_CATEGORY) {
        return new SqlMajorCategoryImpl(node);
      }
      else if (type == MANTISSA) {
        return new SqlMantissaImpl(node);
      }
      else if (type == MAP_CATEGORY) {
        return new SqlMapCategoryImpl(node);
      }
      else if (type == MAP_FUNCTION_SPECIFICATION) {
        return new SqlMapFunctionSpecificationImpl(node);
      }
      else if (type == MATCH_PREDICATE) {
        return new SqlMatchPredicateImpl(node);
      }
      else if (type == MATCH_PREDICATE_PART_2) {
        return new SqlMatchPredicatePart2Impl(node);
      }
      else if (type == MATCH_TYPE) {
        return new SqlMatchTypeImpl(node);
      }
      else if (type == MAXIMUM_DYNAMIC_RESULT_SETS) {
        return new SqlMaximumDynamicResultSetsImpl(node);
      }
      else if (type == MEMBER) {
        return new SqlMemberImpl(node);
      }
      else if (type == MEMBER_LIST) {
        return new SqlMemberListImpl(node);
      }
      else if (type == MEMBER_NAME) {
        return new SqlMemberNameImpl(node);
      }
      else if (type == MEMBER_NAME_ALTERNATIVES) {
        return new SqlMemberNameAlternativesImpl(node);
      }
      else if (type == MEMBER_PREDICATE) {
        return new SqlMemberPredicateImpl(node);
      }
      else if (type == MEMBER_PREDICATE_PART_2) {
        return new SqlMemberPredicatePart2Impl(node);
      }
      else if (type == MERGE_CORRELATION_NAME) {
        return new SqlMergeCorrelationNameImpl(node);
      }
      else if (type == MERGE_INSERT_SPECIFICATION) {
        return new SqlMergeInsertSpecificationImpl(node);
      }
      else if (type == MERGE_INSERT_VALUE_ELEMENT) {
        return new SqlMergeInsertValueElementImpl(node);
      }
      else if (type == MERGE_INSERT_VALUE_LIST) {
        return new SqlMergeInsertValueListImpl(node);
      }
      else if (type == MERGE_OPERATION_SPECIFICATION) {
        return new SqlMergeOperationSpecificationImpl(node);
      }
      else if (type == MERGE_STATEMENT) {
        return new SqlMergeStatementImpl(node);
      }
      else if (type == MERGE_UPDATE_SPECIFICATION) {
        return new SqlMergeUpdateSpecificationImpl(node);
      }
      else if (type == MERGE_WHEN_CLAUSE) {
        return new SqlMergeWhenClauseImpl(node);
      }
      else if (type == MERGE_WHEN_MATCHED_CLAUSE) {
        return new SqlMergeWhenMatchedClauseImpl(node);
      }
      else if (type == MERGE_WHEN_NOT_MATCHED_CLAUSE) {
        return new SqlMergeWhenNotMatchedClauseImpl(node);
      }
      else if (type == METHOD_CHARACTERISTIC) {
        return new SqlMethodCharacteristicImpl(node);
      }
      else if (type == METHOD_CHARACTERISTICS) {
        return new SqlMethodCharacteristicsImpl(node);
      }
      else if (type == METHOD_INVOCATION) {
        return new SqlMethodInvocationImpl(node);
      }
      else if (type == METHOD_NAME) {
        return new SqlMethodNameImpl(node);
      }
      else if (type == METHOD_REFERENCE) {
        return new SqlMethodReferenceImpl(node);
      }
      else if (type == METHOD_SELECTION) {
        return new SqlMethodSelectionImpl(node);
      }
      else if (type == METHOD_SPECIFICATION) {
        return new SqlMethodSpecificationImpl(node);
      }
      else if (type == METHOD_SPECIFICATION_DESIGNATOR) {
        return new SqlMethodSpecificationDesignatorImpl(node);
      }
      else if (type == METHOD_SPECIFICATION_LIST) {
        return new SqlMethodSpecificationListImpl(node);
      }
      else if (type == MINUS_SIGN) {
        return new SqlMinusSignImpl(node);
      }
      else if (type == MINUTES_VALUE) {
        return new SqlMinutesValueImpl(node);
      }
      else if (type == MODULE_AUTHORIZATION_CLAUSE) {
        return new SqlModuleAuthorizationClauseImpl(node);
      }
      else if (type == MODULE_AUTHORIZATION_IDENTIFIER) {
        return new SqlModuleAuthorizationIdentifierImpl(node);
      }
      else if (type == MODULE_CHARACTER_SET_SPECIFICATION) {
        return new SqlModuleCharacterSetSpecificationImpl(node);
      }
      else if (type == MODULE_COLLATIONS) {
        return new SqlModuleCollationsImpl(node);
      }
      else if (type == MODULE_COLLATION_SPECIFICATION) {
        return new SqlModuleCollationSpecificationImpl(node);
      }
      else if (type == MODULE_CONTENTS) {
        return new SqlModuleContentsImpl(node);
      }
      else if (type == MODULE_NAME_CLAUSE) {
        return new SqlModuleNameClauseImpl(node);
      }
      else if (type == MODULE_PATH_SPECIFICATION) {
        return new SqlModulePathSpecificationImpl(node);
      }
      else if (type == MODULE_TRANSFORM_GROUP_SPECIFICATION) {
        return new SqlModuleTransformGroupSpecificationImpl(node);
      }
      else if (type == MODULUS_EXPRESSION) {
        return new SqlModulusExpressionImpl(node);
      }
      else if (type == MONTHS_VALUE) {
        return new SqlMonthsValueImpl(node);
      }
      else if (type == MULTIPLE_COLUMN_ASSIGNMENT) {
        return new SqlMultipleColumnAssignmentImpl(node);
      }
      else if (type == MULTIPLE_GROUP_SPECIFICATION) {
        return new SqlMultipleGroupSpecificationImpl(node);
      }
      else if (type == MULTIPLIER) {
        return new SqlMultiplierImpl(node);
      }
      else if (type == MULTISET_ELEMENT) {
        return new SqlMultisetElementImpl(node);
      }
      else if (type == MULTISET_ELEMENT_LIST) {
        return new SqlMultisetElementListImpl(node);
      }
      else if (type == MULTISET_ELEMENT_REFERENCE) {
        return new SqlMultisetElementReferenceImpl(node);
      }
      else if (type == MULTISET_PRIMARY) {
        return new SqlMultisetPrimaryImpl(node);
      }
      else if (type == MULTISET_SET_FUNCTION) {
        return new SqlMultisetSetFunctionImpl(node);
      }
      else if (type == MULTISET_TERM) {
        return new SqlMultisetTermImpl(node);
      }
      else if (type == MULTISET_TYPE) {
        return new SqlMultisetTypeImpl(node);
      }
      else if (type == MULTISET_VALUE_CONSTRUCTOR) {
        return new SqlMultisetValueConstructorImpl(node);
      }
      else if (type == MULTISET_VALUE_CONSTRUCTOR_BY_ENUMERATION) {
        return new SqlMultisetValueConstructorByEnumerationImpl(node);
      }
      else if (type == MULTISET_VALUE_CONSTRUCTOR_BY_QUERY) {
        return new SqlMultisetValueConstructorByQueryImpl(node);
      }
      else if (type == MULTISET_VALUE_EXPRESSION) {
        return new SqlMultisetValueExpressionImpl(node);
      }
      else if (type == MULTISET_VALUE_FUNCTION) {
        return new SqlMultisetValueFunctionImpl(node);
      }
      else if (type == MUTATED_SET_CLAUSE) {
        return new SqlMutatedSetClauseImpl(node);
      }
      else if (type == MUTATED_TARGET) {
        return new SqlMutatedTargetImpl(node);
      }
      else if (type == NAMED_COLUMNS_JOIN) {
        return new SqlNamedColumnsJoinImpl(node);
      }
      else if (type == NATIONAL_CHARACTER_STRING_LITERAL) {
        return new SqlNationalCharacterStringLiteralImpl(node);
      }
      else if (type == NATIONAL_CHARACTER_STRING_TYPE) {
        return new SqlNationalCharacterStringTypeImpl(node);
      }
      else if (type == NATURAL_JOIN) {
        return new SqlNaturalJoinImpl(node);
      }
      else if (type == NATURAL_LOGARITHM) {
        return new SqlNaturalLogarithmImpl(node);
      }
      else if (type == NESTING_OPTION) {
        return new SqlNestingOptionImpl(node);
      }
      else if (type == NEW_INVOCATION) {
        return new SqlNewInvocationImpl(node);
      }
      else if (type == NEW_SPECIFICATION) {
        return new SqlNewSpecificationImpl(node);
      }
      else if (type == NEW_VALUES_CORRELATION_NAME) {
        return new SqlNewValuesCorrelationNameImpl(node);
      }
      else if (type == NEW_VALUES_TABLE_ALIAS) {
        return new SqlNewValuesTableAliasImpl(node);
      }
      else if (type == NEW_WINDOW_NAME) {
        return new SqlNewWindowNameImpl(node);
      }
      else if (type == NEXT_VALUE_EXPRESSION) {
        return new SqlNextValueExpressionImpl(node);
      }
      else if (type == NONDELIMITER_TOKEN) {
        return new SqlNondelimiterTokenImpl(node);
      }
      else if (type == NONDOUBLEQUOTE_CHARACTER) {
        return new SqlNondoublequoteCharacterImpl(node);
      }
      else if (type == NONPARENTHESIZED_VALUE_EXPRESSION_PRIMARY) {
        return new SqlNonparenthesizedValueExpressionPrimaryImpl(node);
      }
      else if (type == NONQUOTE_CHARACTER) {
        return new SqlNonquoteCharacterImpl(node);
      }
      else if (type == NON_CYCLE_MARK_VALUE) {
        return new SqlNonCycleMarkValueImpl(node);
      }
      else if (type == NON_ESCAPED_CHARACTER) {
        return new SqlNonEscapedCharacterImpl(node);
      }
      else if (type == NON_JOIN_QUERY_EXPRESSION) {
        return new SqlNonJoinQueryExpressionImpl(node);
      }
      else if (type == NON_JOIN_QUERY_PRIMARY) {
        return new SqlNonJoinQueryPrimaryImpl(node);
      }
      else if (type == NON_JOIN_QUERY_TERM) {
        return new SqlNonJoinQueryTermImpl(node);
      }
      else if (type == NON_RESERVED_WORD) {
        return new SqlNonReservedWordImpl(node);
      }
      else if (type == NON_SECOND_PRIMARY_DATETIME_FIELD) {
        return new SqlNonSecondPrimaryDatetimeFieldImpl(node);
      }
      else if (type == NORMALIZED_PREDICATE) {
        return new SqlNormalizedPredicateImpl(node);
      }
      else if (type == NORMALIZE_FUNCTION) {
        return new SqlNormalizeFunctionImpl(node);
      }
      else if (type == NOT_EQUALS_OPERATOR) {
        return new SqlNotEqualsOperatorImpl(node);
      }
      else if (type == NULL_CALL_CLAUSE) {
        return new SqlNullCallClauseImpl(node);
      }
      else if (type == NULL_ORDERING) {
        return new SqlNullOrderingImpl(node);
      }
      else if (type == NULL_PREDICATE) {
        return new SqlNullPredicateImpl(node);
      }
      else if (type == NULL_PREDICATE_PART_2) {
        return new SqlNullPredicatePart2Impl(node);
      }
      else if (type == NULL_SPECIFICATION) {
        return new SqlNullSpecificationImpl(node);
      }
      else if (type == NUMBER_OF_CONDITIONS) {
        return new SqlNumberOfConditionsImpl(node);
      }
      else if (type == NUMERIC_PRIMARY) {
        return new SqlNumericPrimaryImpl(node);
      }
      else if (type == NUMERIC_TYPE) {
        return new SqlNumericTypeImpl(node);
      }
      else if (type == NUMERIC_VALUE_EXPRESSION) {
        return new SqlNumericValueExpressionImpl(node);
      }
      else if (type == NUMERIC_VALUE_EXPRESSION_BASE) {
        return new SqlNumericValueExpressionBaseImpl(node);
      }
      else if (type == NUMERIC_VALUE_EXPRESSION_EXPONENT) {
        return new SqlNumericValueExpressionExponentImpl(node);
      }
      else if (type == NUMERIC_VALUE_FUNCTION) {
        return new SqlNumericValueFunctionImpl(node);
      }
      else if (type == OBJECT_COLUMN) {
        return new SqlObjectColumnImpl(node);
      }
      else if (type == OBJECT_NAME) {
        return new SqlObjectNameImpl(node);
      }
      else if (type == OBJECT_PRIVILEGES) {
        return new SqlObjectPrivilegesImpl(node);
      }
      else if (type == OCCURRENCES) {
        return new SqlOccurrencesImpl(node);
      }
      else if (type == OCTET_LENGTH_EXPRESSION) {
        return new SqlOctetLengthExpressionImpl(node);
      }
      else if (type == OCTET_LIKE_PREDICATE) {
        return new SqlOctetLikePredicateImpl(node);
      }
      else if (type == OCTET_LIKE_PREDICATE_PART_2) {
        return new SqlOctetLikePredicatePart2Impl(node);
      }
      else if (type == OCTET_PATTERN) {
        return new SqlOctetPatternImpl(node);
      }
      else if (type == OLD_OR_NEW_VALUES_ALIAS) {
        return new SqlOldOrNewValuesAliasImpl(node);
      }
      else if (type == OLD_OR_NEW_VALUES_ALIAS_LIST) {
        return new SqlOldOrNewValuesAliasListImpl(node);
      }
      else if (type == OLD_VALUES_CORRELATION_NAME) {
        return new SqlOldValuesCorrelationNameImpl(node);
      }
      else if (type == OLD_VALUES_TABLE_ALIAS) {
        return new SqlOldValuesTableAliasImpl(node);
      }
      else if (type == ONLY_SPEC) {
        return new SqlOnlySpecImpl(node);
      }
      else if (type == OPEN_STATEMENT) {
        return new SqlOpenStatementImpl(node);
      }
      else if (type == ORDERED_SET_FUNCTION) {
        return new SqlOrderedSetFunctionImpl(node);
      }
      else if (type == ORDERING_CATEGORY) {
        return new SqlOrderingCategoryImpl(node);
      }
      else if (type == ORDERING_FORM) {
        return new SqlOrderingFormImpl(node);
      }
      else if (type == ORDERING_SPECIFICATION) {
        return new SqlOrderingSpecificationImpl(node);
      }
      else if (type == ORDER_BY_CLAUSE) {
        return new SqlOrderByClauseImpl(node);
      }
      else if (type == ORDINARY_GROUPING_SET) {
        return new SqlOrdinaryGroupingSetImpl(node);
      }
      else if (type == ORDINARY_GROUPING_SET_LIST) {
        return new SqlOrdinaryGroupingSetListImpl(node);
      }
      else if (type == ORIGINAL_METHOD_SPECIFICATION) {
        return new SqlOriginalMethodSpecificationImpl(node);
      }
      else if (type == OUTER_JOIN_TYPE) {
        return new SqlOuterJoinTypeImpl(node);
      }
      else if (type == OUTPUT_USING_CLAUSE) {
        return new SqlOutputUsingClauseImpl(node);
      }
      else if (type == OVERLAPS_PREDICATE) {
        return new SqlOverlapsPredicateImpl(node);
      }
      else if (type == OVERLAPS_PREDICATE_PART_1) {
        return new SqlOverlapsPredicatePart1Impl(node);
      }
      else if (type == OVERLAPS_PREDICATE_PART_2) {
        return new SqlOverlapsPredicatePart2Impl(node);
      }
      else if (type == OVERRIDE_CLAUSE) {
        return new SqlOverrideClauseImpl(node);
      }
      else if (type == OVERRIDING_METHOD_SPECIFICATION) {
        return new SqlOverridingMethodSpecificationImpl(node);
      }
      else if (type == PAD_CHARACTERISTIC) {
        return new SqlPadCharacteristicImpl(node);
      }
      else if (type == PARAMETER_MODE) {
        return new SqlParameterModeImpl(node);
      }
      else if (type == PARAMETER_STYLE) {
        return new SqlParameterStyleImpl(node);
      }
      else if (type == PARAMETER_STYLE_CLAUSE) {
        return new SqlParameterStyleClauseImpl(node);
      }
      else if (type == PARAMETER_TYPE) {
        return new SqlParameterTypeImpl(node);
      }
      else if (type == PARAMETER_USING_CLAUSE) {
        return new SqlParameterUsingClauseImpl(node);
      }
      else if (type == PARENTHESIZED_BOOLEAN_VALUE_EXPRESSION) {
        return new SqlParenthesizedBooleanValueExpressionImpl(node);
      }
      else if (type == PARENTHESIZED_VALUE_EXPRESSION) {
        return new SqlParenthesizedValueExpressionImpl(node);
      }
      else if (type == PARTIAL_METHOD_SPECIFICATION) {
        return new SqlPartialMethodSpecificationImpl(node);
      }
      else if (type == PATH_COLUMN) {
        return new SqlPathColumnImpl(node);
      }
      else if (type == PATH_RESOLVED_USER_DEFINED_TYPE_NAME) {
        return new SqlPathResolvedUserDefinedTypeNameImpl(node);
      }
      else if (type == PATH_SPECIFICATION) {
        return new SqlPathSpecificationImpl(node);
      }
      else if (type == PERCENT) {
        return new SqlPercentImpl(node);
      }
      else if (type == PERIOD) {
        return new SqlPeriodImpl(node);
      }
      else if (type == PLUS_SIGN) {
        return new SqlPlusSignImpl(node);
      }
      else if (type == POSITION_EXPRESSION) {
        return new SqlPositionExpressionImpl(node);
      }
      else if (type == POWER_FUNCTION) {
        return new SqlPowerFunctionImpl(node);
      }
      else if (type == PRECISION) {
        return new SqlPrecisionImpl(node);
      }
      else if (type == PREDEFINED_TYPE) {
        return new SqlPredefinedTypeImpl(node);
      }
      else if (type == PREDICATE) {
        return new SqlPredicateImpl(node);
      }
      else if (type == PREPARABLE_DYNAMIC_DELETE_STATEMENT_POSITIONED) {
        return new SqlPreparableDynamicDeleteStatementPositionedImpl(node);
      }
      else if (type == PREPARABLE_DYNAMIC_UPDATE_STATEMENT_POSITIONED) {
        return new SqlPreparableDynamicUpdateStatementPositionedImpl(node);
      }
      else if (type == PREPARABLE_IMPLEMENTATION_DEFINED_STATEMENT) {
        return new SqlPreparableImplementationDefinedStatementImpl(node);
      }
      else if (type == PREPARABLE_SQL_CONTROL_STATEMENT) {
        return new SqlPreparableSQLControlStatementImpl(node);
      }
      else if (type == PREPARABLE_SQL_DATA_STATEMENT) {
        return new SqlPreparableSQLDataStatementImpl(node);
      }
      else if (type == PREPARABLE_SQL_SCHEMA_STATEMENT) {
        return new SqlPreparableSQLSchemaStatementImpl(node);
      }
      else if (type == PREPARABLE_SQL_SESSION_STATEMENT) {
        return new SqlPreparableSQLSessionStatementImpl(node);
      }
      else if (type == PREPARABLE_SQL_TRANSACTION_STATEMENT) {
        return new SqlPreparableSQLTransactionStatementImpl(node);
      }
      else if (type == PREPARABLE_STATEMENT) {
        return new SqlPreparableStatementImpl(node);
      }
      else if (type == PREPARE_STATEMENT) {
        return new SqlPrepareStatementImpl(node);
      }
      else if (type == PRIMARY_DATETIME_FIELD) {
        return new SqlPrimaryDatetimeFieldImpl(node);
      }
      else if (type == PRIVILEGES) {
        return new SqlPrivilegesImpl(node);
      }
      else if (type == PRIVILEGE_COLUMN_LIST) {
        return new SqlPrivilegeColumnListImpl(node);
      }
      else if (type == PRIVILEGE_METHOD_LIST) {
        return new SqlPrivilegeMethodListImpl(node);
      }
      else if (type == PROCEDURE_NAME) {
        return new SqlProcedureNameImpl(node);
      }
      else if (type == QUALIFIED_ASTERISK) {
        return new SqlQualifiedAsteriskImpl(node);
      }
      else if (type == QUALIFIED_IDENTIFIER) {
        return new SqlQualifiedIdentifierImpl(node);
      }
      else if (type == QUALIFIED_JOIN) {
        return new SqlQualifiedJoinImpl(node);
      }
      else if (type == QUANTIFIED_COMPARISON_PREDICATE) {
        return new SqlQuantifiedComparisonPredicateImpl(node);
      }
      else if (type == QUANTIFIED_COMPARISON_PREDICATE_PART_2) {
        return new SqlQuantifiedComparisonPredicatePart2Impl(node);
      }
      else if (type == QUANTIFIER) {
        return new SqlQuantifierImpl(node);
      }
      else if (type == QUERY_EXPRESSION) {
        return new SqlQueryExpressionImpl(node);
      }
      else if (type == QUERY_EXPRESSION_BODY) {
        return new SqlQueryExpressionBodyImpl(node);
      }
      else if (type == QUERY_NAME) {
        return new SqlQueryNameImpl(node);
      }
      else if (type == QUERY_PRIMARY) {
        return new SqlQueryPrimaryImpl(node);
      }
      else if (type == QUERY_SPECIFICATION) {
        return new SqlQuerySpecificationImpl(node);
      }
      else if (type == QUERY_TERM) {
        return new SqlQueryTermImpl(node);
      }
      else if (type == QUESTION_MARK) {
        return new SqlQuestionMarkImpl(node);
      }
      else if (type == QUOTE) {
        return new SqlQuoteImpl(node);
      }
      else if (type == QUOTE_SYMBOL) {
        return new SqlQuoteSymbolImpl(node);
      }
      else if (type == RANK_FUNCTION_TYPE) {
        return new SqlRankFunctionTypeImpl(node);
      }
      else if (type == RECURSIVE_SEARCH_ORDER) {
        return new SqlRecursiveSearchOrderImpl(node);
      }
      else if (type == REFERENCEABLE_VIEW_SPECIFICATION) {
        return new SqlReferenceableViewSpecificationImpl(node);
      }
      else if (type == REFERENCED_TABLE_AND_COLUMNS) {
        return new SqlReferencedTableAndColumnsImpl(node);
      }
      else if (type == REFERENCED_TYPE) {
        return new SqlReferencedTypeImpl(node);
      }
      else if (type == REFERENCES_SPECIFICATION) {
        return new SqlReferencesSpecificationImpl(node);
      }
      else if (type == REFERENCE_COLUMN_LIST) {
        return new SqlReferenceColumnListImpl(node);
      }
      else if (type == REFERENCE_GENERATION) {
        return new SqlReferenceGenerationImpl(node);
      }
      else if (type == REFERENCE_RESOLUTION) {
        return new SqlReferenceResolutionImpl(node);
      }
      else if (type == REFERENCE_SCOPE_CHECK) {
        return new SqlReferenceScopeCheckImpl(node);
      }
      else if (type == REFERENCE_SCOPE_CHECK_ACTION) {
        return new SqlReferenceScopeCheckActionImpl(node);
      }
      else if (type == REFERENCE_TYPE) {
        return new SqlReferenceTypeImpl(node);
      }
      else if (type == REFERENCE_TYPE_SPECIFICATION) {
        return new SqlReferenceTypeSpecificationImpl(node);
      }
      else if (type == REFERENCE_VALUE_EXPRESSION) {
        return new SqlReferenceValueExpressionImpl(node);
      }
      else if (type == REFERENCING_COLUMNS) {
        return new SqlReferencingColumnsImpl(node);
      }
      else if (type == REFERENTIAL_ACTION) {
        return new SqlReferentialActionImpl(node);
      }
      else if (type == REFERENTIAL_CONSTRAINT_DEFINITION) {
        return new SqlReferentialConstraintDefinitionImpl(node);
      }
      else if (type == REFERENTIAL_TRIGGERED_ACTION) {
        return new SqlReferentialTriggeredActionImpl(node);
      }
      else if (type == REF_CAST_OPTION) {
        return new SqlRefCastOptionImpl(node);
      }
      else if (type == REGULAR_CHARACTER_SET) {
        return new SqlRegularCharacterSetImpl(node);
      }
      else if (type == REGULAR_CHARACTER_SET_IDENTIFIER) {
        return new SqlRegularCharacterSetIdentifierImpl(node);
      }
      else if (type == REGULAR_EXPRESSION) {
        return new SqlRegularExpressionImpl(node);
      }
      else if (type == REGULAR_EXPRESSION_SUBSTRING_FUNCTION) {
        return new SqlRegularExpressionSubstringFunctionImpl(node);
      }
      else if (type == REGULAR_FACTOR) {
        return new SqlRegularFactorImpl(node);
      }
      else if (type == REGULAR_IDENTIFIER) {
        return new SqlRegularIdentifierImpl(node);
      }
      else if (type == REGULAR_PRIMARY) {
        return new SqlRegularPrimaryImpl(node);
      }
      else if (type == REGULAR_TERM) {
        return new SqlRegularTermImpl(node);
      }
      else if (type == REGULAR_VIEW_SPECIFICATION) {
        return new SqlRegularViewSpecificationImpl(node);
      }
      else if (type == RELATIVE_CATEGORY) {
        return new SqlRelativeCategoryImpl(node);
      }
      else if (type == RELATIVE_FUNCTION_SPECIFICATION) {
        return new SqlRelativeFunctionSpecificationImpl(node);
      }
      else if (type == RELEASE_SAVEPOINT_STATEMENT) {
        return new SqlReleaseSavepointStatementImpl(node);
      }
      else if (type == REPEATABLE_CLAUSE) {
        return new SqlRepeatableClauseImpl(node);
      }
      else if (type == REPEAT_ARGUMENT) {
        return new SqlRepeatArgumentImpl(node);
      }
      else if (type == REPEAT_FACTOR) {
        return new SqlRepeatFactorImpl(node);
      }
      else if (type == REPRESENTATION) {
        return new SqlRepresentationImpl(node);
      }
      else if (type == RESERVED_WORD) {
        return new SqlReservedWordImpl(node);
      }
      else if (type == RESULT) {
        return new SqlResultImpl(node);
      }
      else if (type == RESULT_CAST) {
        return new SqlResultCastImpl(node);
      }
      else if (type == RESULT_CAST_FROM_TYPE) {
        return new SqlResultCastFromTypeImpl(node);
      }
      else if (type == RESULT_EXPRESSION) {
        return new SqlResultExpressionImpl(node);
      }
      else if (type == RESULT_SET_CURSOR) {
        return new SqlResultSetCursorImpl(node);
      }
      else if (type == RESULT_USING_CLAUSE) {
        return new SqlResultUsingClauseImpl(node);
      }
      else if (type == RETURNS_CLAUSE) {
        return new SqlReturnsClauseImpl(node);
      }
      else if (type == RETURNS_DATA_TYPE) {
        return new SqlReturnsDataTypeImpl(node);
      }
      else if (type == RETURNS_TABLE_TYPE) {
        return new SqlReturnsTableTypeImpl(node);
      }
      else if (type == RETURNS_TYPE) {
        return new SqlReturnsTypeImpl(node);
      }
      else if (type == RETURN_STATEMENT) {
        return new SqlReturnStatementImpl(node);
      }
      else if (type == RETURN_VALUE) {
        return new SqlReturnValueImpl(node);
      }
      else if (type == REVOKE_OPTION_EXTENSION) {
        return new SqlRevokeOptionExtensionImpl(node);
      }
      else if (type == REVOKE_PRIVILEGE_STATEMENT) {
        return new SqlRevokePrivilegeStatementImpl(node);
      }
      else if (type == REVOKE_ROLE_STATEMENT) {
        return new SqlRevokeRoleStatementImpl(node);
      }
      else if (type == REVOKE_STATEMENT) {
        return new SqlRevokeStatementImpl(node);
      }
      else if (type == RIGHTS_CLAUSE) {
        return new SqlRightsClauseImpl(node);
      }
      else if (type == RIGHT_ARROW) {
        return new SqlRightArrowImpl(node);
      }
      else if (type == RIGHT_BRACE) {
        return new SqlRightBraceImpl(node);
      }
      else if (type == RIGHT_BRACKET_OR_TRIGRAPH) {
        return new SqlRightBracketOrTrigraphImpl(node);
      }
      else if (type == RIGHT_PAREN) {
        return new SqlRightParenImpl(node);
      }
      else if (type == ROLE_DEFINITION) {
        return new SqlRoleDefinitionImpl(node);
      }
      else if (type == ROLE_GRANTED) {
        return new SqlRoleGrantedImpl(node);
      }
      else if (type == ROLE_NAME) {
        return new SqlRoleNameImpl(node);
      }
      else if (type == ROLE_REVOKED) {
        return new SqlRoleRevokedImpl(node);
      }
      else if (type == ROLE_SPECIFICATION) {
        return new SqlRoleSpecificationImpl(node);
      }
      else if (type == ROLLBACK_STATEMENT) {
        return new SqlRollbackStatementImpl(node);
      }
      else if (type == ROLLUP_LIST) {
        return new SqlRollupListImpl(node);
      }
      else if (type == ROUTINE_BODY) {
        return new SqlRoutineBodyImpl(node);
      }
      else if (type == ROUTINE_CHARACTERISTIC) {
        return new SqlRoutineCharacteristicImpl(node);
      }
      else if (type == ROUTINE_CHARACTERISTICS) {
        return new SqlRoutineCharacteristicsImpl(node);
      }
      else if (type == ROUTINE_INVOCATION) {
        return new SqlRoutineInvocationImpl(node);
      }
      else if (type == ROUTINE_NAME) {
        return new SqlRoutineNameImpl(node);
      }
      else if (type == ROUTINE_TYPE) {
        return new SqlRoutineTypeImpl(node);
      }
      else if (type == ROW_SUBQUERY) {
        return new SqlRowSubqueryImpl(node);
      }
      else if (type == ROW_TYPE) {
        return new SqlRowTypeImpl(node);
      }
      else if (type == ROW_TYPE_BODY) {
        return new SqlRowTypeBodyImpl(node);
      }
      else if (type == ROW_VALUE_CONSTRUCTOR) {
        return new SqlRowValueConstructorImpl(node);
      }
      else if (type == ROW_VALUE_CONSTRUCTOR_ELEMENT) {
        return new SqlRowValueConstructorElementImpl(node);
      }
      else if (type == ROW_VALUE_CONSTRUCTOR_ELEMENT_LIST) {
        return new SqlRowValueConstructorElementListImpl(node);
      }
      else if (type == ROW_VALUE_CONSTRUCTOR_PREDICAND) {
        return new SqlRowValueConstructorPredicandImpl(node);
      }
      else if (type == ROW_VALUE_EXPRESSION) {
        return new SqlRowValueExpressionImpl(node);
      }
      else if (type == ROW_VALUE_EXPRESSION_LIST) {
        return new SqlRowValueExpressionListImpl(node);
      }
      else if (type == ROW_VALUE_PREDICAND) {
        return new SqlRowValuePredicandImpl(node);
      }
      else if (type == ROW_VALUE_PREDICAND_1) {
        return new SqlRowValuePredicand1Impl(node);
      }
      else if (type == ROW_VALUE_PREDICAND_2) {
        return new SqlRowValuePredicand2Impl(node);
      }
      else if (type == ROW_VALUE_PREDICAND_3) {
        return new SqlRowValuePredicand3Impl(node);
      }
      else if (type == ROW_VALUE_PREDICAND_4) {
        return new SqlRowValuePredicand4Impl(node);
      }
      else if (type == ROW_VALUE_SPECIAL_CASE) {
        return new SqlRowValueSpecialCaseImpl(node);
      }
      else if (type == SAMPLE_CLAUSE) {
        return new SqlSampleClauseImpl(node);
      }
      else if (type == SAMPLE_METHOD) {
        return new SqlSampleMethodImpl(node);
      }
      else if (type == SAMPLE_PERCENTAGE) {
        return new SqlSamplePercentageImpl(node);
      }
      else if (type == SAVEPOINT_CLAUSE) {
        return new SqlSavepointClauseImpl(node);
      }
      else if (type == SAVEPOINT_LEVEL_INDICATION) {
        return new SqlSavepointLevelIndicationImpl(node);
      }
      else if (type == SAVEPOINT_NAME) {
        return new SqlSavepointNameImpl(node);
      }
      else if (type == SAVEPOINT_SPECIFIER) {
        return new SqlSavepointSpecifierImpl(node);
      }
      else if (type == SAVEPOINT_STATEMENT) {
        return new SqlSavepointStatementImpl(node);
      }
      else if (type == SCALAR_SUBQUERY) {
        return new SqlScalarSubqueryImpl(node);
      }
      else if (type == SCALE) {
        return new SqlScaleImpl(node);
      }
      else if (type == SCHEMA_AUTHORIZATION_IDENTIFIER) {
        return new SqlSchemaAuthorizationIdentifierImpl(node);
      }
      else if (type == SCHEMA_CHARACTER_SET_OR_PATH) {
        return new SqlSchemaCharacterSetOrPathImpl(node);
      }
      else if (type == SCHEMA_CHARACTER_SET_SPECIFICATION) {
        return new SqlSchemaCharacterSetSpecificationImpl(node);
      }
      else if (type == SCHEMA_DEFINITION) {
        return new SqlSchemaDefinitionImpl(node);
      }
      else if (type == SCHEMA_ELEMENT) {
        return new SqlSchemaElementImpl(node);
      }
      else if (type == SCHEMA_FUNCTION) {
        return new SqlSchemaFunctionImpl(node);
      }
      else if (type == SCHEMA_NAME) {
        return new SqlSchemaNameImpl(node);
      }
      else if (type == SCHEMA_NAME_CHARACTERISTIC) {
        return new SqlSchemaNameCharacteristicImpl(node);
      }
      else if (type == SCHEMA_NAME_CLAUSE) {
        return new SqlSchemaNameClauseImpl(node);
      }
      else if (type == SCHEMA_NAME_LIST) {
        return new SqlSchemaNameListImpl(node);
      }
      else if (type == SCHEMA_PATH_SPECIFICATION) {
        return new SqlSchemaPathSpecificationImpl(node);
      }
      else if (type == SCHEMA_PROCEDURE) {
        return new SqlSchemaProcedureImpl(node);
      }
      else if (type == SCHEMA_QUALIFIED_NAME) {
        return new SqlSchemaQualifiedNameImpl(node);
      }
      else if (type == SCHEMA_QUALIFIED_ROUTINE_NAME) {
        return new SqlSchemaQualifiedRoutineNameImpl(node);
      }
      else if (type == SCHEMA_QUALIFIED_TYPE_NAME) {
        return new SqlSchemaQualifiedTypeNameImpl(node);
      }
      else if (type == SCHEMA_RESOLVED_USER_DEFINED_TYPE_NAME) {
        return new SqlSchemaResolvedUserDefinedTypeNameImpl(node);
      }
      else if (type == SCHEMA_ROUTINE) {
        return new SqlSchemaRoutineImpl(node);
      }
      else if (type == SCOPE_CLAUSE) {
        return new SqlScopeClauseImpl(node);
      }
      else if (type == SCOPE_OPTION) {
        return new SqlScopeOptionImpl(node);
      }
      else if (type == SEARCHED_CASE) {
        return new SqlSearchedCaseImpl(node);
      }
      else if (type == SEARCHED_WHEN_CLAUSE) {
        return new SqlSearchedWhenClauseImpl(node);
      }
      else if (type == SEARCH_CLAUSE) {
        return new SqlSearchClauseImpl(node);
      }
      else if (type == SEARCH_CONDITION) {
        return new SqlSearchConditionImpl(node);
      }
      else if (type == SEARCH_OR_CYCLE_CLAUSE) {
        return new SqlSearchOrCycleClauseImpl(node);
      }
      else if (type == SECONDS_FRACTION) {
        return new SqlSecondsFractionImpl(node);
      }
      else if (type == SECONDS_INTEGER_VALUE) {
        return new SqlSecondsIntegerValueImpl(node);
      }
      else if (type == SECONDS_VALUE) {
        return new SqlSecondsValueImpl(node);
      }
      else if (type == SELECT_LIST) {
        return new SqlSelectListImpl(node);
      }
      else if (type == SELECT_STATEMENT_SINGLE_ROW) {
        return new SqlSelectStatementSingleRowImpl(node);
      }
      else if (type == SELECT_SUBLIST) {
        return new SqlSelectSublistImpl(node);
      }
      else if (type == SELECT_TARGET_LIST) {
        return new SqlSelectTargetListImpl(node);
      }
      else if (type == SELF_REFERENCING_COLUMN_NAME) {
        return new SqlSelfReferencingColumnNameImpl(node);
      }
      else if (type == SELF_REFERENCING_COLUMN_SPECIFICATION) {
        return new SqlSelfReferencingColumnSpecificationImpl(node);
      }
      else if (type == SEMICOLON) {
        return new SqlSemicolonImpl(node);
      }
      else if (type == SEPARATOR) {
        return new SqlSeparatorImpl(node);
      }
      else if (type == SEQUENCE_COLUMN) {
        return new SqlSequenceColumnImpl(node);
      }
      else if (type == SEQUENCE_GENERATOR_CYCLE_OPTION) {
        return new SqlSequenceGeneratorCycleOptionImpl(node);
      }
      else if (type == SEQUENCE_GENERATOR_DATA_TYPE_OPTION) {
        return new SqlSequenceGeneratorDataTypeOptionImpl(node);
      }
      else if (type == SEQUENCE_GENERATOR_DEFINITION) {
        return new SqlSequenceGeneratorDefinitionImpl(node);
      }
      else if (type == SEQUENCE_GENERATOR_INCREMENT) {
        return new SqlSequenceGeneratorIncrementImpl(node);
      }
      else if (type == SEQUENCE_GENERATOR_INCREMENT_BY_OPTION) {
        return new SqlSequenceGeneratorIncrementByOptionImpl(node);
      }
      else if (type == SEQUENCE_GENERATOR_MAXVALUE_OPTION) {
        return new SqlSequenceGeneratorMaxvalueOptionImpl(node);
      }
      else if (type == SEQUENCE_GENERATOR_MAX_VALUE) {
        return new SqlSequenceGeneratorMaxValueImpl(node);
      }
      else if (type == SEQUENCE_GENERATOR_MINVALUE_OPTION) {
        return new SqlSequenceGeneratorMinvalueOptionImpl(node);
      }
      else if (type == SEQUENCE_GENERATOR_MIN_VALUE) {
        return new SqlSequenceGeneratorMinValueImpl(node);
      }
      else if (type == SEQUENCE_GENERATOR_NAME) {
        return new SqlSequenceGeneratorNameImpl(node);
      }
      else if (type == SEQUENCE_GENERATOR_OPTION) {
        return new SqlSequenceGeneratorOptionImpl(node);
      }
      else if (type == SEQUENCE_GENERATOR_OPTIONS) {
        return new SqlSequenceGeneratorOptionsImpl(node);
      }
      else if (type == SEQUENCE_GENERATOR_RESTART_VALUE) {
        return new SqlSequenceGeneratorRestartValueImpl(node);
      }
      else if (type == SEQUENCE_GENERATOR_START_VALUE) {
        return new SqlSequenceGeneratorStartValueImpl(node);
      }
      else if (type == SEQUENCE_GENERATOR_START_WITH_OPTION) {
        return new SqlSequenceGeneratorStartWithOptionImpl(node);
      }
      else if (type == SESSION_CHARACTERISTIC) {
        return new SqlSessionCharacteristicImpl(node);
      }
      else if (type == SESSION_CHARACTERISTIC_LIST) {
        return new SqlSessionCharacteristicListImpl(node);
      }
      else if (type == SET_CATALOG_STATEMENT) {
        return new SqlSetCatalogStatementImpl(node);
      }
      else if (type == SET_CLAUSE) {
        return new SqlSetClauseImpl(node);
      }
      else if (type == SET_CLAUSE_LIST) {
        return new SqlSetClauseListImpl(node);
      }
      else if (type == SET_COLUMN_DEFAULT_CLAUSE) {
        return new SqlSetColumnDefaultClauseImpl(node);
      }
      else if (type == SET_CONNECTION_STATEMENT) {
        return new SqlSetConnectionStatementImpl(node);
      }
      else if (type == SET_CONSTRAINTS_MODE_STATEMENT) {
        return new SqlSetConstraintsModeStatementImpl(node);
      }
      else if (type == SET_DESCRIPTOR_INFORMATION) {
        return new SqlSetDescriptorInformationImpl(node);
      }
      else if (type == SET_DOMAIN_DEFAULT_CLAUSE) {
        return new SqlSetDomainDefaultClauseImpl(node);
      }
      else if (type == SET_FUNCTION_SPECIFICATION) {
        return new SqlSetFunctionSpecificationImpl(node);
      }
      else if (type == SET_FUNCTION_TYPE) {
        return new SqlSetFunctionTypeImpl(node);
      }
      else if (type == SET_HEADER_INFORMATION) {
        return new SqlSetHeaderInformationImpl(node);
      }
      else if (type == SET_ITEM_INFORMATION) {
        return new SqlSetItemInformationImpl(node);
      }
      else if (type == SET_LOCAL_TIME_ZONE_STATEMENT) {
        return new SqlSetLocalTimeZoneStatementImpl(node);
      }
      else if (type == SET_NAMES_STATEMENT) {
        return new SqlSetNamesStatementImpl(node);
      }
      else if (type == SET_PATH_STATEMENT) {
        return new SqlSetPathStatementImpl(node);
      }
      else if (type == SET_PREDICATE) {
        return new SqlSetPredicateImpl(node);
      }
      else if (type == SET_PREDICATE_PART_2) {
        return new SqlSetPredicatePart2Impl(node);
      }
      else if (type == SET_QUANTIFIER) {
        return new SqlSetQuantifierImpl(node);
      }
      else if (type == SET_ROLE_STATEMENT) {
        return new SqlSetRoleStatementImpl(node);
      }
      else if (type == SET_SCHEMA_STATEMENT) {
        return new SqlSetSchemaStatementImpl(node);
      }
      else if (type == SET_SESSION_CHARACTERISTICS_STATEMENT) {
        return new SqlSetSessionCharacteristicsStatementImpl(node);
      }
      else if (type == SET_SESSION_COLLATION_STATEMENT) {
        return new SqlSetSessionCollationStatementImpl(node);
      }
      else if (type == SET_SESSION_USER_IDENTIFIER_STATEMENT) {
        return new SqlSetSessionUserIdentifierStatementImpl(node);
      }
      else if (type == SET_TARGET) {
        return new SqlSetTargetImpl(node);
      }
      else if (type == SET_TARGET_LIST) {
        return new SqlSetTargetListImpl(node);
      }
      else if (type == SET_TIME_ZONE_VALUE) {
        return new SqlSetTimeZoneValueImpl(node);
      }
      else if (type == SET_TRANSACTION_STATEMENT) {
        return new SqlSetTransactionStatementImpl(node);
      }
      else if (type == SET_TRANSFORM_GROUP_STATEMENT) {
        return new SqlSetTransformGroupStatementImpl(node);
      }
      else if (type == SIGN) {
        return new SqlSignImpl(node);
      }
      else if (type == SIGNED_INTEGER) {
        return new SqlSignedIntegerImpl(node);
      }
      else if (type == SIGNED_NUMERIC_LITERAL) {
        return new SqlSignedNumericLiteralImpl(node);
      }
      else if (type == SIMILAR_PATTERN) {
        return new SqlSimilarPatternImpl(node);
      }
      else if (type == SIMILAR_PREDICATE) {
        return new SqlSimilarPredicateImpl(node);
      }
      else if (type == SIMILAR_PREDICATE_PART_2) {
        return new SqlSimilarPredicatePart2Impl(node);
      }
      else if (type == SIMPLE_CASE) {
        return new SqlSimpleCaseImpl(node);
      }
      else if (type == SIMPLE_COMMENT) {
        return new SqlSimpleCommentImpl(node);
      }
      else if (type == SIMPLE_COMMENT_INTRODUCER) {
        return new SqlSimpleCommentIntroducerImpl(node);
      }
      else if (type == SIMPLE_LATIN_LETTER) {
        return new SqlSimpleLatinLetterImpl(node);
      }
      else if (type == SIMPLE_LATIN_LOWER_CASE_LETTER) {
        return new SqlSimpleLatinLowerCaseLetterImpl(node);
      }
      else if (type == SIMPLE_LATIN_UPPER_CASE_LETTER) {
        return new SqlSimpleLatinUpperCaseLetterImpl(node);
      }
      else if (type == SIMPLE_TABLE) {
        return new SqlSimpleTableImpl(node);
      }
      else if (type == SIMPLE_TARGET_SPECIFICATION) {
        return new SqlSimpleTargetSpecificationImpl(node);
      }
      else if (type == SIMPLE_TARGET_SPECIFICATION_1) {
        return new SqlSimpleTargetSpecification1Impl(node);
      }
      else if (type == SIMPLE_TARGET_SPECIFICATION_2) {
        return new SqlSimpleTargetSpecification2Impl(node);
      }
      else if (type == SIMPLE_VALUE_SPECIFICATION) {
        return new SqlSimpleValueSpecificationImpl(node);
      }
      else if (type == SIMPLE_VALUE_SPECIFICATION_1) {
        return new SqlSimpleValueSpecification1Impl(node);
      }
      else if (type == SIMPLE_VALUE_SPECIFICATION_2) {
        return new SqlSimpleValueSpecification2Impl(node);
      }
      else if (type == SIMPLE_WHEN_CLAUSE) {
        return new SqlSimpleWhenClauseImpl(node);
      }
      else if (type == SINGLE_DATETIME_FIELD) {
        return new SqlSingleDatetimeFieldImpl(node);
      }
      else if (type == SINGLE_GROUP_SPECIFICATION) {
        return new SqlSingleGroupSpecificationImpl(node);
      }
      else if (type == SLASH) {
        return new SqlSlashImpl(node);
      }
      else if (type == SOLIDUS) {
        return new SqlSolidusImpl(node);
      }
      else if (type == SOME) {
        return new SqlSomeImpl(node);
      }
      else if (type == SORT_KEY) {
        return new SqlSortKeyImpl(node);
      }
      else if (type == SORT_SPECIFICATION) {
        return new SqlSortSpecificationImpl(node);
      }
      else if (type == SORT_SPECIFICATION_LIST) {
        return new SqlSortSpecificationListImpl(node);
      }
      else if (type == SOURCE_CHARACTER_SET_SPECIFICATION) {
        return new SqlSourceCharacterSetSpecificationImpl(node);
      }
      else if (type == SOURCE_DATA_TYPE) {
        return new SqlSourceDataTypeImpl(node);
      }
      else if (type == SPACE) {
        return new SqlSpaceImpl(node);
      }
      else if (type == SPECIFIC_METHOD_NAME) {
        return new SqlSpecificMethodNameImpl(node);
      }
      else if (type == SPECIFIC_METHOD_SPECIFICATION_DESIGNATOR) {
        return new SqlSpecificMethodSpecificationDesignatorImpl(node);
      }
      else if (type == SPECIFIC_NAME) {
        return new SqlSpecificNameImpl(node);
      }
      else if (type == SPECIFIC_ROUTINE_DESIGNATOR) {
        return new SqlSpecificRoutineDesignatorImpl(node);
      }
      else if (type == SPECIFIC_TYPE_METHOD) {
        return new SqlSpecificTypeMethodImpl(node);
      }
      else if (type == SQLSTATE_CHAR) {
        return new SqlSQLSTATECharImpl(node);
      }
      else if (type == SQLSTATE_CLASS_VALUE) {
        return new SqlSQLSTATEClassValueImpl(node);
      }
      else if (type == SQLSTATE_SUBCLASS_VALUE) {
        return new SqlSQLSTATESubclassValueImpl(node);
      }
      else if (type == SQL_ARGUMENT) {
        return new SqlSQLArgumentImpl(node);
      }
      else if (type == SQL_ARGUMENT_LIST) {
        return new SqlSQLArgumentListImpl(node);
      }
      else if (type == SQL_CLIENT_MODULE_DEFINITION) {
        return new SqlSQLClientModuleDefinitionImpl(node);
      }
      else if (type == SQL_CLIENT_MODULE_NAME) {
        return new SqlSQLClientModuleNameImpl(node);
      }
      else if (type == SQL_CONDITION) {
        return new SqlSQLConditionImpl(node);
      }
      else if (type == SQL_CONNECTION_STATEMENT) {
        return new SqlSQLConnectionStatementImpl(node);
      }
      else if (type == SQL_CONTROL_STATEMENT) {
        return new SqlSQLControlStatementImpl(node);
      }
      else if (type == SQL_DATA_ACCESS_INDICATION) {
        return new SqlSQLDataAccessIndicationImpl(node);
      }
      else if (type == SQL_DATA_CHANGE_STATEMENT) {
        return new SqlSQLDataChangeStatementImpl(node);
      }
      else if (type == SQL_DATA_STATEMENT) {
        return new SqlSQLDataStatementImpl(node);
      }
      else if (type == SQL_DIAGNOSTICS_INFORMATION) {
        return new SqlSQLDiagnosticsInformationImpl(node);
      }
      else if (type == SQL_DIAGNOSTICS_STATEMENT) {
        return new SqlSQLDiagnosticsStatementImpl(node);
      }
      else if (type == SQL_DYNAMIC_DATA_STATEMENT) {
        return new SqlSQLDynamicDataStatementImpl(node);
      }
      else if (type == SQL_DYNAMIC_STATEMENT) {
        return new SqlSQLDynamicStatementImpl(node);
      }
      else if (type == SQL_EXECUTABLE_STATEMENT) {
        return new SqlSQLExecutableStatementImpl(node);
      }
      else if (type == SQL_INVOKED_FUNCTION) {
        return new SqlSQLInvokedFunctionImpl(node);
      }
      else if (type == SQL_INVOKED_PROCEDURE) {
        return new SqlSQLInvokedProcedureImpl(node);
      }
      else if (type == SQL_INVOKED_ROUTINE) {
        return new SqlSQLInvokedRoutineImpl(node);
      }
      else if (type == SQL_LANGUAGE_CHARACTER) {
        return new SqlSQLLanguageCharacterImpl(node);
      }
      else if (type == SQL_LANGUAGE_IDENTIFIER) {
        return new SqlSQLLanguageIdentifierImpl(node);
      }
      else if (type == SQL_LANGUAGE_IDENTIFIER_PART) {
        return new SqlSQLLanguageIdentifierPartImpl(node);
      }
      else if (type == SQL_LANGUAGE_IDENTIFIER_START) {
        return new SqlSQLLanguageIdentifierStartImpl(node);
      }
      else if (type == SQL_PARAMETER_DECLARATION) {
        return new SqlSQLParameterDeclarationImpl(node);
      }
      else if (type == SQL_PARAMETER_DECLARATION_LIST) {
        return new SqlSQLParameterDeclarationListImpl(node);
      }
      else if (type == SQL_PARAMETER_NAME) {
        return new SqlSQLParameterNameImpl(node);
      }
      else if (type == SQL_PARAMETER_REFERENCE) {
        return new SqlSQLParameterReferenceImpl(node);
      }
      else if (type == SQL_PATH_CHARACTERISTIC) {
        return new SqlSQLPathCharacteristicImpl(node);
      }
      else if (type == SQL_PREFIX) {
        return new SqlSQLPrefixImpl(node);
      }
      else if (type == SQL_PROCEDURE_STATEMENT) {
        return new SqlSQLProcedureStatementImpl(node);
      }
      else if (type == SQL_ROUTINE_BODY) {
        return new SqlSQLRoutineBodyImpl(node);
      }
      else if (type == SQL_ROUTINE_SPEC) {
        return new SqlSQLRoutineSpecImpl(node);
      }
      else if (type == SQL_SCHEMA_DEFINITION_STATEMENT) {
        return new SqlSQLSchemaDefinitionStatementImpl(node);
      }
      else if (type == SQL_SCHEMA_MANIPULATION_STATEMENT) {
        return new SqlSQLSchemaManipulationStatementImpl(node);
      }
      else if (type == SQL_SCHEMA_STATEMENT) {
        return new SqlSQLSchemaStatementImpl(node);
      }
      else if (type == SQL_SERVER_NAME) {
        return new SqlSQLServerNameImpl(node);
      }
      else if (type == SQL_SESSION_STATEMENT) {
        return new SqlSQLSessionStatementImpl(node);
      }
      else if (type == SQL_SPECIAL_CHARACTER) {
        return new SqlSQLSpecialCharacterImpl(node);
      }
      else if (type == SQL_STATEMENT_NAME) {
        return new SqlSQLStatementNameImpl(node);
      }
      else if (type == SQL_STATEMENT_VARIABLE) {
        return new SqlSQLStatementVariableImpl(node);
      }
      else if (type == SQL_TERMINATOR) {
        return new SqlSQLTerminatorImpl(node);
      }
      else if (type == SQL_TRANSACTION_STATEMENT) {
        return new SqlSQLTransactionStatementImpl(node);
      }
      else if (type == SQUARE_ROOT) {
        return new SqlSquareRootImpl(node);
      }
      else if (type == STANDARD_CHARACTER_SET_NAME) {
        return new SqlStandardCharacterSetNameImpl(node);
      }
      else if (type == START_FIELD) {
        return new SqlStartFieldImpl(node);
      }
      else if (type == START_POSITION) {
        return new SqlStartPositionImpl(node);
      }
      else if (type == START_TRANSACTION_STATEMENT) {
        return new SqlStartTransactionStatementImpl(node);
      }
      else if (type == STATEMENT_CURSOR) {
        return new SqlStatementCursorImpl(node);
      }
      else if (type == STATEMENT_INFORMATION) {
        return new SqlStatementInformationImpl(node);
      }
      else if (type == STATEMENT_INFORMATION_ITEM) {
        return new SqlStatementInformationItemImpl(node);
      }
      else if (type == STATEMENT_INFORMATION_ITEM_NAME) {
        return new SqlStatementInformationItemNameImpl(node);
      }
      else if (type == STATEMENT_NAME) {
        return new SqlStatementNameImpl(node);
      }
      else if (type == STATEMENT_OR_DECLARATION) {
        return new SqlStatementOrDeclarationImpl(node);
      }
      else if (type == STATE_CATEGORY) {
        return new SqlStateCategoryImpl(node);
      }
      else if (type == STATIC_METHOD_INVOCATION) {
        return new SqlStaticMethodInvocationImpl(node);
      }
      else if (type == STATIC_METHOD_SELECTION) {
        return new SqlStaticMethodSelectionImpl(node);
      }
      else if (type == STATUS_PARAMETER) {
        return new SqlStatusParameterImpl(node);
      }
      else if (type == STRING_LENGTH) {
        return new SqlStringLengthImpl(node);
      }
      else if (type == STRING_POSITION_EXPRESSION) {
        return new SqlStringPositionExpressionImpl(node);
      }
      else if (type == STRING_VALUE_EXPRESSION) {
        return new SqlStringValueExpressionImpl(node);
      }
      else if (type == STRING_VALUE_FUNCTION) {
        return new SqlStringValueFunctionImpl(node);
      }
      else if (type == SUBMULTISET_PREDICATE) {
        return new SqlSubmultisetPredicateImpl(node);
      }
      else if (type == SUBMULTISET_PREDICATE_PART_2) {
        return new SqlSubmultisetPredicatePart2Impl(node);
      }
      else if (type == SUBQUERY) {
        return new SqlSubqueryImpl(node);
      }
      else if (type == SUBTABLE_CLAUSE) {
        return new SqlSubtableClauseImpl(node);
      }
      else if (type == SUBTYPE_CLAUSE) {
        return new SqlSubtypeClauseImpl(node);
      }
      else if (type == SUBTYPE_OPERAND) {
        return new SqlSubtypeOperandImpl(node);
      }
      else if (type == SUBTYPE_TREATMENT) {
        return new SqlSubtypeTreatmentImpl(node);
      }
      else if (type == SUBVIEW_CLAUSE) {
        return new SqlSubviewClauseImpl(node);
      }
      else if (type == SUPERTABLE_CLAUSE) {
        return new SqlSupertableClauseImpl(node);
      }
      else if (type == SUPERTABLE_NAME) {
        return new SqlSupertableNameImpl(node);
      }
      else if (type == SUPERTYPE_NAME) {
        return new SqlSupertypeNameImpl(node);
      }
      else if (type == SYSTEM_DESCRIPTOR_STATEMENT) {
        return new SqlSystemDescriptorStatementImpl(node);
      }
      else if (type == SYSTEM_GENERATED_REPRESENTATION) {
        return new SqlSystemGeneratedRepresentationImpl(node);
      }
      else if (type == TABLE_COMMIT_ACTION) {
        return new SqlTableCommitActionImpl(node);
      }
      else if (type == TABLE_CONSTRAINT) {
        return new SqlTableConstraintImpl(node);
      }
      else if (type == TABLE_CONSTRAINT_DEFINITION) {
        return new SqlTableConstraintDefinitionImpl(node);
      }
      else if (type == TABLE_CONTENTS_SOURCE) {
        return new SqlTableContentsSourceImpl(node);
      }
      else if (type == TABLE_DEFINITION) {
        return new SqlTableDefinitionImpl(node);
      }
      else if (type == TABLE_ELEMENT) {
        return new SqlTableElementImpl(node);
      }
      else if (type == TABLE_ELEMENT_LIST) {
        return new SqlTableElementListImpl(node);
      }
      else if (type == TABLE_EXPRESSION) {
        return new SqlTableExpressionImpl(node);
      }
      else if (type == TABLE_FUNCTION_COLUMN_LIST) {
        return new SqlTableFunctionColumnListImpl(node);
      }
      else if (type == TABLE_FUNCTION_COLUMN_LIST_ELEMENT) {
        return new SqlTableFunctionColumnListElementImpl(node);
      }
      else if (type == TABLE_FUNCTION_DERIVED_TABLE) {
        return new SqlTableFunctionDerivedTableImpl(node);
      }
      else if (type == TABLE_NAME) {
        return new SqlTableNameImpl(node);
      }
      else if (type == TABLE_OR_QUERY_NAME) {
        return new SqlTableOrQueryNameImpl(node);
      }
      else if (type == TABLE_PRIMARY) {
        return new SqlTablePrimaryImpl(node);
      }
      else if (type == TABLE_PRIMARY_OR_JOINED_TABLE) {
        return new SqlTablePrimaryOrJoinedTableImpl(node);
      }
      else if (type == TABLE_REFERENCE) {
        return new SqlTableReferenceImpl(node);
      }
      else if (type == TABLE_REFERENCE_LIST) {
        return new SqlTableReferenceListImpl(node);
      }
      else if (type == TABLE_ROW_VALUE_EXPRESSION) {
        return new SqlTableRowValueExpressionImpl(node);
      }
      else if (type == TABLE_SCOPE) {
        return new SqlTableScopeImpl(node);
      }
      else if (type == TABLE_SUBQUERY) {
        return new SqlTableSubqueryImpl(node);
      }
      else if (type == TABLE_VALUE_CONSTRUCTOR) {
        return new SqlTableValueConstructorImpl(node);
      }
      else if (type == TABLE_VALUE_CONSTRUCTOR_BY_QUERY) {
        return new SqlTableValueConstructorByQueryImpl(node);
      }
      else if (type == TARGET_ARRAY_ELEMENT_SPECIFICATION) {
        return new SqlTargetArrayElementSpecificationImpl(node);
      }
      else if (type == TARGET_ARRAY_REFERENCE) {
        return new SqlTargetArrayReferenceImpl(node);
      }
      else if (type == TARGET_CHARACTER_SET_SPECIFICATION) {
        return new SqlTargetCharacterSetSpecificationImpl(node);
      }
      else if (type == TARGET_DATA_TYPE) {
        return new SqlTargetDataTypeImpl(node);
      }
      else if (type == TARGET_SPECIFICATION) {
        return new SqlTargetSpecificationImpl(node);
      }
      else if (type == TARGET_SUBTYPE) {
        return new SqlTargetSubtypeImpl(node);
      }
      else if (type == TARGET_TABLE) {
        return new SqlTargetTableImpl(node);
      }
      else if (type == TEMPORARY_TABLE_DECLARATION) {
        return new SqlTemporaryTableDeclarationImpl(node);
      }
      else if (type == TERM) {
        return new SqlTermImpl(node);
      }
      else if (type == TIMESTAMP_LITERAL) {
        return new SqlTimestampLiteralImpl(node);
      }
      else if (type == TIMESTAMP_PRECISION) {
        return new SqlTimestampPrecisionImpl(node);
      }
      else if (type == TIMESTAMP_STRING) {
        return new SqlTimestampStringImpl(node);
      }
      else if (type == TIME_FRACTIONAL_SECONDS_PRECISION) {
        return new SqlTimeFractionalSecondsPrecisionImpl(node);
      }
      else if (type == TIME_INTERVAL) {
        return new SqlTimeIntervalImpl(node);
      }
      else if (type == TIME_LITERAL) {
        return new SqlTimeLiteralImpl(node);
      }
      else if (type == TIME_PRECISION) {
        return new SqlTimePrecisionImpl(node);
      }
      else if (type == TIME_STRING) {
        return new SqlTimeStringImpl(node);
      }
      else if (type == TIME_VALUE) {
        return new SqlTimeValueImpl(node);
      }
      else if (type == TIME_ZONE) {
        return new SqlTimeZoneImpl(node);
      }
      else if (type == TIME_ZONE_FIELD) {
        return new SqlTimeZoneFieldImpl(node);
      }
      else if (type == TIME_ZONE_INTERVAL) {
        return new SqlTimeZoneIntervalImpl(node);
      }
      else if (type == TIME_ZONE_SPECIFIER) {
        return new SqlTimeZoneSpecifierImpl(node);
      }
      else if (type == TOKEN) {
        return new SqlTokenImpl(node);
      }
      else if (type == TO_SQL) {
        return new SqlToSqlImpl(node);
      }
      else if (type == TO_SQL_FUNCTION) {
        return new SqlToSqlFunctionImpl(node);
      }
      else if (type == TRANSACTION_ACCESS_MODE) {
        return new SqlTransactionAccessModeImpl(node);
      }
      else if (type == TRANSACTION_CHARACTERISTICS) {
        return new SqlTransactionCharacteristicsImpl(node);
      }
      else if (type == TRANSACTION_MODE) {
        return new SqlTransactionModeImpl(node);
      }
      else if (type == TRANSCODING) {
        return new SqlTranscodingImpl(node);
      }
      else if (type == TRANSCODING_NAME) {
        return new SqlTranscodingNameImpl(node);
      }
      else if (type == TRANSFORMS_TO_BE_DROPPED) {
        return new SqlTransformsToBeDroppedImpl(node);
      }
      else if (type == TRANSFORM_DEFINITION) {
        return new SqlTransformDefinitionImpl(node);
      }
      else if (type == TRANSFORM_ELEMENT) {
        return new SqlTransformElementImpl(node);
      }
      else if (type == TRANSFORM_ELEMENT_LIST) {
        return new SqlTransformElementListImpl(node);
      }
      else if (type == TRANSFORM_GROUP) {
        return new SqlTransformGroupImpl(node);
      }
      else if (type == TRANSFORM_GROUP_CHARACTERISTIC) {
        return new SqlTransformGroupCharacteristicImpl(node);
      }
      else if (type == TRANSFORM_GROUP_ELEMENT) {
        return new SqlTransformGroupElementImpl(node);
      }
      else if (type == TRANSFORM_GROUP_SPECIFICATION) {
        return new SqlTransformGroupSpecificationImpl(node);
      }
      else if (type == TRANSFORM_KIND) {
        return new SqlTransformKindImpl(node);
      }
      else if (type == TRANSLITERATION_DEFINITION) {
        return new SqlTransliterationDefinitionImpl(node);
      }
      else if (type == TRANSLITERATION_NAME) {
        return new SqlTransliterationNameImpl(node);
      }
      else if (type == TRANSLITERATION_ROUTINE) {
        return new SqlTransliterationRoutineImpl(node);
      }
      else if (type == TRANSLITERATION_SOURCE) {
        return new SqlTransliterationSourceImpl(node);
      }
      else if (type == TRIGGERED_ACTION) {
        return new SqlTriggeredActionImpl(node);
      }
      else if (type == TRIGGERED_SQL_STATEMENT) {
        return new SqlTriggeredSQLStatementImpl(node);
      }
      else if (type == TRIGGER_ACTION_TIME) {
        return new SqlTriggerActionTimeImpl(node);
      }
      else if (type == TRIGGER_COLUMN_LIST) {
        return new SqlTriggerColumnListImpl(node);
      }
      else if (type == TRIGGER_DEFINITION) {
        return new SqlTriggerDefinitionImpl(node);
      }
      else if (type == TRIGGER_EVENT) {
        return new SqlTriggerEventImpl(node);
      }
      else if (type == TRIGGER_NAME) {
        return new SqlTriggerNameImpl(node);
      }
      else if (type == TRIM_CHARACTER) {
        return new SqlTrimCharacterImpl(node);
      }
      else if (type == TRIM_FUNCTION) {
        return new SqlTrimFunctionImpl(node);
      }
      else if (type == TRIM_OCTET) {
        return new SqlTrimOctetImpl(node);
      }
      else if (type == TRIM_OPERANDS) {
        return new SqlTrimOperandsImpl(node);
      }
      else if (type == TRIM_SOURCE) {
        return new SqlTrimSourceImpl(node);
      }
      else if (type == TRIM_SPECIFICATION) {
        return new SqlTrimSpecificationImpl(node);
      }
      else if (type == TRUTH_VALUE) {
        return new SqlTruthValueImpl(node);
      }
      else if (type == TYPE_LIST) {
        return new SqlTypeListImpl(node);
      }
      else if (type == TYPE_PREDICATE) {
        return new SqlTypePredicateImpl(node);
      }
      else if (type == TYPE_PREDICATE_PART_2) {
        return new SqlTypePredicatePart2Impl(node);
      }
      else if (type == UNDERSCORE) {
        return new SqlUnderscoreImpl(node);
      }
      else if (type == UNICODE_4_DIGIT_ESCAPE_VALUE) {
        return new SqlUnicode4DigitEscapeValueImpl(node);
      }
      else if (type == UNICODE_CHARACTER_ESCAPE_VALUE) {
        return new SqlUnicodeCharacterEscapeValueImpl(node);
      }
      else if (type == UNICODE_CHARACTER_STRING_LITERAL) {
        return new SqlUnicodeCharacterStringLiteralImpl(node);
      }
      else if (type == UNICODE_DELIMITER_BODY) {
        return new SqlUnicodeDelimiterBodyImpl(node);
      }
      else if (type == UNICODE_ESCAPE_SPECIFIER) {
        return new SqlUnicodeEscapeSpecifierImpl(node);
      }
      else if (type == UNICODE_ESCAPE_VALUE) {
        return new SqlUnicodeEscapeValueImpl(node);
      }
      else if (type == UNICODE_IDENTIFIER_PART) {
        return new SqlUnicodeIdentifierPartImpl(node);
      }
      else if (type == UNICODE_REPRESENTATION) {
        return new SqlUnicodeRepresentationImpl(node);
      }
      else if (type == UNION_JOIN) {
        return new SqlUnionJoinImpl(node);
      }
      else if (type == UNIQUE_COLUMN_LIST) {
        return new SqlUniqueColumnListImpl(node);
      }
      else if (type == UNIQUE_CONSTRAINT_DEFINITION) {
        return new SqlUniqueConstraintDefinitionImpl(node);
      }
      else if (type == UNIQUE_PREDICATE) {
        return new SqlUniquePredicateImpl(node);
      }
      else if (type == UNIQUE_SPECIFICATION) {
        return new SqlUniqueSpecificationImpl(node);
      }
      else if (type == UNQUOTED_DATE_STRING) {
        return new SqlUnquotedDateStringImpl(node);
      }
      else if (type == UNQUOTED_INTERVAL_STRING) {
        return new SqlUnquotedIntervalStringImpl(node);
      }
      else if (type == UNQUOTED_TIMESTAMP_STRING) {
        return new SqlUnquotedTimestampStringImpl(node);
      }
      else if (type == UNQUOTED_TIME_STRING) {
        return new SqlUnquotedTimeStringImpl(node);
      }
      else if (type == UNSIGNED_INTEGER) {
        return new SqlUnsignedIntegerImpl(node);
      }
      else if (type == UNSIGNED_LITERAL) {
        return new SqlUnsignedLiteralImpl(node);
      }
      else if (type == UNSIGNED_NUMERIC_LITERAL) {
        return new SqlUnsignedNumericLiteralImpl(node);
      }
      else if (type == UNSIGNED_VALUE_SPECIFICATION) {
        return new SqlUnsignedValueSpecificationImpl(node);
      }
      else if (type == UPDATABILITY_CLAUSE) {
        return new SqlUpdatabilityClauseImpl(node);
      }
      else if (type == UPDATE_RULE) {
        return new SqlUpdateRuleImpl(node);
      }
      else if (type == UPDATE_SOURCE) {
        return new SqlUpdateSourceImpl(node);
      }
      else if (type == UPDATE_STATEMENT_POSITIONED) {
        return new SqlUpdateStatementPositionedImpl(node);
      }
      else if (type == UPDATE_STATEMENT_SEARCHED) {
        return new SqlUpdateStatementSearchedImpl(node);
      }
      else if (type == UPDATE_TARGET) {
        return new SqlUpdateTargetImpl(node);
      }
      else if (type == UPPER_LIMIT) {
        return new SqlUpperLimitImpl(node);
      }
      else if (type == USER_DEFINED_CAST_DEFINITION) {
        return new SqlUserDefinedCastDefinitionImpl(node);
      }
      else if (type == USER_DEFINED_CHARACTER_SET_NAME) {
        return new SqlUserDefinedCharacterSetNameImpl(node);
      }
      else if (type == USER_DEFINED_ORDERING_DEFINITION) {
        return new SqlUserDefinedOrderingDefinitionImpl(node);
      }
      else if (type == USER_DEFINED_REPRESENTATION) {
        return new SqlUserDefinedRepresentationImpl(node);
      }
      else if (type == USER_DEFINED_TYPE_BODY) {
        return new SqlUserDefinedTypeBodyImpl(node);
      }
      else if (type == USER_DEFINED_TYPE_DEFINITION) {
        return new SqlUserDefinedTypeDefinitionImpl(node);
      }
      else if (type == USER_DEFINED_TYPE_NAME) {
        return new SqlUserDefinedTypeNameImpl(node);
      }
      else if (type == USER_DEFINED_TYPE_OPTION) {
        return new SqlUserDefinedTypeOptionImpl(node);
      }
      else if (type == USER_DEFINED_TYPE_OPTION_LIST) {
        return new SqlUserDefinedTypeOptionListImpl(node);
      }
      else if (type == USER_DEFINED_TYPE_SPECIFICATION) {
        return new SqlUserDefinedTypeSpecificationImpl(node);
      }
      else if (type == USER_DEFINED_TYPE_VALUE_EXPRESSION) {
        return new SqlUserDefinedTypeValueExpressionImpl(node);
      }
      else if (type == USER_IDENTIFIER) {
        return new SqlUserIdentifierImpl(node);
      }
      else if (type == USING_ARGUMENT) {
        return new SqlUsingArgumentImpl(node);
      }
      else if (type == USING_ARGUMENTS) {
        return new SqlUsingArgumentsImpl(node);
      }
      else if (type == USING_DESCRIPTOR) {
        return new SqlUsingDescriptorImpl(node);
      }
      else if (type == USING_INPUT_DESCRIPTOR) {
        return new SqlUsingInputDescriptorImpl(node);
      }
      else if (type == VALUE_EXPRESSION) {
        return new SqlValueExpressionImpl(node);
      }
      else if (type == VALUE_EXPRESSION_PRIMARY) {
        return new SqlValueExpressionPrimaryImpl(node);
      }
      else if (type == VALUE_SPECIFICATION) {
        return new SqlValueSpecificationImpl(node);
      }
      else if (type == VERTICAL_BAR) {
        return new SqlVerticalBarImpl(node);
      }
      else if (type == VIEW_COLUMN_LIST) {
        return new SqlViewColumnListImpl(node);
      }
      else if (type == VIEW_COLUMN_OPTION) {
        return new SqlViewColumnOptionImpl(node);
      }
      else if (type == VIEW_DEFINITION) {
        return new SqlViewDefinitionImpl(node);
      }
      else if (type == VIEW_ELEMENT) {
        return new SqlViewElementImpl(node);
      }
      else if (type == VIEW_ELEMENT_LIST) {
        return new SqlViewElementListImpl(node);
      }
      else if (type == VIEW_SPECIFICATION) {
        return new SqlViewSpecificationImpl(node);
      }
      else if (type == WHEN_OPERAND) {
        return new SqlWhenOperandImpl(node);
      }
      else if (type == WHERE_CLAUSE) {
        return new SqlWhereClauseImpl(node);
      }
      else if (type == WIDTH_BUCKET_BOUND_1) {
        return new SqlWidthBucketBound1Impl(node);
      }
      else if (type == WIDTH_BUCKET_BOUND_2) {
        return new SqlWidthBucketBound2Impl(node);
      }
      else if (type == WIDTH_BUCKET_COUNT) {
        return new SqlWidthBucketCountImpl(node);
      }
      else if (type == WIDTH_BUCKET_FUNCTION) {
        return new SqlWidthBucketFunctionImpl(node);
      }
      else if (type == WIDTH_BUCKET_OPERAND) {
        return new SqlWidthBucketOperandImpl(node);
      }
      else if (type == WINDOW_CLAUSE) {
        return new SqlWindowClauseImpl(node);
      }
      else if (type == WINDOW_DEFINITION) {
        return new SqlWindowDefinitionImpl(node);
      }
      else if (type == WINDOW_DEFINITION_LIST) {
        return new SqlWindowDefinitionListImpl(node);
      }
      else if (type == WINDOW_FRAME_BETWEEN) {
        return new SqlWindowFrameBetweenImpl(node);
      }
      else if (type == WINDOW_FRAME_BOUND) {
        return new SqlWindowFrameBoundImpl(node);
      }
      else if (type == WINDOW_FRAME_BOUND_1) {
        return new SqlWindowFrameBound1Impl(node);
      }
      else if (type == WINDOW_FRAME_BOUND_2) {
        return new SqlWindowFrameBound2Impl(node);
      }
      else if (type == WINDOW_FRAME_CLAUSE) {
        return new SqlWindowFrameClauseImpl(node);
      }
      else if (type == WINDOW_FRAME_EXCLUSION) {
        return new SqlWindowFrameExclusionImpl(node);
      }
      else if (type == WINDOW_FRAME_EXTENT) {
        return new SqlWindowFrameExtentImpl(node);
      }
      else if (type == WINDOW_FRAME_FOLLOWING) {
        return new SqlWindowFrameFollowingImpl(node);
      }
      else if (type == WINDOW_FRAME_PRECEDING) {
        return new SqlWindowFramePrecedingImpl(node);
      }
      else if (type == WINDOW_FRAME_START) {
        return new SqlWindowFrameStartImpl(node);
      }
      else if (type == WINDOW_FRAME_UNITS) {
        return new SqlWindowFrameUnitsImpl(node);
      }
      else if (type == WINDOW_FUNCTION) {
        return new SqlWindowFunctionImpl(node);
      }
      else if (type == WINDOW_FUNCTION_TYPE) {
        return new SqlWindowFunctionTypeImpl(node);
      }
      else if (type == WINDOW_NAME) {
        return new SqlWindowNameImpl(node);
      }
      else if (type == WINDOW_NAME_OR_SPECIFICATION) {
        return new SqlWindowNameOrSpecificationImpl(node);
      }
      else if (type == WINDOW_ORDER_CLAUSE) {
        return new SqlWindowOrderClauseImpl(node);
      }
      else if (type == WINDOW_PARTITION_CLAUSE) {
        return new SqlWindowPartitionClauseImpl(node);
      }
      else if (type == WINDOW_PARTITION_COLUMN_REFERENCE) {
        return new SqlWindowPartitionColumnReferenceImpl(node);
      }
      else if (type == WINDOW_PARTITION_COLUMN_REFERENCE_LIST) {
        return new SqlWindowPartitionColumnReferenceListImpl(node);
      }
      else if (type == WINDOW_SPECIFICATION) {
        return new SqlWindowSpecificationImpl(node);
      }
      else if (type == WINDOW_SPECIFICATION_DETAILS) {
        return new SqlWindowSpecificationDetailsImpl(node);
      }
      else if (type == WITHIN_GROUP_SPECIFICATION) {
        return new SqlWithinGroupSpecificationImpl(node);
      }
      else if (type == WITH_CLAUSE) {
        return new SqlWithClauseImpl(node);
      }
      else if (type == WITH_COLUMN_LIST) {
        return new SqlWithColumnListImpl(node);
      }
      else if (type == WITH_LIST) {
        return new SqlWithListImpl(node);
      }
      else if (type == WITH_LIST_ELEMENT) {
        return new SqlWithListElementImpl(node);
      }
      else if (type == WITH_OR_WITHOUT_DATA) {
        return new SqlWithOrWithoutDataImpl(node);
      }
      else if (type == WITH_OR_WITHOUT_TIME_ZONE) {
        return new SqlWithOrWithoutTimeZoneImpl(node);
      }
      else if (type == YEARS_VALUE) {
        return new SqlYearsValueImpl(node);
      }
      else if (type == YEAR_MONTH_LITERAL) {
        return new SqlYearMonthLiteralImpl(node);
      }
      throw new AssertionError("Unknown element type: " + type);
    }
  }
}
